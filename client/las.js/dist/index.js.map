{"version":3,"sources":["webpack://Las/webpack/universalModuleDefinition","webpack://Las/webpack/bootstrap","webpack://Las/./node_modules/events/events.js","webpack://Las/./node_modules/webworkify-webpack/index.js","webpack://Las/./src/core/errors.ts","webpack://Las/./src/core/events.ts","webpack://Las/./src/core/worker-cmd.ts","webpack://Las/./src/types/remux.ts","webpack://Las/./src/utils/aac-helper.ts","webpack://Las/./src/remux/mp4-generator.ts","webpack://Las/./src/remux/mp4-remuxer.ts","webpack://Las/./src/demux/audio-specific-config.ts","webpack://Las/./src/demux/exp-golomb.ts","webpack://Las/./src/demux/sps-parser.ts","webpack://Las/./src/utils/decode-utf8.ts","webpack://Las/./src/demux/flv/flv-script-tag-decoder.ts","webpack://Las/./src/demux/flv/flv-demuxer.ts","webpack://Las/./src/demux/flv/flv-demuxer-inline.ts","webpack://Las/./src/demux/flv/flv-demuxer-worker.ts","webpack://Las/./src/config.ts","webpack://Las/./src/abr/abr-get-url.ts","webpack://Las/./src/utils/codec-helper.ts","webpack://Las/./src/abr/abr-level.ts","webpack://Las/./src/abr/abr-manifest.ts","webpack://Las/./src/io/fetch.ts","webpack://Las/./src/io/xhr.ts","webpack://Las/./src/io/loader.ts","webpack://Las/./src/utils/speed-test.ts","webpack://Las/./src/abr/abr-algorithm-simple.ts","webpack://Las/./src/abr/multirate.ts","webpack://Las/./src/io/cache.ts","webpack://Las/./src/demux/flv/flv-preprocessor.ts","webpack://Las/./src/core/report-types.ts","webpack://Las/./src/core/las-main.ts","webpack://Las/./src/core/media.ts","webpack://Las/./src/core/mse.ts","webpack://Las/./src/types/monitor-data.ts","webpack://Las/./src/monitor/playback-quality.ts","webpack://Las/./src/monitor/stream-monitor.ts","webpack://Las/./src/monitor/monitor.ts","webpack://Las/./src/utils/is-supported.ts","webpack://Las/./src/utils/playback-rate-manager.ts","webpack://Las/./src/index.ts","webpack://Las/./src/types/flv-object.ts","webpack://Las/./src/utils/browser-helper.ts","webpack://Las/./src/utils/log.ts"],"names":["ErrorTypes","ErrorDetails","LasEvents","MEDIA_INFO","MP4_SEGMENT","SCRIPT_PARSED","LOAD_END","ERROR","LEVEL_SWITCH_FAILED","LEVEL_SWITCHING","LEVEL_SWITCHED","MANIFEST_PARSED","FLV_HEAD","REPORT","HEARTBEAT","WorkerCmd","TrackType","AAC_SAMPLE_DURATION","AAC_SILENT_FRAME_DATA","Uint8Array","getAACFrameDuration","samplerate","getAACSilentFrame","audioCodec","channelCount","UINT32_MAX","Math","pow","BOX_HEAD_LEN","HDLR","video","audio","FTYP","STTS","STSC","STCO","STSZ","DINF","VMHD","SMHD","BTRT","MVHD_TPL","TKHD_TPL","TREX_TPL","MDHD_TPL","MP4A_STSD_TPL","AVC1_STSD_TPL","PASP_TPL","MP4","moov","tracks","len","byteLength","_getMoovLen","dest","data","offset","set","_writeMoov","videoMediaSegment","sn","baseMediaDecodeTime","track","mdatLen","mp4Samples","reduce","prev","item","units","unitLen","unit","d","_getMediaSegmentData","_mediaSegmentHead","samples","forEach","sample","unitData","unitDataLen","audioMediaSegment","trakLen","_getTrakLen","_getMvexLen","moovLen","_writeBoxHead","types","_writeMvhd","timescale","duration","_writeTrak","_writeMvex","_getMoofLen","sampleCount","initSegment","_writeMoof","mdat","moofLen","length","upperWordDuration","floor","lowerWordDuration","mvhd","_writeTkhd","id","width","height","hasOwnProperty","tkhd","_getMdiaLen","trak","_writeMdia","type","_getMinfLen","mdiaLen","mdia","_writeMdhd","_writeMinf","mdhd","_getStblLen","minf","_writeStbl","_getStsdLen","stblLen","stbl","_writeStsd","_getMp4aStsdLen","_getAvc1StsdLen","_writeMp4aStsd","_writeAvc1Stsd","_getAvcCLen","spsLen","sps","ppsLen","pps","_getAvc1Len","i","push","concat","Array","prototype","slice","call","avcCLen","avc1Len","stsdLen","avc1Stsd","hSpacing","pixelRatio","vSpacing","avcC","avcc","pasp","_getMp4aEsdsLen","configLen","config","esdsLen","mp4aLen","mp4a","tmp","mvexLen","mvex","_writeTrex","trex","trafLen","sdtpLen","trunLen","trunOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","moof","mfhd","traf","tfhd","tfdt","sdtp","index","flags","dependsOn","isDependedOn","hasRedundancy","trun","isLeading","isNonSync","degradPrio","cts","MAX_FILL_FRAME_DURATION","DEFAULT_VIDEO_SAMPLE_DURATION","MP4Remuxer","eventEmitter","tag","_eventEmitter","_forceFirstIDR","_videoTimeReference","_videoTimeReferenceInfo","_extra","_nextAudioPTS","_nextVideoDTS","_initPTS","_videoLastPTS","_audioLastPTS","_videoSampleDuration","_moovs","gopRemux","navigator","userAgent","toLowerCase","indexOf","resetMoov","undefined","_clearVideoTimeReference","setExtra","resetTimeStamp","getLastPTS","flush","videoData","info","sequenceNumber","_remuxVideo","remux","audioTrack","videoTrack","timeOffset","isContinuous","isFlush","_initMP4","audioData","pts","dts","unshift","_remuxAudio","codec","_fillEmptyAudio","startPTS","endPTS","streamDTS","segments","emit","extra","audioSamples","videoSamples","mediaInfo","moovs","initPTS","audioSampleRate","hasAudio","defaultAudioCodec","defaultCodec","inputTimescale","inputTimeScale","videoCodec","fps","profile","level","chromaFormat","hasVideo","videoInitPTS","videoInitDTS","min","MUX_ERROR","details","DEMUX_ERROR","fatal","reason","activeTimeReference","sampleDuration","samplesCount","nextVideoDTS","sort","a","b","pop","firstDTS","max","firstPTS","delta","round","videoSample","mp4SampleLength","nextSample","nextSampleCts","key","lastSample","nextVideoPTS","payload","_getMoovByType","startDTS","endDTS","inputAudioTimeScale","scaleFactor","inputSampleDuration","firstAudioPTS","lastPTS","inputSamples","nextAudioPTS","frameDuration","nextPTS","audioSample","abs","Log","v","fillCount","j","fillFrame","subarray","start","end","ceil","time","result","SAMPLING_FREQUENCY_LIST","parseAudioSpecificConfig","audioObjectType","samplingFrequencyIndex","extensionSamplingFrequencyIndex","channelConfiguration","BrowserHelper","isFirefox","isAndroid","ExpGolomb","_data","_byteIndex","_bitIndex","skipBits","bitLen","bitRemaining","bitMove","bits","Error","byte","readBitLen","shiftLeft","value","ue","count","_leadingZeroCount","se","AspectRatio","ChromaFormat","Profile","ProfileIDCList","SPSParser","parse","spsData","profileIDC","levelIDC","chromaFormatIDC","scalingListCount","_skipScalingList","picOrderCntType","num","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","pixelAspectRatio","aspectRatioIDC","numUnitsInTick","timeScale","cropUnitX","cropUnitY","subWc","subHc","toFixed","lastScale","nextScale","deltaScale","decodeUTF8","size","unicode","String","fromCodePoint","apply","FlvScriptTagDecoder","decode","source","view","DataView","_read","e","s","getUint8","getFloat64","_readString","_isObjectEnd","_readObjProperty","getUint32","_readDate","_readLongString","getInt16","obj","name","getUint16","buffer","byteOffset","timestamp","tz","Date","DISCONTINUITY_ON_NON_MONOTONOUS","AUDIO_TIME_ORIGIN_THRESHOLD","FlvDemux","remuxer","_remuxer","_naluLengthSize","_hasVideo","_hasAudio","_videoTrack","_audioTrack","_remuxStat","_audioLastDTS","_videoLastDTS","_nonMonotonousTagCache","_audioCodec","_videoCodec","codecWidth","codecHeight","append","tags","tagType","FlvTagType","VIDEO","_parseVideoData","AUDIO","_parseAudioData","SCRIPT","_parseScriptTag","_remux","setCodecs","flvHead","destroy","reset","body","scriptData","onMetaData","framerate","spec","frameType","codecId","_onError","packetType","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","dataOffset","arrayBuffer","dataSize","version","avcProfile","spsCount","spsList","codecArray","codecString","h","toString","ppsCount","fromNonMonotonousCache","lengthSize","keyframe","w","_onNonMonotonous","_flushNonMonotonousCache","naluSize","unitType","avcSample","aacFrameLen","aacData","dtsDiff","threshold","aacSample","cache","ptsSync","nonMonotonousCache","shift","audiotrack","videotrack","error","REMUX_ERROR","message","FlvDemuxerInline","extraData","_config","_extraData","_demuxer","init","FlvDemuxer","self","flv","EventEmitter","on","postMessage","event","payloads","element","removeAllListeners","addEventListener","cmd","INIT","debug","DESTROY","APPEND_DATA","SET_CODECS","FLUSH","SET_EXTRA","DEFAULT_CONFIG","webWorker","appendErrorMaxRetry","credentials","defaultLiveDelay","LOG_LEVEL","LEVEL_ERROR","connectionTimeout","transmissionTimeout","autoRecoverMedia","autoPlaybackRate","ConfigHelper","processConfig","userConfig","window","Worker","_initPlayBackRateRule","conf","autoPlaybackRateConf","rule","isArray","filter","upper","lower","rate","delay","abrPlabackRateConf","startDelay","interval","Number","MAX_SAFE_INTEGER","abrGetUrl","url","spts","arr","split","splice","join","parseCodecStr","AbrLevel","bitrate","maxBitrate","avgBitrate","qualityType","qualityTypeName","hidden","disabledFromAdaptive","defaultSelected","AbrManifest","verify","adaptationSet","representation","manifest","_levels","_abrLevels","_default","codecs","FetchLoader","_context","_callbacks","_controller","_reader","_abort","isSupport","fetch","ReadableStream","load","context","callbacks","reqHeaders","Headers","headers","header","params","method","mode","referrerPolicy","signal","_getAbortSignal","then","res","responseUrl","responseHeader","onConnect","status","ok","getReader","cancel","responseType","progress","_pump","responseData","_onEnd","text","statusText","catch","abort","_onProgress","chunk","onProgress","onEnd","onError","reader","read","done","AbortController","XHR_TYPE","XHR","isSupportChunk","supportChunk","UNKNOW","xhr","XMLHttpRequest","open","MOZ_CHUNK","UNSUPPORT","MS_STREAM","_xhr","_msBufferOffset","_msBufferUpper","_progress","MSStreamReader","onprogress","_msrOnProgress","bind","onload","_onLoadEnd","onerror","onreadystatechange","_onReadyStateChange","withCredentials","send","readyState","responseURL","getAllResponseHeaders","readAsArrayBuffer","response","target","ChunkLoader","Loader","_loader","_loaderCallback","_stats","_retryDelay","_loading","_aborted","_requestTimeout","_transTimer","_retryTimeout","_progressTime","_onConnect","clearTimeout","_startTransmissionTimer","httpStatusCode","firstDataTime","requestStartTime","performance","now","stats","loadedSize","_stopTimer","totalSize","loadedTime","_destroyInternalLoader","fatalError","maxRetry","retryCount","errorMessage","setTimeout","_loadInternal","_onTimeout","_abortInternal","useFetch","retryDelay","_getInternalLoader","onAbort","_stopTransmissionTimer","timeout","setInterval","clearInterval","MAX_TIMEOUT","SpeedTest","_result","_callback","_loaderConf","_loaderCallbacks","_timer","_startTime","_testEnd","firstPackageDuration","loaded","_onLoaderError","succeeded","_onLoaderEnd","_onAbort","callback","loaderContext","_startTimer","CONFIG","stableBufferDiffThresholdSecond","stableBufferIntervalMs","speedTestTimeoutMs","generateSpeedGapMs","bufferCheckIntervalMs","smoothedSpeedUtilizationRatio","smallSpeedToBitrateRatio","enoughSpeedToBitrateRatio","bufferLowerLimitSecond","recentBufferedSize","smoothedSpeedRatio","isSpeedFullyUsed","AbrAlgorithmSimple","_conf","_pastBuffer","_current","_next","_stableBufferStartTime","_speedTester","_generatedSpeed","_lastCheckBuffer","_lastSpeed","levels","default","_checkBuffer","_updateStableBuffer","buffered","diff","diffRatio","_isSpeedFullyUsed","bufferedSec","isBufferStable","_startTesting","lastDownloadSize","downloadSize","testedBitrate","originalDownloadSize","testedSpeed","setAvailableBitrates","list","onGOP","speed","_nextRateIndex","onLevelLoad","_quantization","_nextRateBySpeedAndBuffered","_getSmoothedSpeed","_getPredictedBuffer","pastBuffer","_getBufferSpeed","bufferSpeedRatio","_isSpeedTooSmall","_isSpeedEnough","bufferSpeed","smoothedSpeed","predictedBuffered","nextIndex","Multirate","media","src","_media","_downloadSizeTotal","_downloadSize","_downloadStartTime","_keyCount","_index","_alg","_manifest","_autoLevelEnabled","abrLevels","current","nextLevel","currentLevel","destory","onLoaderChunk","onKeyFrame","next","_getRequestUrl","Cache","_size","_readOffset","_writeOffset","_storage","_cache","DEFAULT_CACHE_SIZE","ArrayBuffer","put","expected","_collateCache","expandCache","get","skip","clear","MAX_CACHE_SIZE","_transfer","remain","TypeError","sourceView","destView","FlvPreprocessor","onFlvKeyframe","_tag","_parseLen","_parseFunc","_onFlvKeyframe","FlvSize","FLV_HEAD_LEN","_parseFlvHead","callbackResult","processing","input","unreadLen","FLV_TAG_HEAD_LEN","_parseFlvTagHead","FlvTag","_detectKeyFrame","AVC_KEY_FRAME_CHECK_LEN","_parseFlvTag","FLV_TAG_SIZE_LEN","REPORT_TYPES","START_LOAD_STREAM","LOADER_CHUNK_ARRIVAL","KEY_FRAME","URL_REG","RegExp","LasMain","_w","_flv","_multirate","_isContinuous","_remuxId","_baseTimeSec","_tagDump","_currentUrl","_isAbr","_src","_onWorkerEvent","ev","_onEvent","_flvKeyframeCallback","hasStreamTime","updateStreamTime","mp4Data","remuxId","segment","_onLoaderProgress","timeCost","_append","getLocalTime","startSec","smooth","_load","_onLoaderAbort","errInfo","NETWORK_ERROR","LOAD_ERROR_TIMEOUT","LOAD_ERROR","work","require","test","JSON","OTHER_ERROR","MANIFEST_ERROR","mr","_destroyLoader","removeEventListener","terminate","_updateCodecs","sync","_refreshRemuxId","autoLevelEnabled","currentTime","Media","_video","_mse","_streamTime","_localTime","attachVideo","attachMSE","mse","isTimeinBuffered","sec","bufferedSecByType","bufferedEndByType","mseBufferedSecByType","bufferedByType","bufferSliceNumByType","pendingNum","pendingSecByType","currentBuffer","nextBuffer","streamTime","localTime","QUEUE_SIZE_LIMIT","MAX_CLEANUP_DURATION","MIN_CLEANUP_DURATION","MAX_BUFFERED","MSE","_sourceBuffer","_mediaSource","_mimeCodec","_cleanUpTask","_appendQueue","_endOfData","_appendEnabled","_duration","_appendError","_appendBufferError","_sbHandler","_onSourceOpen","_checkSourceBuffer","refresh","_onSourceEnded","_onSourceClose","_onSourceBufferUpdateEnd","_update","_endOfStream","_onSourceBufferError","MSE_ERROR","SOURCEBUFFER_ERROR","audiovideo","attach","MediaSourceDef","MediaSource","WebKitMediaSource","ms","URL","createObjectURL","MEDIASOURCE_ERROR","mediaInit","hasSourceBuffer","updateend","mediaSegment","sb","_addSourceBuffer","addSourceBuffer","ADDSOURCEBUFFER_ERROR","_hasPendingData","_doAppend","_getBufferQueueSize","APPENDBUFFER_ERROR","updating","_appendBuffer","_calculateRemoveRange","seeking","task","_cleanUpRange","range","bufStart","bufEnd","removeStart","removeEnd","remove","appendBuffer","code","useless","hasCleanUpTask","_cleanUp","endSec","flushType","POSITIVE_INFINITY","setAppendEnabled","getAppendEnabled","endOfData","ended","endOfStream","ENDOFSTREAM_ERROR","removeSourceBuffer","Object","keys","getBufferQueueSec","prevDuration","currentSegment","getNewMonitorData","decodedFPS","droppedFPS","decodedFrames","droppedFrames","loadStartTime","firstFrameTime","blockDuration","blockCount","downloadedBytes","PlaybackQuality","_lastDroppedFrames","_lastDecodedFrames","_isVideoPlaybackQualityAvailable","_lastTime","_decoded","_dropped","attachMedia","HTMLVideoElement","getVideoPlaybackQuality","videoPlaybackQuality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","getInfo","decoded","dropped","currentPeriod","currentDropped","currentDecoded","parseFloat","RECORD_NUM_LIMIT","RECORD_DOWNLOAD_NUM_LIMIT","RECORD_SEGMRNT_NUM_LIMIT","StreamMonitor","_qos","traffic","streams","download","keyFrame","onStreamOpen","startPos","loadTimeCost","videoDataRate","audioDataRate","onMediaInfo","loadingInfo","onDataReceive","log","onMediaSegment","qos","stream","totalLen","getInfoByTime","updateStartPos","tsEnd","ts","HEARTBEAT_INTERVAL","Monitor","_playbackQuality","_playing","_sm","_hbTimer","_heartbeat","_refresh","sm","hb","totalReceive","downloadSpeed","onReport","_stopHeartbeat","onLoad","_startHeartbeat","onSegmentInit","onLoadeddata","_onFirstFrame","_waitingEnd","onCanplay","onPlaying","onWaiting","block","_waitingStart","onStopLoad","onSegment","playbackQualityInfo","bufferingStartMS","isSupported","mediaSource","sourceBuffer","SourceBuffer","WebKitSourceBuffer","isTypeSupported","sourceBufferValidAPI","streaming","PlaybackRateManager","_interval","_tick","stop","_nextPlayBackRate","playbackRate","downRule","upRule","MAIN_TIMER_INTERVAL","STAT","Las","__VERSION__","_lasMain","_stat","_audioCodecSwap","_error","_recoverMediaErrorTime","_mainTimer","_nextLevel","_mediaInfo","_loadStopped","_seekOnUpdateEnd","_playingLevel","_startLevel","_monitor","_playbackRateManager","_onVideoLoadeddata","_onVideoCanplay","NONE","_checkLevelChange","paused","_onVideoPlaying","_onVideoWaiting","WAITING","_onVideoEnded","_onVideoError","_recoverSwapRemuxType","_recoverSwapAudioCodec","MEDIA_ERROR","VIDEO_ERROR","_resetMSE","revokeObjectURL","removeAttribute","_destroyMSE","_initMSE","_mainLoop","EPS","SEEK","SELECT_BITRATE","jumpTo","isSafari","_internalSeek","off","removeListener","CONFIG_ERROR","UNSUPPORTED","_startMainTimer","_initMonitor","_bindVideoEvents","NO_VIDEO","resume","play","_stopMonitor","_stopMainTimer","_unbindVideoEvents","_stopVideo","reuseMSE","_reload","stopLoad","_destroyLasMain","getMediaInfo","_initLasMain","_verifyLevel","_bindLasMainEvent","lasMain","stringify","vendor","match","GLOBAL_TAG","FORCE_GLOBAL_TAG","formatter","msg","l","ENABLE_ERROR","ENABLE_WARN","ENABLE_INFO","ENABLE_DEBUG","ENABLE_VERBOSE","LEVEL_WARN","LEVEL_INFO","LEVEL_DEBUG","LEVEL_VERBOSE","out","console","warn"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA,QAAQ,yBAAyB;AACjC;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;AC7bA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mDAAmD,cAAc;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,0DAA0D,cAAc;AACxE;;AAEA;AACA;AACA;AACA,qCAAqC,0BAA0B,EAAE;AACjE,2CAA2C,eAAe;AAC1D;AACA;AACA;;AAEA;AACA,8DAA8D,+DAA+D;;AAE7H;AACA;;AAEA;AACA,kDAAkD,oBAAoB,WAAW;;AAEjF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AA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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Las\"] = factory();\n\telse\n\t\troot[\"Las\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __webpack_require__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __webpack_require__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __webpack_modules__\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:38:33 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:39:19\n * las.js中的错误相关定义\n */\n/**\n * las.js错误类型定义\n */\nexport enum ErrorTypes {\n    // 网络错误\n    NETWORK_ERROR = 'networkError',\n    // video错误\n    MEDIA_ERROR = 'mediaError',\n    // 转封装错误\n    MUX_ERROR = 'muxError',\n    // 其他错误\n    OTHER_ERROR = 'otherError',\n    // MSE错误\n    MSE_ERROR = 'mseError'\n};\n\n/**\n * las.js具体错误定义\n */\nexport enum ErrorDetails {\n    // 网络错误\n    LOAD_ERROR = 10,\n    // 网络超时错误\n    LOAD_ERROR_TIMEOUT = 11,\n    // HTMLMediaElement发生错误\n    VIDEO_ERROR = 101,\n    // 浏览器不支持\n    UNSUPPORTED = 102,\n    // 配置文件错误\n    CONFIG_ERROR = 103,\n    // 传入视频信息错误\n    MANIFEST_ERROR = 104,\n    // 找不到video\n    NO_VIDEO = 105,\n    // mediaSourceError 初始化MSE错误，MediaSource未定义时触发\n    MEDIASOURCE_ERROR = 200,\n    // addSourceBufferError MSE增加SourceBuffer失败\n    ADDSOURCEBUFFER_ERROR = 201,\n    // sourceBufferError MSE的SourceBuffer触发错误\n    SOURCEBUFFER_ERROR = 202,\n    // endOfStreamError MSE结束流错误\n    ENDOFSTREAM_ERROR = 203,\n    // appendBufferError MSE填充buffer错误\n    APPENDBUFFER_ERROR = 204,\n    // 解封装错误\n    DEMUX_ERROR = 301,\n    // 重新封装错误\n    REMUX_ERROR = 302,\n    // 重新封装alloc mdat存储错误\n    REMUX_ALLOC_ERROR = 303,\n};\n\n/**\n * las.js错误事件返回数据定义\n */\nexport type ErrorData = {\n    type: ErrorTypes,\n    details: ErrorDetails,\n    fatal: boolean,\n    info: {\n        reason: string,\n        url?: string,\n        httpStatusCode?: number\n    }\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:38:52 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:41:35\n * las.js事件定义\n */\nconst LasEvents = {\n    // 视频头信息事件，读取到视频头信息时触发\n    MEDIA_INFO: 'mediaInfo',\n    // remux一次MP4 Segment触发一次\n    MP4_SEGMENT: 'mp4Segment',\n    // 读取到flv script tag时触发\n    SCRIPT_PARSED: 'scriptParsed',\n    // http请求正常结束时触发\n    LOAD_END: 'loadEnd',\n    // 错误时触发\n    ERROR: 'lasError',\n    // 清晰度切换失败时触发\n    LEVEL_SWITCH_FAILED: 'levelSwitchFailed',\n    // 清晰度开始切换时触发\n    LEVEL_SWITCHING: 'levelSwitching',\n    // 清晰度切换完成时触发\n    LEVEL_SWITCHED: 'levelSwitched',\n    // manifest解析完成时触发\n    MANIFEST_PARSED: 'manifestParsed',\n    // 读取到flv头时触发\n    FLV_HEAD: 'flvHead',\n    // 通知事件\n    REPORT: 'report',\n    // 心跳事件\n    HEARTBEAT: 'heartbeat',\n};\n\nexport default LasEvents;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:41:25 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:41:25 \n * worker通信定义\n */\nexport enum WorkerCmd {\n    // 初始化worker\n    INIT = 'init',\n    // 收到flv头\n    FLV_HEAD = 'flvHead',\n    // 设置codec\n    SET_CODECS = 'setCodecs',\n    // 清空数据\n    FLUSH = 'flush',\n    // 传入数据\n    APPEND_DATA = 'appendData',\n    // 下载结束\n    LOAD_END = 'loadEnd',\n    // 销毁\n    DESTROY = 'destroy',\n    // 设置扩展数据\n    SET_EXTRA = 'setExtra'\n};","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:05 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 15:28:59\n * 转封装相关类型定义\n */\nexport enum TrackType {\n    video = 'video',\n    audio = 'audio'\n}\n\n/**\n * 音视频描述\n */\nexport type Track = {\n    id: number;\n    type: TrackType;\n    codec: string;\n    defaultCodec?: string;\n    timescale: number;\n    duration: number;\n    samples: Sample[];\n    mp4Samples: MP4Sample[];\n    inputTimescale: number;\n    sequenceNumber: number;\n    sampleDuration: number;\n}\n\n/**\n * 音频数据描述\n */\nexport type AudioTrack = {\n    samples: AudioSample[];\n    mp4Samples: MP4AudioSample[];\n    config: number[];\n    samplerate: number;\n    channelCount: number;\n} & Track;\n\n/**\n * 视频数据描述\n */\nexport type VideoTrack = {\n    samples: VideoSample[];\n    mp4Samples: MP4VideoSample[];\n    width: number;\n    height: number;\n    codecWidth: number;\n    codecHeight: number;\n    sps: Uint8Array[];\n    pps: Uint8Array[];\n    pixelRatio: number[];\n    profile: string;\n    level: string;\n    chromaFormat: string;\n    fps: number;\n} & Track;\n\n/**\n * demux读取的sample描述\n */\nexport type Sample = {\n    pts: number;\n    dts: number;\n    streamDTS: number;\n}\n\n/**\n * demux读取的音频sample描述\n */\nexport type AudioSample = {\n    unit: Uint8Array;\n} & Sample;\n\n/**\n * demux读取的视频sample描述\n */\nexport type VideoSample = {\n    key: boolean;\n    cts: number;\n    units: Uint8Array[];\n} & Sample;\n\n/**\n * 用于生成mp4的sample描述\n */\nexport type MP4Sample = {\n    cts: number,\n    len: number,\n    duration: number,\n    streamDTS: number,\n    flags: {\n        isLeading: number,\n        isDependedOn: number,\n        hasRedundancy: number,\n        degradPrio: number,\n        dependsOn: number,\n        isNonSync: number,\n    }\n};\n\n/**\n * 用于生成mp4的音频sample描述\n */\nexport type MP4AudioSample = {\n    unit: Uint8Array;\n} & MP4Sample;\n\n/**\n * 用于生成mp4的视频sample描述\n */\nexport type MP4VideoSample = {\n    units: Uint8Array[];\n} & MP4Sample;\n\n/**\n * remux后的MP4segment\n */\nexport type MP4Segment = {\n    payload: Uint8Array,\n    startPTS: number,\n    endPTS: number,\n    startDTS: number,\n    endDTS: number,\n    type: TrackType,\n    streamDTS: number\n};\n\n/**\n * remux结果\n */\nexport type MP4RemuxResult = {\n    segments: MP4Segment[],\n    extra: any;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:43:15 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:43:56\n * aac工具，获取aac控制，计算frame长度\n */\nexport const AAC_SAMPLE_DURATION = 1024;\n\nconst AAC_SILENT_FRAME_DATA: Record<string, Record<number, Uint8Array>> = {\n    'mp4a.40.2': {\n        1: new Uint8Array([0, 200, 0, 128, 35, 128]),\n        2: new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]),\n        3: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]),\n        4: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]),\n        5: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]),\n        6: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]),\n    },\n    'mp4a.40.5': {\n        1: new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n        2: new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n        3: new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n    }\n}\n\n\n/**\n * 计算单帧aac长度 ms\n * @param samplerate 音频samplerate\n */\nexport function getAACFrameDuration(samplerate: number): number {\n    return AAC_SAMPLE_DURATION * 1000 / samplerate;\n}\n\n/**\n * 获取静音音频数据\n * @param audioCodec 音频codec\n * @param channelCount 声道数量\n */\nexport function getAACSilentFrame(audioCodec: string, channelCount: number): Uint8Array | undefined {\n    if (!AAC_SILENT_FRAME_DATA[audioCodec]) {\n        audioCodec = 'mp4a.40.5';\n    }\n    return AAC_SILENT_FRAME_DATA[audioCodec][channelCount];\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:47 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:48:11\n * 生成fragmented mp4\n */\nimport { AudioTrack, Track, TrackType, VideoTrack } from '../types/remux';\nconst UINT32_MAX = Math.pow(2, 32) - 1;\nconst BOX_HEAD_LEN = 8;\n\ntype DestData = {\n    data: Uint8Array;\n    offset: number;\n}\n\nconst HDLR: Record<string, Uint8Array> = {\n    video: new Uint8Array([\n        0, 0, 0, 45,\n        104, 100, 108, 114,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        118, 105, 100, 101,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        86, 105, 100, 101,\n        111, 72, 97, 110,\n        100, 108, 101, 114,\n        0\n    ]),\n    audio: new Uint8Array([\n        0, 0, 0, 45,\n        104, 100, 108, 114,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        115, 111, 117, 110,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        83, 111, 117, 110,\n        100, 72, 97, 110,\n        100, 108, 101, 114,\n        0\n    ])\n};\nconst FTYP = new Uint8Array([\n    0, 0, 0, 24,\n    102, 116, 121, 112,\n    105, 115, 111, 109,\n    0, 0, 0, 1,\n    105, 115, 111, 109,\n    97, 118, 99, 49\n]);\n\nconst STTS = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 116, 115,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\nconst STSC = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 115, 99,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\nconst STCO = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 99, 111,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst STSZ = new Uint8Array([\n    0, 0, 0, 20,\n    115, 116, 115, 122,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst DINF = new Uint8Array([\n    0, 0, 0, 36,\n    100, 105, 110, 102,\n    0, 0, 0, 28,\n    100, 114, 101, 102,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 12,\n    117, 114, 108, 32,\n    0, 0, 0, 1\n]);\n\nconst VMHD = new Uint8Array([\n    0, 0, 0, 20,\n    118, 109, 104, 100,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst SMHD = new Uint8Array([\n    0, 0, 0, 16,\n    115, 109, 104, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst BTRT = new Uint8Array([\n    0, 0, 0, 20,\n    98, 116, 114, 116,\n    0, 28, 156, 128,\n    0, 45, 198, 192,\n    0, 45, 198, 192\n]);\n\nconst MVHD_TPL = new Uint8Array([\n    0, 0, 0, 120,\n    109, 118, 104, 100,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    64, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    255, 255, 255, 255\n]);\n\nconst TKHD_TPL = new Uint8Array([\n    0, 0, 0, 104,\n    116, 107, 104, 100,\n    1, 0, 0, 7,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    64, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst TREX_TPL = new Uint8Array([\n    0, 0, 0, 32,\n    116, 114, 101, 120,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 1\n]);\nconst MDHD_TPL = new Uint8Array([\n    0, 0, 0, 44,\n    109, 100, 104, 100,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 172, 68,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    85, 196, 0, 0\n]);\n\nconst MP4A_STSD_TPL = new Uint8Array([\n    0, 0, 0, 93,\n    115, 116, 115, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 77,\n    109, 112, 52, 97,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 2, 0, 16,\n    0, 0, 0, 0,\n    172, 68, 0, 0,\n    0, 0, 0, 41,\n    101, 115, 100, 115,\n    0, 0, 0, 0,\n    3, 27, 0, 1,\n    0, 4, 19, 64,\n    21, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    5\n]);\n\nconst AVC1_STSD_TPL = new Uint8Array([\n    0, 0, 0, 185,\n    115, 116, 115, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 169,\n    97, 118, 99, 49,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    5, 0, 2, 208,\n    0, 72, 0, 0,\n    0, 72, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 18, 100,\n    97, 105, 108, 121,\n    109, 111, 116, 105,\n    111, 110, 47, 104,\n    108, 115, 46, 106,\n    115, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 24,\n    17, 17\n])\n\nconst PASP_TPL = new Uint8Array([\n    0, 0, 0, 16,\n    112, 97, 115, 112,\n    0, 0, 0, 1,\n    0, 0, 0, 1\n]);\n\nclass MP4 {\n    static types: Record<string, number[]> = {\n        'avc1': [97, 118, 99, 49],\n        'avcC': [97, 118, 99, 67],\n        'btrt': [98, 116, 114, 116],\n        'dinf': [100, 105, 110, 102],\n        'dref': [100, 114, 101, 102],\n        'esds': [101, 115, 100, 115],\n        'ftyp': [102, 116, 121, 112],\n        'hdlr': [104, 100, 108, 114],\n        'mdat': [109, 100, 97, 116],\n        'mdhd': [109, 100, 104, 100],\n        'mdia': [109, 100, 105, 97],\n        'mfhd': [109, 102, 104, 100],\n        'minf': [109, 105, 110, 102],\n        'moof': [109, 111, 111, 102],\n        'moov': [109, 111, 111, 118],\n        'mp4a': [109, 112, 52, 97],\n        'mvex': [109, 118, 101, 120],\n        'mvhd': [109, 118, 104, 100],\n        'pasp': [112, 97, 115, 112],\n        'sdtp': [115, 100, 116, 112],\n        'stbl': [115, 116, 98, 108],\n        'stco': [115, 116, 99, 111],\n        'stsc': [115, 116, 115, 99],\n        'stsd': [115, 116, 115, 100],\n        'stsz': [115, 116, 115, 122],\n        'stts': [115, 116, 116, 115],\n        'tfdt': [116, 102, 100, 116],\n        'tfhd': [116, 102, 104, 100],\n        'traf': [116, 114, 97, 102],\n        'trak': [116, 114, 97, 107],\n        'trun': [116, 114, 117, 110],\n        'trex': [116, 114, 101, 120],\n        'tkhd': [116, 107, 104, 100],\n        'vmhd': [118, 109, 104, 100],\n        'smhd': [115, 109, 104, 100]\n    };\n\n    /**\n     * 获取当前音视频的moov\n     * @param tracks 音视频描述数据\n     */\n    public static moov<T extends Track>(tracks: T[]): Uint8Array {\n        // 建立空moov\n        const len = FTYP.byteLength + MP4._getMoovLen(tracks);\n        const dest = { data: new Uint8Array(len), offset: 0 };\n        // 写入\n        dest.data.set(FTYP, 0);\n        dest.offset += FTYP.byteLength;\n        MP4._writeMoov(dest, tracks);\n        return dest.data;\n    }\n\n    /**\n     * 获取当前视频的segment数据\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 视频数据\n     * @param moov moov box数据\n     */\n    public static videoMediaSegment(sn: number, baseMediaDecodeTime: number, track: Track, moov?: Uint8Array): Uint8Array {\n        // 计算mdat长度\n        let mdatLen = 8 + (<VideoTrack>track).mp4Samples.reduce((prev, item) => {\n            return prev + item.units.reduce((unitLen, unit) => {\n                return unitLen + unit.byteLength + 4;\n            }, 0);\n        }, 0);\n        let d = MP4._getMediaSegmentData(track, mdatLen, moov);\n        MP4._mediaSegmentHead(d, sn, baseMediaDecodeTime, track, mdatLen, moov);\n        (<VideoTrack>track).samples.forEach(sample => {\n            sample.units.forEach(unitData => {\n                const unitDataLen = unitData.byteLength;\n                d.data[d.offset] = unitDataLen >> 24 & 0xff;\n                d.data[d.offset + 1] = unitDataLen >> 16 & 0xff;\n                d.data[d.offset + 2] = unitDataLen >> 8 & 0xff;\n                d.data[d.offset + 3] = unitDataLen & 0xff;\n                d.data.set(unitData, d.offset + 4);\n                d.offset += 4 + unitDataLen;\n            });\n            delete sample.units;\n        });\n        return d.data;\n    }\n\n    /**\n     * 获取当前音频的segment数据\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音频数据\n     * @param moov moov\n     */\n    public static audioMediaSegment(sn: number, baseMediaDecodeTime: number, track: Track, moov?: Uint8Array): Uint8Array {\n        let mdatLen = 8 + (<AudioTrack>track).mp4Samples.reduce((prev, item) => {\n            return prev + item.unit.byteLength;\n        }, 0);\n        let d = MP4._getMediaSegmentData(track, mdatLen, moov);\n        MP4._mediaSegmentHead(d, sn, baseMediaDecodeTime, track, mdatLen, moov);\n\n        (<AudioTrack>track).mp4Samples.forEach(sample => {\n            d.data.set(sample.unit, d.offset);\n            d.offset += sample.unit.byteLength;\n            delete sample.unit;\n        });\n        return d.data;\n    }\n\n    /**\n     * 计算moov头的长度\n     * @param tracks 音视频轨数据\n     */\n    private static _getMoovLen(tracks: Track[]): number {\n        const trakLen = tracks.reduce((prev, item) => {\n            return prev + MP4._getTrakLen(item)\n        }, 0);\n        return BOX_HEAD_LEN + MVHD_TPL.byteLength + trakLen + MP4._getMvexLen(tracks);\n    }\n\n    /**\n     * 向目标数据写入moov\n     * @param dest 写入目标\n     * @param tracks 音视频轨数据\n     */\n    private static _writeMoov(dest: DestData, tracks: Track[]): void {\n        let moovLen = MP4._getMoovLen(tracks);\n        MP4._writeBoxHead(dest, MP4.types.moov, moovLen);\n        MP4._writeMvhd(dest, tracks[0].timescale, tracks[0].duration);\n        tracks.forEach(item => {\n            MP4._writeTrak(dest, item);\n        });\n        MP4._writeMvex(dest, tracks);\n    }\n\n    /**\n     * 计算moof box长度\n     * @param sampleCount sample数量\n     */\n    private static _getMoofLen(sampleCount: number): number {\n        return 100 + 17 * sampleCount;\n    }\n\n    /**\n     * 处理mp4 segment头部数据，主要是moof\n     * @param dest 写入目标\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音视频描述数据\n     * @param mdatLen mdatLen\n     * @param initSegment moov头\n     */\n    private static _mediaSegmentHead(dest: DestData, sn: number, baseMediaDecodeTime: number, track: Track, mdatLen: number, initSegment?: Uint8Array): void {\n        if (initSegment) {\n            dest.data.set(initSegment);\n            dest.offset = initSegment.byteLength;\n        }\n        MP4._writeMoof(dest, sn, baseMediaDecodeTime, track);\n\n        MP4._writeBoxHead(dest, MP4.types.mdat, mdatLen);\n    }\n\n    /**\n     * 生成一个数据块用于承载mp4Segment数据\n     * @param track 音视频描述数据\n     * @param mdatLen mdat长度\n     * @param moov moov\n     */\n    private static _getMediaSegmentData(track: Track, mdatLen: number, moov?: Uint8Array): DestData {\n        let moofLen = MP4._getMoofLen(track.mp4Samples.length);\n        return { data: new Uint8Array(moofLen + mdatLen + (moov ? moov.byteLength : 0)), offset: 0 };\n    }\n\n    /**\n     * 向目标数据写入mvhd\n     * @param dest 写入目标\n     * @param timescale timescale\n     * @param duration duration\n     */\n    private static _writeMvhd(dest: DestData, timescale: number, duration: number): void {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        const mvhd = MVHD_TPL;\n        mvhd[28] = timescale >> 24 & 0xff;\n        mvhd[29] = timescale >> 16 & 0xff;\n        mvhd[30] = timescale >> 8 & 0xff;\n        mvhd[31] = timescale & 0xff;\n        mvhd[32] = upperWordDuration >> 24;\n        mvhd[33] = upperWordDuration >> 16 & 0xff;\n        mvhd[34] = upperWordDuration >> 8 & 0xff;\n        mvhd[35] = upperWordDuration & 0xff;\n        mvhd[36] = lowerWordDuration >> 24;\n        mvhd[37] = lowerWordDuration >> 16 & 0xff;\n        mvhd[38] = lowerWordDuration >> 8 & 0xff;\n        mvhd[39] = lowerWordDuration & 0xff;\n        dest.data.set(mvhd, dest.offset);\n        dest.offset += MVHD_TPL.byteLength;\n    }\n\n    /**\n     * 向目标数据写入tkhd\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTkhd(dest: DestData, track: AudioTrack & VideoTrack): void {\n        const id = track.id,\n            duration = track.duration * track.timescale,\n            upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),\n            lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        let width = 0,\n            height = 0;\n        if (track.hasOwnProperty('width')) {\n            width = track.width;\n        }\n        if (track.hasOwnProperty('height')) {\n            height = track.height;\n        }\n        const tkhd = TKHD_TPL;\n        tkhd[28] = id >> 24 & 0xff;\n        tkhd[29] = id >> 16 & 0xff;\n        tkhd[30] = id >> 8 & 0xff;\n        tkhd[31] = id & 0xff;\n        tkhd[36] = upperWordDuration >> 24;\n        tkhd[37] = upperWordDuration >> 16 & 0xff;\n        tkhd[38] = upperWordDuration >> 8 & 0xff;\n        tkhd[39] = upperWordDuration & 0xff;\n        tkhd[40] = lowerWordDuration >> 24;\n        tkhd[41] = lowerWordDuration >> 16 & 0xff;\n        tkhd[42] = lowerWordDuration >> 8 & 0xff;\n        tkhd[43] = lowerWordDuration & 0xff;\n        tkhd[96] = width >> 8 & 0xff;\n        tkhd[97] = width & 0xff;\n        tkhd[100] = height >> 8 & 0xff;\n        tkhd[101] = height & 0xff;\n\n        dest.data.set(tkhd, dest.offset);\n        dest.offset += TKHD_TPL.byteLength;\n    }\n\n    /**\n     * 计算trak box长度\n     * @param track 音视频描述数据\n     */\n    private static _getTrakLen(track: Track): number {\n        return BOX_HEAD_LEN + TKHD_TPL.byteLength + MP4._getMdiaLen(track);\n    }\n\n    /**\n     * 向目标数据写入trak\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTrak(dest: DestData, track: Track): void {\n        const trakLen = MP4._getTrakLen(track);\n        this._writeBoxHead(dest, MP4.types.trak, trakLen);\n        this._writeTkhd(dest, <AudioTrack & VideoTrack>track);\n        this._writeMdia(dest, track);\n    }\n\n    /**\n     * 计算mdia长度\n     * @param track 音视频描述数据\n     */\n    private static _getMdiaLen(track: Track): number {\n        return BOX_HEAD_LEN + MDHD_TPL.byteLength + HDLR[track.type].byteLength + MP4._getMinfLen(track);\n    }\n\n    /**\n     * 向目标数据写入mdia\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMdia(dest: DestData, track: Track): void {\n        const mdiaLen = MP4._getMdiaLen(track);\n        this._writeBoxHead(dest, MP4.types.mdia, mdiaLen);\n        this._writeMdhd(dest, track.timescale, track.duration);\n        dest.data.set(HDLR[track.type], dest.offset);\n        dest.offset += HDLR[track.type].byteLength;\n        this._writeMinf(dest, track);\n    }\n\n    /**\n     * 向目标数据写入mdhd\n     * @param dest 写入目标\n     * @param timescale timescale\n     * @param duration duration\n     */\n    private static _writeMdhd(dest: DestData, timescale: number, duration: number): void {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        const mdhd = MDHD_TPL;\n        mdhd[28] = timescale >> 24 & 0xff;\n        mdhd[29] = timescale >> 16 & 0xff;\n        mdhd[30] = timescale >> 8 & 0xff;\n        mdhd[31] = timescale & 0xff; // timescale\n        mdhd[32] = upperWordDuration >> 24;\n        mdhd[33] = upperWordDuration >> 16 & 0xff;\n        mdhd[34] = upperWordDuration >> 8 & 0xff;\n        mdhd[35] = upperWordDuration & 0xff;\n        mdhd[36] = lowerWordDuration >> 24;\n        mdhd[37] = lowerWordDuration >> 16 & 0xff;\n        mdhd[38] = lowerWordDuration >> 8 & 0xff;\n        mdhd[39] = lowerWordDuration & 0xff;\n        dest.data.set(mdhd, dest.offset);\n        dest.offset += mdhd.byteLength;\n    }\n\n    /**\n     * 计算minf长度\n     * @param track 音视频描述数据\n     */\n    private static _getMinfLen(track: Track): number {\n        if (track.type === TrackType.audio) {\n            return BOX_HEAD_LEN + SMHD.byteLength + DINF.byteLength + MP4._getStblLen(track);\n        }\n        return BOX_HEAD_LEN + VMHD.byteLength + DINF.byteLength + MP4._getStblLen(track);\n    }\n\n    /**\n     * 向目标数据写入minf\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMinf(dest: DestData, track: Track) {\n        this._writeBoxHead(dest, MP4.types.minf, MP4._getMinfLen(track));\n        if (track.type === 'audio') {\n            dest.data.set(SMHD, dest.offset);\n            dest.offset += SMHD.byteLength;\n            dest.data.set(DINF, dest.offset);\n            dest.offset += DINF.byteLength;\n            this._writeStbl(dest, track);\n            return;\n        }\n        dest.data.set(VMHD, dest.offset);\n        dest.offset += VMHD.byteLength;\n        dest.data.set(DINF, dest.offset);\n        dest.offset += DINF.byteLength;\n        this._writeStbl(dest, track);\n        return;\n    }\n\n    /**\n     * 计算stbl长度\n     * @param track 音视频描述数据\n     */\n    private static _getStblLen(track: Track): number {\n        return BOX_HEAD_LEN + this._getStsdLen(track) + STTS.byteLength + STSC.byteLength + STSZ.byteLength + STCO.byteLength;\n    }\n\n    /**\n     * 向目标数据写入stbl\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeStbl(dest: DestData, track: Track): void {\n        let stblLen = this._getStblLen(track);\n        this._writeBoxHead(dest, MP4.types.stbl, stblLen);\n        this._writeStsd(dest, track);\n        dest.data.set(STTS, dest.offset);\n        dest.offset += STTS.byteLength;\n        dest.data.set(STSC, dest.offset);\n        dest.offset += STSC.byteLength;\n        dest.data.set(STSZ, dest.offset);\n        dest.offset += STSZ.byteLength;\n        dest.data.set(STCO, dest.offset);\n        dest.offset += STCO.byteLength;\n    }\n\n    /**\n     * 计算stsd长度\n     * @param track 音视频描述数据\n     */\n    private static _getStsdLen(track: Track): number {\n        if (track.type === TrackType.audio) {\n            return MP4._getMp4aStsdLen(<AudioTrack>track);\n        } else {\n            return MP4._getAvc1StsdLen(<VideoTrack>track);\n        }\n    }\n\n    /**\n     * 向目标数据写入stsd\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeStsd(dest: DestData, track: Track): void {\n        if (track.type === TrackType.audio) {\n            this._writeMp4aStsd(dest, <AudioTrack>track);\n            return;\n        }\n        this._writeAvc1Stsd(dest, <VideoTrack>track);\n    }\n\n    /**\n     * 计算avcC长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvcCLen(track: VideoTrack): number {\n        const spsLen = track.sps.reduce((prev, item) => {\n            return prev + item.byteLength + 2;\n        }, 0);\n        const ppsLen = track.pps.reduce((prev, item) => {\n            return prev + item.byteLength + 2;\n        }, 0);\n        // 8 + 5 + sps + 1 + pps\n        return 15 + spsLen + ppsLen;\n    }\n\n    /**\n     * 计算avc1长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvc1Len(track: VideoTrack): number {\n        // avc1 + avcc + btrt + pasp\n        return 86 + MP4._getAvcCLen(track) + 20 + 16;\n    }\n\n    /**\n     * 计算stsd + avc1长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvc1StsdLen(track: VideoTrack): number {\n        // stsd + avc1\n        return 16 + this._getAvc1Len(track);\n    }\n\n    /**\n     * 向目标数据写入stsd(avc1)\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeAvc1Stsd(dest: DestData, track: VideoTrack): void {\n        let sps: number[] = [],\n            pps: number[] = [],\n            i,\n            data,\n            len;\n\n        for (i = 0; i < track.sps.length; i++) {\n            data = track.sps[i];\n            len = data.byteLength;\n            sps.push(len >>> 8 & 0xff);\n            sps.push(len & 0xff);\n            sps = sps.concat(Array.prototype.slice.call(data));\n        }\n\n        for (i = 0; i < track.pps.length; i++) {\n            data = track.pps[i];\n            len = data.byteLength;\n            pps.push(len >>> 8 & 0xff);\n            pps.push(len & 0xff);\n            pps = pps.concat(Array.prototype.slice.call(data));\n        }\n        const avcCLen = this._getAvcCLen(track);\n        const avc1Len = this._getAvc1Len(track);\n        const stsdLen = this._getAvc1StsdLen(track);\n        const avc1Stsd = AVC1_STSD_TPL;\n        let width = track.width,\n            height = track.height,\n            hSpacing = track.pixelRatio[0],\n            vSpacing = track.pixelRatio[1];\n\n        avc1Stsd[0] = stsdLen >> 24 & 0xff;\n        avc1Stsd[1] = stsdLen >> 16 & 0xff;\n        avc1Stsd[2] = stsdLen >> 8 & 0xff;\n        avc1Stsd[3] = stsdLen & 0xff;\n\n        avc1Stsd[16] = avc1Len >> 24 & 0xff;\n        avc1Stsd[17] = avc1Len >> 16 & 0xff;\n        avc1Stsd[18] = avc1Len >> 8 & 0xff;\n        avc1Stsd[19] = avc1Len & 0xff;\n\n        avc1Stsd[48] = width >> 8 & 0xff;\n        avc1Stsd[49] = width & 0xff; // width\n        avc1Stsd[50] = height >> 8 & 0xff;\n        avc1Stsd[51] = height & 0xff; // height\n        dest.data.set(avc1Stsd, dest.offset);\n        dest.offset += avc1Stsd.byteLength;\n\n        this._writeBoxHead(dest, MP4.types.avcC, avcCLen);\n\n        const avcc = [\n            0x01, sps[3], sps[4], sps[5],\n            0xfc | 3, 0xe0 | track.sps.length\n        ]\n            .concat(sps)\n            .concat([\n                track.pps.length\n            ])\n            .concat(pps);\n        dest.data.set(avcc, dest.offset);\n        dest.offset += avcc.length;\n\n        dest.data.set(BTRT, dest.offset);\n        dest.offset += BTRT.byteLength;\n\n        const pasp = PASP_TPL;\n        pasp[8] = hSpacing >> 24; // hSpacing\n        pasp[9] = hSpacing >> 16 & 0xff;\n        pasp[10] = hSpacing >> 8 & 0xff;\n        pasp[11] = hSpacing & 0xff;\n        pasp[12] = vSpacing >> 24; // vSpacing\n        pasp[13] = vSpacing >> 16 & 0xff;\n        pasp[14] = vSpacing >> 8 & 0xff;\n        pasp[15] = vSpacing & 0xff;\n        dest.data.set(pasp, dest.offset);\n        dest.offset += pasp.byteLength;\n    }\n\n    /**\n     * 计算mp4 esds长度\n     * @param track 音视频描述数据\n     */\n    private static _getMp4aEsdsLen(track: AudioTrack): number {\n        const configLen = track.config.length;\n        return BOX_HEAD_LEN + 25 + configLen + 4;\n    }\n\n    /**\n     * 计算stsd + mp4a + esds长度\n     * @param track 音视频描述数据\n     */\n    private static _getMp4aStsdLen(track: AudioTrack): number {\n        // stsd + mp4a + esds\n        return 16 + 36 + MP4._getMp4aEsdsLen(track);\n    }\n\n    /**\n     * 向目标数据写入stsd(mp4a)\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMp4aStsd(dest: DestData, track: AudioTrack): void {\n        const configLen = track.config.length;\n        const esdsLen = MP4._getMp4aEsdsLen(track);\n        const stsdLen = MP4._getMp4aStsdLen(track);\n        const mp4aLen = stsdLen - 16;\n\n        const mp4a = MP4A_STSD_TPL;\n        mp4a[0] = stsdLen >> 24 & 0xff;\n        mp4a[1] = stsdLen >> 16 & 0xff;\n        mp4a[2] = stsdLen >> 8 & 0xff;\n        mp4a[3] = stsdLen & 0xff;\n\n        mp4a[16] = mp4aLen >> 24 & 0xff;\n        mp4a[17] = mp4aLen >> 16 & 0xff;\n        mp4a[18] = mp4aLen >> 8 & 0xff;\n        mp4a[19] = mp4aLen & 0xff;\n\n        mp4a[41] = track.channelCount;\n        mp4a[48] = track.samplerate >> 8 & 0xff;\n        mp4a[49] = track.samplerate & 0xff;\n\n        mp4a[52] = esdsLen >> 24 & 0xff;\n        mp4a[53] = esdsLen >> 16 & 0xff;\n        mp4a[54] = esdsLen >> 8 & 0xff;\n        mp4a[55] = esdsLen & 0xff;\n\n        mp4a[65] = 23 + configLen;\n        mp4a[70] = 15 + configLen;\n\n        dest.data.set(mp4a, dest.offset);\n        dest.offset += mp4a.byteLength;\n        let tmp = [configLen].concat(track.config).concat([0x06, 0x01, 0x02]);\n        dest.data.set(tmp, dest.offset);\n        dest.offset += tmp.length;\n    }\n\n    /**\n     * 计算mvex长度\n     * @param tracks 音视频描述数据\n     */\n    private static _getMvexLen(tracks: Track[]): number {\n        return BOX_HEAD_LEN + tracks.length * TREX_TPL.byteLength;\n    }\n\n    /**\n     * 向目标数据写入mvex\n     * @param dest 写入目标\n     * @param tracks 音视频描述数据\n     */\n    private static _writeMvex(dest: DestData, tracks: Track[]): void {\n        let mvexLen = MP4._getMvexLen(tracks);\n        this._writeBoxHead(dest, MP4.types.mvex, mvexLen);\n        tracks.forEach(item => {\n            MP4._writeTrex(dest, item);\n        })\n    }\n\n    /**\n     * 向目标数据写入trex\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTrex(dest: DestData, track: Track): void {\n        const id = track.id;\n        const trex = TREX_TPL;\n        trex[12] = id >> 24;\n        trex[13] = id >> 16 & 0xff;\n        trex[14] = id >> 8 & 0xff;\n        trex[15] = id & 0xff; // track_ID\n        dest.data.set(trex, dest.offset);\n        dest.offset += trex.byteLength;\n    }\n\n    /**\n     * 写入moof头\n     * @param dest 写入目标\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音视频描述数据\n     * @param mdatLen mdat box 长度\n     */\n    private static _writeMoof(dest: DestData, sn: number, baseMediaDecodeTime: number, track: Track): void {\n        // mooflen = 8 + mfhd(8 + 8 ) + traf(8 + tfhd(8 + 8) + tfdt(8 + 12) + trun(8 + 12 + 16 * sample.len) + sdtp(8 + 4 + sample.len)) = 100 + 17 * track.samples.length;\n        // trunOffset = moof + mdat header\n        let len = track.mp4Samples.length,\n            moofLen = MP4._getMoofLen(len),\n            trafLen = moofLen - 24,\n            sdtpLen = 12 + len,\n            trunLen = 20 + 16 * len,\n            trunOffset = moofLen + 8,\n            id = track.id,\n            samples = track.mp4Samples || [],\n            upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),\n            lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n\n        // moof\n        MP4._writeBoxHead(dest, MP4.types.moof, moofLen);\n\n        // mfhd\n        MP4._writeBoxHead(dest, MP4.types.mfhd, 16);\n        dest.data[dest.offset + 4] = sn >> 24;\n        dest.data[dest.offset + 5] = sn >> 16 & 0xff;\n        dest.data[dest.offset + 6] = sn >> 8 & 0xff;\n        dest.data[dest.offset + 7] = sn & 0xff;\n        dest.offset += 8;\n\n        // traf\n        MP4._writeBoxHead(dest, MP4.types.traf, trafLen);\n\n        // tfhd\n        MP4._writeBoxHead(dest, MP4.types.tfhd, 16);\n        dest.data[dest.offset + 4] = id >> 24;\n        dest.data[dest.offset + 5] = id >> 16 & 0xff;\n        dest.data[dest.offset + 6] = id >> 8 & 0xff;\n        dest.data[dest.offset + 7] = id & 0xff;\n        dest.offset += 8;\n\n        // tfdt\n        MP4._writeBoxHead(dest, MP4.types.tfdt, 20);\n        dest.data[dest.offset] = 1;\n        dest.data[dest.offset + 4] = upperWordBaseMediaDecodeTime >> 24;\n        dest.data[dest.offset + 5] = upperWordBaseMediaDecodeTime >> 16 & 0xff;\n        dest.data[dest.offset + 6] = upperWordBaseMediaDecodeTime >> 8 & 0xff;\n        dest.data[dest.offset + 7] = upperWordBaseMediaDecodeTime & 0xff;\n        dest.data[dest.offset + 8] = lowerWordBaseMediaDecodeTime >> 24;\n        dest.data[dest.offset + 9] = lowerWordBaseMediaDecodeTime >> 16 & 0xff;\n        dest.data[dest.offset + 10] = lowerWordBaseMediaDecodeTime >> 8 & 0xff;\n        dest.data[dest.offset + 11] = lowerWordBaseMediaDecodeTime & 0xff;\n        dest.offset += 12;\n\n        // sdtp\n        MP4._writeBoxHead(dest, MP4.types.sdtp, sdtpLen);\n        dest.offset += 4;\n        samples.forEach((sample, index) => {\n            let flags = sample.flags;\n            dest.data[dest.offset + index] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n        });\n        dest.offset += len;\n\n        // trun\n        MP4._writeBoxHead(dest, MP4.types.trun, trunLen);\n        dest.data[dest.offset + 2] = 15;\n        dest.data[dest.offset + 3] = 1;\n        dest.data[dest.offset + 4] = len >>> 24 & 0xff;\n        dest.data[dest.offset + 5] = len >>> 16 & 0xff;\n        dest.data[dest.offset + 6] = len >>> 8 & 0xff;\n        dest.data[dest.offset + 7] = len & 0xff;\n        dest.data[dest.offset + 8] = trunOffset >>> 24 & 0xff;\n        dest.data[dest.offset + 9] = trunOffset >>> 16 & 0xff;\n        dest.data[dest.offset + 10] = trunOffset >>> 8 & 0xff;\n        dest.data[dest.offset + 11] = trunOffset & 0xff;\n        dest.offset += 12;\n        samples.forEach((sample, index) => {\n            dest.data.set([\n                sample.duration >>> 24 & 0xff,\n                sample.duration >>> 16 & 0xff,\n                sample.duration >>> 8 & 0xff,\n                sample.duration & 0xff, // sample_duration\n                sample.len >>> 24 & 0xff,\n                sample.len >>> 16 & 0xff,\n                sample.len >>> 8 & 0xff,\n                sample.len & 0xff, // sample_len\n                sample.flags.isLeading << 2 | sample.flags.dependsOn,\n                sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.isNonSync,\n                sample.flags.degradPrio & 0xf0 << 8,\n                sample.flags.degradPrio & 0x0f, // sample_flags\n                sample.cts >>> 24 & 0xff,\n                sample.cts >>> 16 & 0xff,\n                sample.cts >>> 8 & 0xff,\n                sample.cts & 0xff // sample_composition_time_offset\n            ], dest.offset + 16 * index\n            );\n        });\n        dest.offset += len * 16;\n    }\n\n    /**\n     * 写入box头\n     * @param dest 写入目标\n     * @param type box type\n     * @param len box len\n     */\n    private static _writeBoxHead(dest: DestData, type: number[], len: number): void {\n        dest.data[dest.offset] = len >> 24 & 0xff;\n        dest.data[dest.offset + 1] = len >> 16 & 0xff;\n        dest.data[dest.offset + 2] = len >> 8 & 0xff;\n        dest.data[dest.offset + 3] = len & 0xff;\n        dest.data.set(type, dest.offset + 4);\n        dest.offset += 8;\n    }\n}\n\nexport default MP4;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:48:19 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 15:24:01\n * 整理音视频数据用于生成fragmented mp4\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../core/errors';\nimport LasEvents from '../core/events';\nimport { LasMainConfig } from '../types/core';\nimport { AudioSample, AudioTrack, MP4AudioSample, MP4VideoSample, TrackType, VideoSample, VideoTrack, MP4Segment } from '../types/remux';\nimport { AAC_SAMPLE_DURATION, getAACFrameDuration, getAACSilentFrame } from '../utils/aac-helper';\nimport { Log } from '../utils/log';\nimport MP4 from './mp4-generator';\n\n// 100 seconds\nconst MAX_FILL_FRAME_DURATION = 100 * 1000;\n\nconst DEFAULT_VIDEO_SAMPLE_DURATION = 40;\n\ntype VideoTimeReferenceInfo = { track: VideoTrack; sample?: VideoSample };\n\nclass MP4Remuxer {\n    private tag = 'MP4Remuxer';\n    private _eventEmitter: EventEmitter;\n    private _forceFirstIDR: boolean;\n    private _videoTimeReference: boolean;\n    private _videoTimeReferenceInfo: VideoTimeReferenceInfo;\n    private _extra: any;\n\n    private _nextAudioPTS?: number;\n    private _nextVideoDTS?: number;\n    private _initPTS?: number;\n    private _videoLastPTS: number = 0;\n    private _audioLastPTS: number = 0;\n    private _videoSampleDuration: number = DEFAULT_VIDEO_SAMPLE_DURATION;\n    private _moovs?: Partial<Record<TrackType, Uint8Array>>;\n\n    constructor(eventEmitter: EventEmitter, config: LasMainConfig) {\n        this._eventEmitter = eventEmitter;\n        this._videoTimeReference = !config.gopRemux;\n        // 计算平均sampleDuration\n        this._videoTimeReferenceInfo = <VideoTimeReferenceInfo>{};\n        this._forceFirstIDR = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;\n    }\n\n    public resetMoov(): void {\n        this._moovs = undefined;\n        this._clearVideoTimeReference();\n    }\n\n    public setExtra(data: any) {\n        this._extra = data;\n    }\n\n    public resetTimeStamp() {\n        this._initPTS = undefined;\n        this._audioLastPTS = this._videoLastPTS = 0;\n    }\n\n    public getLastPTS() {\n        return { video: this._videoLastPTS, audio: this._audioLastPTS };\n    }\n\n    public flush() {\n        let videoData;\n        const info = this._videoTimeReferenceInfo;\n        if (this._videoTimeReference && info.sample) {\n            info.track.samples = [info.sample];\n            info.track.sequenceNumber++;\n            info.sample = undefined;\n            videoData = this._remuxVideo(info.track, true, false);\n        }\n        this._clearVideoTimeReference();\n        return videoData;\n    }\n\n    public remux(audioTrack: AudioTrack, videoTrack: VideoTrack, timeOffset: number, isContinuous: boolean, isFlush: boolean = false) {\n        if (!this._moovs) {\n            this._initMP4(audioTrack, videoTrack, timeOffset);\n        }\n        if (this._moovs) {\n            let audioData: MP4Segment | undefined;\n            let videoData: MP4Segment | undefined;\n            if (audioTrack.samples.length && videoTrack.samples.length) {\n                if (!isContinuous) {\n                    // 起始位置音视频不对齐，音频开始时间小于视频开始时间，填帧\n                    if (audioTrack.samples[0].pts < videoTrack.samples[0].pts) {\n                        const sample = Object.assign({}, videoTrack.samples[0]);\n                        sample.dts = sample.pts = audioTrack.samples[0].pts;\n                        videoTrack.samples.unshift(sample);\n                    }\n                }\n            }\n\n            // 兼容safari\n            if (!isContinuous && videoTrack.samples.length) {\n                videoTrack.samples[0].pts = videoTrack.samples[0].dts;\n            }\n\n            audioData = this._remuxAudio(audioTrack, isContinuous);\n            videoData = this._remuxVideo(videoTrack, isContinuous, !isFlush);\n            if (!videoData && isFlush && this._videoTimeReferenceInfo.sample) {\n                videoData = this.flush();\n            }\n\n            if (videoData && !audioData && audioTrack.codec) {\n                audioData = this._fillEmptyAudio(audioTrack, isContinuous, videoData.startPTS, videoData.endPTS, videoData.streamDTS);\n            }\n\n            const segments = [];\n            if (audioData) {\n                segments.push(audioData);\n            }\n            if (videoData) {\n                segments.push(videoData);\n            }\n            if (segments.length) {\n                this._eventEmitter.emit(LasEvents.MP4_SEGMENT, { segments, extra: this._extra });\n            }\n        }\n    }\n\n    /**\n     * 初始化mp4，生成moov，获取mediainfo\n     * @param audioTrack 音频track\n     * @param videoTrack 视频track\n     * @param timeOffset 时间偏移量\n     */\n    private _initMP4(audioTrack: AudioTrack, videoTrack: VideoTrack, timeOffset: number): void {\n        const eventEmitter = this._eventEmitter,\n            audioSamples = audioTrack.samples,\n            videoSamples = videoTrack.samples,\n            mediaInfo: any = {},\n            moovs: Partial<Record<TrackType, Uint8Array>> = {};\n        let initPTS;\n\n        if (audioTrack.config && audioSamples.length) {\n            audioTrack.timescale = audioTrack.samplerate;\n            moovs.audio = MP4.moov([audioTrack]);\n            mediaInfo.audioCodec = audioTrack.codec;\n            mediaInfo.channelCount = audioTrack.channelCount;\n            mediaInfo.audioSampleRate = audioTrack.samplerate;\n            mediaInfo.hasAudio = true;\n            mediaInfo.defaultAudioCodec = audioTrack.defaultCodec\n\n            initPTS = audioSamples[0].pts - audioTrack.inputTimescale * timeOffset;\n        }\n\n        if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n            const inputTimeScale = videoTrack.inputTimescale;\n            videoTrack.timescale = inputTimeScale;\n            moovs.video = MP4.moov([videoTrack]);\n            mediaInfo.videoCodec = videoTrack.codec;\n            mediaInfo.width = videoTrack.width;\n            mediaInfo.height = videoTrack.height;\n            mediaInfo.fps = videoTrack.fps;\n            mediaInfo.profile = videoTrack.profile;\n            mediaInfo.level = videoTrack.level;\n            mediaInfo.chromaFormat = videoTrack.chromaFormat;\n            mediaInfo.hasVideo = true;\n\n            let videoInitPTS = videoSamples[0].pts - inputTimeScale * timeOffset;\n            let videoInitDTS = videoSamples[0].dts - inputTimeScale * timeOffset;\n\n            initPTS = initPTS ? Math.min(initPTS, videoInitDTS) : videoInitPTS;\n        }\n\n        if (mediaInfo.hasAudio || mediaInfo.hasVideo) {\n            if (typeof this._initPTS === 'undefined') {\n                this._initPTS = initPTS;\n            }\n            this._moovs = moovs;\n            eventEmitter.emit(LasEvents.MEDIA_INFO, mediaInfo);\n        } else {\n            eventEmitter.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.DEMUX_ERROR,\n                fatal: false,\n                info: {\n                    reason: 'no audio/video samples found'\n                }\n            });\n        }\n    }\n\n    /**\n     * remux视频数据\n     * 输出fmp4数据\n     * @param track VideoTrack\n     * @param isContinuous 数据是否连续\n     * @param activeTimeReference 是否开启视频帧时间参考功能\n     */\n    private _remuxVideo(track: VideoTrack, isContinuous: boolean, activeTimeReference: boolean = true): MP4Segment | undefined {\n        if (!track.samples.length) {\n            return;\n        }\n        const initPTS = this._initPTS;\n        let timescale = track.timescale,\n            samples = track.samples as VideoSample[],\n            sampleDuration = 0,\n            samplesCount = samples.length,\n            mp4Samples: MP4VideoSample[] = [],\n            nextVideoDTS = this._nextVideoDTS;\n        if (typeof initPTS === 'undefined' || samplesCount === 0 || timescale === 0) {\n            return;\n        }\n\n        if (!isContinuous || typeof nextVideoDTS === 'undefined') {\n            nextVideoDTS = samples[0].dts;\n        }\n        // 处理offset\n        samples.forEach((sample) => {\n            sample.pts = sample.pts - initPTS;\n            sample.dts = sample.dts - initPTS;\n        });\n\n        // dts递增\n        samples.sort((a, b) => {\n            return a.dts - b.dts || a.pts - b.pts;\n        });\n\n        // 删除最后一个sample并缓存，用于计算remux最后一个sampleDuration\n        if (this._videoTimeReference) {\n            this._videoTimeReferenceInfo.track = track;\n            if (this._videoTimeReferenceInfo.sample) {\n                samplesCount++;\n                samples.unshift(this._videoTimeReferenceInfo.sample);\n                this._videoTimeReferenceInfo.sample = undefined;\n            }\n            if (samples.length > 1 && activeTimeReference) {\n                this._videoTimeReferenceInfo.sample = samples.pop();\n                samplesCount--;\n            }\n        }\n\n        // 计算调整首个sample时间戳\n        let sample = samples[0];\n        let firstDTS = Math.max(sample.dts, 0);\n        let firstPTS = Math.max(sample.pts, 0);\n\n        if (isContinuous) {\n            const delta = Math.round(firstDTS - nextVideoDTS);\n            if (delta) {\n                firstPTS = samples[0].pts = firstPTS - (firstDTS - nextVideoDTS);\n                firstDTS = samples[0].dts = firstDTS = nextVideoDTS;\n            }\n        }\n\n        for (let i = 0; i < samplesCount; i++) {\n            const videoSample = samples[i];\n            let mp4SampleLength = 0,\n                cts;\n\n            // 计算帧长度\n            if (i < samplesCount - 1) {\n                // 非末尾\n                let nextSample = samples[i + 1];\n                if (nextSample.dts <= videoSample.dts) {\n                    let nextSampleCts = nextSample.pts - nextSample.dts;\n                    nextSample.dts = videoSample.dts + 1;\n                    nextSample.pts = nextSample.dts + nextSampleCts;\n                }\n                sampleDuration = nextSample.dts - videoSample.dts;\n            } else {\n                // 末尾\n                let duration = track.sampleDuration || this._videoSampleDuration;\n                // 参考暂存帧计算长度\n                if (this._videoTimeReferenceInfo.sample) {\n                    duration = this._videoTimeReferenceInfo.sample.dts - videoSample.dts;\n                }\n                sampleDuration = Math.floor(duration);\n            }\n            cts = Math.round(videoSample.pts - videoSample.dts);\n\n            mp4SampleLength = videoSample.units.reduce((prev: number, unit: Uint8Array) => {\n                return unit.byteLength + 4 + prev;\n            }, 0);\n\n            mp4Samples.push({\n                len: mp4SampleLength,\n                units: videoSample.units,\n                duration: sampleDuration,\n                cts,\n                streamDTS: videoSample.streamDTS,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: videoSample.key ? 2 : 1,\n                    isNonSync: videoSample.key ? 0 : 1\n                }\n            });\n        }\n\n        let lastSample = samples[samples.length - 1];\n        this._nextVideoDTS = lastSample.dts + sampleDuration;\n        let nextVideoPTS = lastSample.pts + sampleDuration;\n\n        if (mp4Samples.length && this._forceFirstIDR) {\n            const flags = mp4Samples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n        track.mp4Samples = mp4Samples;\n\n        let payload = MP4.videoMediaSegment(track.sequenceNumber++, firstDTS, track, this._getMoovByType(TrackType.video));\n\n        const data: MP4Segment = {\n            payload: payload,\n            startPTS: firstPTS / timescale,\n            endPTS: nextVideoPTS / timescale,\n            startDTS: firstDTS / timescale,\n            endDTS: this._nextVideoDTS / timescale,\n            type: TrackType.video,\n            streamDTS: sample.streamDTS / timescale\n        };\n        this._videoLastPTS = data.endPTS;\n        this._videoSampleDuration = Math.max(sampleDuration, 1);\n        track.samples = [];\n        track.mp4Samples = [];\n\n        return data;\n    }\n\n    /**\n     * remux音频数据\n     * 输出fmp4数据\n     * @param track AudioTrack\n     * @param isContinuous 是否是连续数据\n     */\n    private _remuxAudio(track: AudioTrack, isContinuous: boolean): MP4Segment | undefined {\n        if (!track.samples.length) {\n            return;\n        }\n        const initPTS = this._initPTS;\n        let inputAudioTimeScale = track.inputTimescale,\n            scaleFactor = inputAudioTimeScale / track.timescale,\n            inputSampleDuration = AAC_SAMPLE_DURATION * scaleFactor,\n            mp4Samples: MP4AudioSample[] = [],\n            firstAudioPTS = 0,\n            lastPTS,\n            inputSamples = track.samples as AudioSample[],\n            nextAudioPTS = this._nextAudioPTS,\n            frameDuration = getAACFrameDuration(track.samplerate);\n\n        if (typeof initPTS === 'undefined') {\n            return;\n        }\n\n        inputSamples.forEach(function (sample) {\n            sample.pts = sample.dts = sample.pts - initPTS;\n        });\n\n        if (!isContinuous || typeof nextAudioPTS === 'undefined') {\n            nextAudioPTS = inputSamples[0].pts;\n        }\n        if (typeof nextAudioPTS === 'undefined') {\n            return;\n        }\n        for (let i = 0, nextPTS = nextAudioPTS; i < inputSamples.length; i++) {\n            const audioSample = inputSamples[i],\n                unit = audioSample.unit,\n                pts = audioSample.pts,\n                delta = Math.round(pts - nextPTS),\n                duration = Math.abs((1000 * delta) / inputAudioTimeScale);\n\n            if (delta <= -inputSampleDuration) {\n                // 丢帧\n                Log.v(this.tag, `drop audio frame. pts: ${pts}`);\n                continue;\n            } else if (delta >= inputSampleDuration && duration < MAX_FILL_FRAME_DURATION && nextPTS) {\n                // 填空帧\n                let fillCount = Math.round(delta / inputSampleDuration);\n                Log.v(this.tag, `fill audio frame. count: ${fillCount} pts: ${pts}`);\n                for (let j = 0; j < fillCount; j++) {\n                    let fillFrame = getAACSilentFrame(track.defaultCodec || track.codec, track.channelCount);\n                    if (!fillFrame) {\n                        Log.v(this.tag, 'fill copy audio frame');\n                        fillFrame = unit.subarray();\n                    }\n                    mp4Samples.push({\n                        len: fillFrame.byteLength,\n                        unit: fillFrame,\n                        cts: 0,\n                        duration: AAC_SAMPLE_DURATION,\n                        streamDTS: Math.round(audioSample.streamDTS - fillCount * frameDuration),\n                        flags: {\n                            isLeading: 0,\n                            isDependedOn: 0,\n                            hasRedundancy: 0,\n                            degradPrio: 0,\n                            dependsOn: 1,\n                            isNonSync: 0\n                        }\n                    });\n                    firstAudioPTS = firstAudioPTS || Math.max(nextPTS, 0);\n                    nextPTS += inputSampleDuration;\n                }\n            } else {\n                firstAudioPTS = firstAudioPTS || pts;\n                nextPTS += inputSampleDuration;\n            }\n\n            mp4Samples.push({\n                len: unit.byteLength,\n                cts: 0,\n                duration: AAC_SAMPLE_DURATION,\n                unit: unit,\n                streamDTS: audioSample.streamDTS,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: 1,\n                    isNonSync: 0\n                }\n            });\n            lastPTS = pts;\n        }\n\n        if (mp4Samples.length && typeof lastPTS === 'number') {\n            this._nextAudioPTS = nextAudioPTS = lastPTS + scaleFactor * AAC_SAMPLE_DURATION;\n            track.mp4Samples = mp4Samples;\n\n            let payload = MP4.audioMediaSegment(track.sequenceNumber++, firstAudioPTS / scaleFactor, track, this._getMoovByType(TrackType.audio));\n\n            track.samples = [];\n            track.mp4Samples = [];\n            const start = firstAudioPTS / inputAudioTimeScale;\n            const end = nextAudioPTS / inputAudioTimeScale;\n            const audioData: MP4Segment = {\n                payload: payload,\n                startPTS: start,\n                endPTS: end,\n                startDTS: start,\n                endDTS: end,\n                type: TrackType.audio,\n                streamDTS: mp4Samples[0].streamDTS/ inputAudioTimeScale\n            };\n            this._audioLastPTS = audioData.endPTS;\n            return audioData;\n        }\n        track.samples = [];\n        track.mp4Samples = [];\n        return;\n    }\n\n    /**\n     * 填空audio\n     * @param track audiotrack\n     * @param isContinuous 是否是连续数据\n     * @param startPTS 开始填充时间\n     * @param endPTS 结束填充时间\n     * @param streamDTS start对应的流时间戳\n     */\n    private _fillEmptyAudio(track: AudioTrack, isContinuous: boolean, startPTS: number, endPTS: number, streamDTS: number) {\n        Log.v(this.tag, 'fill empty Audio');\n        const fillFrame = getAACSilentFrame(track.defaultCodec || track.codec, track.channelCount);\n        if (typeof this._initPTS === 'undefined' || !fillFrame) {\n            return;\n        }\n        const timescale = track.inputTimescale,\n            start = (typeof this._nextAudioPTS !== 'undefined' ? this._nextAudioPTS : startPTS * timescale) + this._initPTS,\n            end = endPTS * timescale + this._initPTS,\n            frameDuration = getAACFrameDuration(track.samplerate),\n            fillCount = Math.ceil((end - start) / frameDuration);\n\n        const samples: AudioSample[] = [];\n        for (let i = 0; i < fillCount; i++) {\n            const time = start + i * frameDuration;\n            samples.push({ unit: fillFrame, pts: time, dts: time, streamDTS: Math.round(streamDTS * timescale + i * frameDuration) });\n        }\n        track.samples = samples;\n        return this._remuxAudio(track, isContinuous);\n    }\n\n    /**\n     * 获取音/视频moov头\n     * @param type track type\n     */\n    private _getMoovByType(type: TrackType): Uint8Array | undefined {\n        let result: Uint8Array | undefined;\n        if (this._moovs && this._moovs[type]) {\n            result = this._moovs[type];\n            delete this._moovs[type];\n        }\n        return result;\n    }\n\n    /**\n     * 清理暂存数据\n     */\n    private _clearVideoTimeReference() {\n        this._videoTimeReferenceInfo = <VideoTimeReferenceInfo>{};\n    }\n}\n\nexport default MP4Remuxer;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:20 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 16:56:40\n * Adobe Flash Video File Format Specification Version 10.1\n * https://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n * FraunhoferIIS_Application-Bulletin_AAC-Transport-Formats.pdf\n * AudioSpecificConfig解析处理\n */\n\nimport BrowserHelper from \"../utils/browser-helper\";\n\nconst SAMPLING_FREQUENCY_LIST = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\ntype AACInfo = {\n    config: number[],\n    samplerate: number,\n    channelCount: number,\n    codec: string,\n    defaultCodec: string\n}\nexport function parseAudioSpecificConfig(data: Uint8Array, offset: number, defaultCodec: string = ''): undefined | AACInfo {\n    if (data.byteLength < offset + 3) {\n        // 数据长度不对\n        return;\n    }\n    let audioObjectType = data[offset + 2] >>> 3, // 5 bits\n        samplingFrequencyIndex = (data[offset + 2] & 0x07) << 1 | data[offset + 3] >>> 7, // 4 bits\n        extensionSamplingFrequencyIndex = samplingFrequencyIndex,\n        channelConfiguration = (data[offset + 3] & 0x78) >>> 3, // 4 bits\n        config: number[] = [];\n\n    defaultCodec = defaultCodec || `mp4a.40.${audioObjectType}`;\n\n    if (samplingFrequencyIndex < 0 || samplingFrequencyIndex >= SAMPLING_FREQUENCY_LIST.length || channelConfiguration < 0 || channelConfiguration >= 8) {\n        // 数据读取错误\n        return;\n    }\n\n    if (BrowserHelper.isFirefox) {\n        if (samplingFrequencyIndex >= 6) {\n            audioObjectType = 5;\n            extensionSamplingFrequencyIndex = samplingFrequencyIndex - 3;\n        } else {\n            audioObjectType = 2;\n        }\n    } else if (BrowserHelper.isAndroid) {\n        audioObjectType = 2;\n    } else {\n        audioObjectType = 5;\n        if (defaultCodec === 'mp4a.40.29' || defaultCodec === 'mp4a.40.5') {\n            extensionSamplingFrequencyIndex = samplingFrequencyIndex - 3;\n        } else {\n            if (defaultCodec === 'mp4a.40.2' && samplingFrequencyIndex >= 6 && channelConfiguration === 1) {\n                audioObjectType = 2;\n            }\n        }\n    }\n    // audioObjectType(5) + samplingFrequencyIndex(3 . 1) + channelConfiguration(4) + extensionSamplingFrequencyIndex(3 . 1)\n    config[0] = (audioObjectType << 3) | ((samplingFrequencyIndex >> 1) & 0x07);\n    config[1] = ((samplingFrequencyIndex << 7) & 0x80) | (channelConfiguration << 3);\n    if (audioObjectType === 5) {\n        config[1] = config[1] | ((extensionSamplingFrequencyIndex >> 1) & 0x07);\n        config[2] = ((extensionSamplingFrequencyIndex & 1) << 7) | 8;\n        config[3] = 0;\n    }\n    return {\n        config: config,\n        samplerate: SAMPLING_FREQUENCY_LIST[samplingFrequencyIndex],\n        channelCount: channelConfiguration,\n        codec: `mp4a.40.${audioObjectType}`,\n        defaultCodec: defaultCodec\n    };\n}\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:05 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:51:05 \n * 哥伦布编码读取器\n */\nclass ExpGolomb {\n    private _data: Uint8Array;\n    private _byteIndex: number;\n    private _bitIndex: number;\n\n    constructor(data: Uint8Array) {\n        this._data = data;\n        this._byteIndex = 0;\n        this._bitIndex = 0;\n    }\n\n    /**\n     * 跳过指定长度bit\n     * @param bitLen 位长度\n     */\n    public skipBits(bitLen: number): void {\n        if (this.bitRemaining > bitLen) {\n            let bitMove = bitLen % 8;\n            this._byteIndex = this._byteIndex + Math.floor(bitLen / 8) + Math.floor((this._bitIndex + bitMove) / 8);\n            this._bitIndex = (this._bitIndex + bitMove) % 8;\n        } else {\n            // 结尾\n            this._byteIndex = this._data.byteLength - 1;\n            this._bitIndex = 7;\n        }\n    }\n\n    /**\n     * 读取指定长度bit\n     * @param bitLen 位长度\n     */\n    public bits(bitLen: number): number {\n        if (bitLen > 32) {\n            throw new Error('len must be less 32');\n        }\n        let byte = this._data[this._byteIndex];\n        // 当前字节需要读取位数\n        let readBitLen = Math.min(8 - this._bitIndex, bitLen);\n        // 当前字节数据需要左移位数\n        let shiftLeft = bitLen - readBitLen;\n        // 刷新index\n        this._bitIndex += readBitLen;\n        let value = (byte >> (8 - this._bitIndex)) & Math.pow(2, readBitLen) - 1;\n        if (this._bitIndex === 8) {\n            this._bitIndex = 0;\n            this._byteIndex++;\n        }\n        if (shiftLeft) {\n            return (value << shiftLeft) | this.bits(shiftLeft);\n        }\n        return value;\n    }\n\n    /**\n     * 无符号指数哥伦布编码\n     */\n    public ue() {\n        let count = this._leadingZeroCount();\n        return this.bits(count + 1) - 1;\n    }\n\n    /**\n     * 有符号指数哥伦布编码\n     */\n    public se() {\n        let ue = this.ue();\n        return Math.pow(-1, ue + 1) * Math.ceil(ue / 2)\n    }\n\n    /**\n     * 剩余bit数\n     */\n    public get bitRemaining(): number {\n        return (this._data.byteLength - this._byteIndex) * 8 - this._bitIndex;\n    }\n\n    /**\n     * 哥伦布编码前导0计数\n     */\n    private _leadingZeroCount(): number {\n        let bitRemaining = this.bitRemaining;\n        for (let i = 0; i < bitRemaining; i++) {\n            if (this.bits(1) === 1) {\n                if (this._bitIndex === 0) {\n                    this._byteIndex--;\n                    this._bitIndex = 7;\n                } else {\n                    this._bitIndex--;\n                }\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n\nexport default ExpGolomb;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:50 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:50 \n * sps解析器\n */\nimport ExpGolomb from './exp-golomb';\n\nconst AspectRatio = [\n    [1, 1], [12, 11], [10, 11], [16, 11], [40, 33], [24, 11], [20, 11], [32, 11], [80, 33], [18, 11], [15, 11], [64, 33], [160, 99], [4, 3], [3, 2], [2, 1]\n];\n\nconst ChromaFormat: Record<number, string> = {\n    1: '4:2:0',\n    2: '4:2:2',\n    3: '4:4:4'\n}\n\nconst Profile: Record<number, string> = {\n    66: 'Baseline',\n    77: 'Main',\n    88: 'Extended',\n    100: 'High',\n    110: 'High10',\n    122: 'High422',\n    244: 'High444',\n}\n\nconst ProfileIDCList = [100, 110, 122, 244, 44, 83, 86, 118, 128, 138, 144];\n\n/**\n * 输出sps信息结构\n */\ntype SPSInfo = {\n    profile: string;\n    level: string;\n    chromaFormat: string;\n    fps: number;\n    pixelAspectRatio: number[];\n    width: number;\n    height: number;\n};\n\nclass SPSParser {\n    /**\n     * 解析sps数据\n     * @param value sps数据\n     */\n    public static parse(value: Uint8Array): SPSInfo {\n        let spsData = new Uint8Array(value.byteLength);\n        // 脱壳\n        let index = 0;\n        for (let i = 0; i < value.byteLength; i++) {\n            if (i >= 2 && value[i] === 3 && value[i - 1] === 0 && value[i - 2] === 0) {\n                continue;\n            }\n            spsData[index] = value[i];\n            index++;\n        }\n\n        let data: ExpGolomb | undefined = new ExpGolomb(spsData);\n        data.skipBits(8);\n        const profileIDC = data.bits(8); // profile_idc\n        data.skipBits(8); // constraint_set_flags 4 reserved_zero 4\n        const levelIDC = data.bits(8); // level_idc\n        data.ue(); // seq_parameter_set_id\n        let chromaFormatIDC = 1;\n\n        if (ProfileIDCList.indexOf(profileIDC) !== -1) {\n            chromaFormatIDC = data.ue(); // chrome_format_idc\n            if (chromaFormatIDC === 3) {\n                data.skipBits(1); // residual_colour_transform_flag\n            }\n\n            data.ue(); // bit_depth_luma_minus8\n            data.ue(); // bit_depth_chroma_minus8\n            data.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n            if (data.bits(1)) { // seq_scaling_matrix_present_flag\n                const scalingListCount = chromaFormatIDC !== 3 ? 8 : 12;\n                for (let i = 0; i < scalingListCount; i++) {\n                    if (data.bits(1)) { // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(data, 16);\n                        } else {\n                            SPSParser._skipScalingList(data, 64);\n                        }\n                    }\n                }\n            }\n        }\n        data.ue(); // log2_max_frame_num_minus4\n        const picOrderCntType = data.ue(); // pic_order_cnt_type\n        if (picOrderCntType === 0) {\n            data.ue(); // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (picOrderCntType === 1) {\n            data.bits(1); // delta_pic_order_always_zero_flag\n            data.se(); // offset_for_non_ref_pic\n            data.se(); // offset_for_top_to_bottom_field\n            const num = data.ue(); // num_ref_frames_in_pic_order_cnt_cycle\n            for (let i = 0; i < num; i++) {\n                data.se(); // offset_for_ref_frame\n            }\n        }\n        data.ue(); // num_ref_frames\n        data.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        const picWidthInMbsMinus1 = data.ue(); // pic_width_in_mbs_minus1\n        const picHeightInMapUnitsMinus1 = data.ue(); // pic_height_in_map_units_minus1\n\n        const frameMbsOnlyFlag = data.bits(1); // frame_mbs_only_flag\n        if (frameMbsOnlyFlag === 0) {\n            data.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n        data.skipBits(1); // direct_8x8_inference_flag\n\n        let frameCropLeftOffset = 0;\n        let frameCropRightOffset = 0;\n        let frameCropTopOffset = 0;\n        let frameCropBottomOffset = 0;\n\n        if (data.bits(1)) { // frame_cropping_flag\n            frameCropLeftOffset = data.ue(); // frame_crop_left_offset\n            frameCropRightOffset = data.ue(); // frame_crop_right_offset\n            frameCropTopOffset = data.ue(); // frame_crop_top_offset\n            frameCropBottomOffset = data.ue(); // frame_crop_bottom_offset\n        }\n\n        let fps = 0,\n            pixelAspectRatio = [1, 1];\n\n        if (data.bits(1)) { // vui_parameters_present_flag\n            if (data.bits(1)) { // aspect_ratio_info_present_flag\n                const aspectRatioIDC = data.bits(8); // aspect_ratio_idc\n                if (aspectRatioIDC > 0 && aspectRatioIDC < 16) {\n                    pixelAspectRatio = AspectRatio[aspectRatioIDC - 1];\n                } else if (aspectRatioIDC === 255) {\n                    pixelAspectRatio = [(data.bits(8) << 8) | data.bits(8), (data.bits(8) << 8) | data.bits(8)];\n                }\n            }\n\n            if (data.bits(1)) { // overscan_info_present_flag\n                data.bits(1); // overscan_appropriate_flag\n            }\n            if (data.bits(1)) { // video_signal_type_present_flag\n                data.bits(4); // video_format 3 video_full_range_flag 1\n                if (data.bits(1)) { // colour_description_present_flag\n                    data.bits(24); // colour_primaries 8 transfer_characteristics 8 matrix_coefficients 8\n                }\n            }\n            if (data.bits(1)) { // chroma_loc_info_present_flag\n                data.ue(); // chroma_sample_loc_type_top_field\n                data.ue(); // chroma_sample_loc_type_bottom_field\n            }\n            if (data.bits(1)) { // timing_info_present_flag\n                const numUnitsInTick = data.bits(32); // num_units_in_tick\n                const timeScale = data.bits(32); // time_scale\n                if (!!data.bits(1)) { // fixed_frame_rate_flag\n                    fps = timeScale / (numUnitsInTick * 2);\n                }\n            }\n        }\n\n        data = undefined;\n\n        let cropUnitX = 0,\n            cropUnitY = 0;\n        if (chromaFormatIDC === 0) {\n            cropUnitX = 1;\n            cropUnitY = 2 - frameMbsOnlyFlag;\n        } else {\n            const subWc = chromaFormatIDC === 3 ? 1 : 2;\n            const subHc = chromaFormatIDC === 1 ? 2 : 1;\n            cropUnitX = subWc;\n            cropUnitY = subHc * (2 - frameMbsOnlyFlag);\n        }\n\n        let width = (picWidthInMbsMinus1 + 1) * 16;\n        let height = (2 - frameMbsOnlyFlag) * ((picHeightInMapUnitsMinus1 + 1) * 16);\n\n        width -= (frameCropLeftOffset + frameCropRightOffset) * cropUnitX;\n        height -= (frameCropTopOffset + frameCropBottomOffset) * cropUnitY;\n\n        return {\n            profile: Profile[profileIDC] || 'unknown',\n            level: (levelIDC / 10).toFixed(1),\n            chromaFormat: (chromaFormatIDC <= 3 ? ChromaFormat[chromaFormatIDC] : ChromaFormat[1]) || 'unknown',\n            fps,\n            pixelAspectRatio,\n            width: width,\n            height: height,\n        };\n    }\n\n    /**\n     * 忽略scaling_list数据\n     * @param data 数据\n     * @param count 长度\n     */\n    private static _skipScalingList(data: ExpGolomb, count: number): void {\n        let lastScale = 8,\n            nextScale = 8;\n        let deltaScale = 0;\n        for (let i = 0; i < count; i++) {\n            if (nextScale !== 0) {\n                deltaScale = data.se();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n    }\n}\n\nexport default SPSParser;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:58 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:44:58 \n * 解码UTF-8\n */\n/**\n * 从arraybuffer中读取utf8 数据\n * @param data 数据\n */\nexport function decodeUTF8(value: ArrayBuffer, offset: number, size: number): string {\n    let data = new Uint8Array(value, offset, size),\n        unicode: number[] = [],\n        i = 0,\n        len = data.byteLength;\n\n    while (i < len) {\n        if (data[i] < 0x80) {\n            // 单字节，同ASCII\n            // 000000-00007F   0xxxxxxx\n            unicode.push(data[i]);\n        } else if (data[i] < 0xc0) {\n        } else if (data[i] < 0xe0) {\n            // 双字节，unicode = 5bit + 6bit \n            // 000080-0007FF   110xxxxx 10xxxxxx    首字节小于0xe0=11100000\n            if (i < len - 1 && (data[i + 1] >> 6) === 0b10) {\n                unicode.push(((data[i] & 0x1f) << 6) | (data[i + 1] & 0x3f));\n                i += 2;\n                continue;\n            }\n        } else if (data[i] < 0xf0) {\n            // 三字节，unicode = 4bit + 6bit + 6bit\n            // 000800-00FFFF   1110xxxx 10xxxxxx 10xxxxxx   首字节小于0xf0=11110000\n            if (i < len - 2 && (data[i + 1] >> 6) === 0b10 && (data[i + 2] >> 6) === 0b10) {\n                // 1110xxxx -> 0b1111 ->  0xf\n                unicode.push(((data[i] & 0xf) << 12) | ((data[i + 1] & 0x3f) << 6) | (data[i + 2] & 0x3f));\n                i += 3;\n                continue;\n            }\n        } else if (data[i] < 0xf8) {\n            // 四字节，unicode = 3bit + 6bit + 6bit + 6bit\n            // 010000-10FFFF\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 首字节小于0xf8=11111000\n            if (i < len - 3 && (data[i + 1] >> 6) === 0b10 && (data[i + 2] >> 6) === 0b10 && (data[i + 3] >> 6) === 0b10) {\n                // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n                unicode.push(((data[i] & 0x7) << 18) | ((data[i + 1] & 0x3f) << 12) | ((data[i + 2] & 0x3f) << 6) | (data[i + 3] & 0x3f));\n                i += 4;\n                continue;\n            }\n        }\n        i++;\n    }\n    // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n    return String.fromCodePoint.apply(null, unicode);\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:42 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:53:05\n * flv script tag处理\n */\n// amf0-file-format-specification\n// Adobe Flash Video File Format Specification Version 10.1\n\nimport { decodeUTF8 } from '../../utils/decode-utf8';\n\n/**\n * 数据源定义\n */\ntype Source = {\n    view: DataView,\n    i: number,\n}\n\n/**\n * 解码flv script tag数据\n * 处理AMF0数据\n */\nclass FlvScriptTagDecoder {\n    /**\n     * 解码script tag数据\n     * @param data script tag body数据\n     * @param offset 数据偏移量，默认：0\n     */\n    public static decode(data: ArrayBuffer, offset: number = 0): any {\n        let source: Source = {\n            view: new DataView(data, offset),\n            i: 0\n        }\n        source.i = 0;\n        let result: any = {};\n        try {\n            result[FlvScriptTagDecoder._read(source)] = FlvScriptTagDecoder._read(source);\n        } catch (e) { }\n        return result;\n    }\n\n    /**\n     * 从数据源读取AMF0格式数据\n     * @param s 数据源\n     */\n    private static _read(s: Source): any {\n        let view = s.view;\n        let len = view.byteLength;\n        let type = view.getUint8(s.i);\n        s.i++;\n        let result: any;\n        switch (type) {\n            case 0:\n                // Number Type\n                result = view.getFloat64(s.i);\n                s.i += 8;\n                return result;\n            case 1:\n                // Boolean Type\n                result = view.getUint8(s.i);\n                s.i++;\n                return result;\n            case 2:\n                // String Type\n                return FlvScriptTagDecoder._readString(s);\n            case 3:\n                // Object Type\n                result = {};\n                while (s.i < len - 4) {\n                    if (FlvScriptTagDecoder._isObjectEnd(s)) {\n                        s.i += 3;\n                        break;\n                    }\n                    FlvScriptTagDecoder._readObjProperty(s, result);\n                }\n                return result;\n            case 5:\n                // null Type\n                return null;\n            case 8:\n                // ECMA Array Type\n                result = {};\n                s.i += 4;\n                while (s.i < len - 8) {\n                    if (FlvScriptTagDecoder._isObjectEnd(s)) {\n                        s.i += 3;\n                        break;\n                    }\n                    FlvScriptTagDecoder._readObjProperty(s, result);\n                }\n                return result;\n            case 10:\n                // Strict Array Type\n                result = [];\n                let size = view.getUint32(s.i);\n                s.i += 4;\n                for (let i = 0; i < size; i++) {\n                    result.push(FlvScriptTagDecoder._read(s));\n                }\n                return result;\n            case 11:\n                // Date Type\n                return FlvScriptTagDecoder._readDate(s);\n            case 12:\n                // Long String Type\n                return FlvScriptTagDecoder._readLongString(s);\n        }\n    }\n\n    /**\n     * 判断Object End Type\n     * @param s 数据源\n     */\n    private static _isObjectEnd(s: Source): boolean {\n        // 0x00 0x00 0x09\n        if (s.i + 2 > s.view.byteLength - 1 ||\n            s.view.getInt16(s.i) === 0 && s.view.getUint8(s.i + 2) === 9) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 读取object属性\n     * @param s 数据源\n     * @param obj 输出\n     */\n    private static _readObjProperty(s: Source, obj: any): void {\n        let name = FlvScriptTagDecoder._readString(s);\n        let value = FlvScriptTagDecoder._read(s);\n        obj[name] = value;\n    }\n\n    /**\n     * 读取字符串\n     * @param s 数据源\n     */\n    private static _readString(s: Source): string {\n        // 16bit（字符串长度） + 字符串\n        const len = s.view.getUint16(s.i);\n        let result;\n        if (len > 0) {\n            result = decodeUTF8(s.view.buffer, s.view.byteOffset + s.i + 2, len);\n        } else {\n            result = '';\n        }\n        s.i += 2 + len;\n        return result;\n    }\n\n    /**\n     * 读取长字符串\n     * @param s 数据源\n     */\n    private static _readLongString(s: Source): string {\n        // 32bit（字符串长度） + 字符串\n        const len = s.view.getUint32(s.i);\n        let result;\n        if (len > 0) {\n            result = decodeUTF8(s.view.buffer, s.view.byteOffset + s.i + 4, len);\n        } else {\n            result = '';\n        }\n        s.i += 4 + len;\n        return result;\n    }\n\n    /**\n     * 读取日期\n     * @param s 数据源\n     */\n    private static _readDate(s: Source): Date {\n        // 64bit(utc) + 16bit(时区，分钟)\n        let timestamp = s.view.getFloat64(s.i);\n        s.i += 8;\n        let tz = s.view.getInt16(s.i);\n        s.i += 2;\n        return new Date(timestamp + tz * 60 * 1000);\n    }\n}\n\nexport default FlvScriptTagDecoder;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:14 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-30 18:29:55\n * flv解封装\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../../core/errors';\nimport LasEvents from '../../core/events';\nimport MP4Remuxer from '../../remux/mp4-remuxer';\nimport { LasMainConfig } from '../../types/core';\nimport { FlvTag, FlvTagType } from '../../types/flv-object';\nimport { AudioTrack, TrackType, VideoTrack } from '../../types/remux';\nimport { Log } from '../../utils/log';\nimport { parseAudioSpecificConfig } from '../audio-specific-config';\nimport SPSParser from '../sps-parser';\nimport FlvScriptTagDecoder from './flv-script-tag-decoder';\n\n// 连续Non-monotonous上限，超过上限重置remux\nconst DISCONTINUITY_ON_NON_MONOTONOUS = 10;\n\nconst AUDIO_TIME_ORIGIN_THRESHOLD = 5;\n\ntype TagCacheItem = { tag: FlvTag, dataOffset?: number };\nclass FlvDemux {\n    private tag = 'FlvDemux';\n    private _eventEmitter: EventEmitter;\n    private _remuxer: MP4Remuxer;\n    private _naluLengthSize: number;\n    private _hasVideo: boolean;\n    private _hasAudio: boolean;\n    private _videoTrack: VideoTrack;\n    private _audioTrack: AudioTrack;\n    private _remuxStat?: { timeOffset: number; isContinuous: boolean };\n    private _audioLastDTS: number = 0;\n    private _videoLastDTS: number = 0;\n    private _nonMonotonousTagCache?: Record<string, TagCacheItem[]>;\n\n    private _audioCodec: string = '';\n    private _videoCodec: string = '';\n\n    constructor(eventEmitter: EventEmitter, remuxer: MP4Remuxer, config: LasMainConfig) {\n        this._eventEmitter = eventEmitter;\n        this._remuxer = remuxer;\n\n        this._naluLengthSize = 4;\n\n        this._hasVideo = true;\n        this._hasAudio = true;\n\n        this._videoTrack = {\n            id: 1,\n            type: TrackType.video,\n            codec: '',\n            timescale: 1000,\n            duration: 0,\n            samples: [],\n            mp4Samples: [],\n            inputTimescale: 1000,\n            sequenceNumber: 0,\n            width: 0,\n            height: 0,\n            codecWidth: 0,\n            codecHeight: 0,\n            sps: [],\n            pps: [],\n            pixelRatio: [],\n            profile: '',\n            level: '',\n            chromaFormat: '',\n            fps: 0,\n            sampleDuration: 0,\n        };\n        this._audioTrack = {\n            id: 2,\n            type: TrackType.audio,\n            codec: '',\n            timescale: 1000,\n            duration: 0,\n            samples: [],\n            mp4Samples: [],\n            inputTimescale: 1000,\n            sequenceNumber: 0,\n            samplerate: 0,\n            channelCount: 0,\n            config: [],\n            sampleDuration: 0,\n        };\n    }\n\n    public append(tags: FlvTag[], timeOffset: number, isContinuous: boolean): void {\n        if (!this._remuxStat) {\n            this._remuxStat = { timeOffset, isContinuous };\n        }\n        if (!tags.length) return;\n        tags.forEach(tag => {\n            if (tag.tagType === FlvTagType.VIDEO && this._hasVideo) {\n                this._parseVideoData(tag);\n            } else if (tag.tagType === FlvTagType.AUDIO && this._hasAudio) {\n                this._parseAudioData(tag);\n            } else if (tag.tagType === FlvTagType.SCRIPT) {\n                this._parseScriptTag(tag);\n            }\n        });\n        this._remux();\n    }\n\n    /**\n     * 设置codec\n     * @param audioCodec audioCodec\n     * @param videoCodec videoCodec\n     */\n    public setCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        this._audioCodec = audioCodec;\n        this._videoCodec = videoCodec;\n    }\n\n    public flvHead(hasAudio: boolean, hasVideo: boolean): void {\n        this._hasAudio = hasAudio;\n        this._hasVideo = hasVideo;\n    }\n\n    public destroy() { }\n\n    public flush() {\n        this._remux(true);\n        this._remuxStat = undefined;\n    }\n\n    public reset() {\n        this._videoTrack.samples = [];\n        this._audioTrack.samples = [];\n        this._audioLastDTS = this._videoLastDTS = 0;\n        this._remuxStat = undefined;\n    }\n\n    /**\n     * 处理script tag\n     * @param tag flv tag\n     */\n    private _parseScriptTag(tag: FlvTag) {\n        if (tag.body) {\n            const scriptData = FlvScriptTagDecoder.decode(tag.body.buffer);\n            scriptData.timestamp = tag.timestamp;\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                const onMetaData = scriptData.onMetaData;\n                if (typeof onMetaData.framerate === 'number') {\n                    this._videoTrack.fps = this._videoTrack.fps || onMetaData.framerate;\n                }\n                Log.i(this.tag, 'Parsed onMetaData');\n            }\n            // script tag数据整个抛出\n            this._eventEmitter.emit(LasEvents.SCRIPT_PARSED, scriptData);\n        }\n    }\n\n    /**\n     * 处理flv video tag\n     * @param tag FlvTag\n     */\n    private _parseVideoData(tag: FlvTag) {\n        if (!tag.body) {\n            return;\n        }\n        // 获取 video tag body 第一字节\n        const spec = tag.body[0];\n        // UB[4] 获取是否是关键帧\n        tag.frameType = (spec & 0xf0) >>> 4;\n        // 获取编码格式\n        // UB[4] CodecID 7 = AVC\n        const codecId = spec & 0xf;\n        if (codecId !== 7) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `video codec Unsupported: ${codecId}`)\n            return;\n        }\n        // AVCPacketType\n        tag.codecId = codecId;\n        const packetType = tag.body[1];\n        // 3字节\n        tag.cts = ((tag.body[2] & 0xff) << 16) + ((tag.body[3] & 0xff) << 8) + (tag.body[4] & 0xff);\n\n        if (packetType === 0) {\n            // 处理sps/pps\n            this._parseAVCDecoderConfigurationRecord(tag, 5);\n        } else if (packetType === 1) {\n            this._parseAVCVideoData(tag, 5) || {};\n        } else if (packetType === 2) {\n        } else {\n            this._onError(ErrorDetails.DEMUX_ERROR, `video packet type error: ${packetType} `);\n            return;\n        }\n    }\n\n    /**\n     * 解析AVCDecoderConfigurationRecord\n     * @param tag flvtag\n     * @param dataOffset tag body offset\n     */\n    private _parseAVCDecoderConfigurationRecord(tag: FlvTag, dataOffset: number) {\n        if (!tag.body) {\n            return;\n        }\n        const track = this._videoTrack;\n        const arrayBuffer = tag.body.buffer;\n        const dataSize = tag.body.byteLength - dataOffset;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const version = v.getUint8(0);\n        const avcProfile = v.getUint8(1);\n        // 忽略profile_compatibility、AVCLevelIndication\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(ErrorDetails.DEMUX_ERROR, 'AVCDecoderConfiguration error');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1;\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `nalu length size error: ${this._naluLengthSize}`);\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31;\n        if (spsCount === 0 || spsCount > 1) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `H264 SPS count error: ${spsCount}`);\n            return;\n        }\n\n        let offset = 6;\n        let spsList = [];\n        for (let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset);\n            offset += 2;\n            if (len === 0) {\n                continue;\n            }\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n            spsList.push(sps);\n            const config = SPSParser.parse(sps);\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n\n            if (\n                !!track.codec &&\n                (track.width !== config.width ||\n                    track.height !== config.height ||\n                    codecString !== track.codec)\n            ) {\n                // sps有更新，现有缓存视频帧全部remux。需要重新生成mp4头\n                this._remux(true);\n                this._remuxer.resetMoov();\n            }\n            track.sps = spsList;\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelAspectRatio\n            if (config.fps) {\n                track.fps = config.fps;\n            }\n            track.codec = codecString;\n\n            track.profile = config.profile;\n            track.level = config.level;\n            track.chromaFormat = config.chromaFormat;\n        }\n\n        const ppsCount = v.getUint8(offset);\n        if (ppsCount === 0 || ppsCount > 1) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `H264 PPS count error: ${ppsCount}`);\n            return;\n        }\n\n        offset++;\n        track.pps = [];\n        for (let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset);\n            offset += 2;\n            const pps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            track.pps.push(pps);\n            if (len === 0) {\n                continue;\n            }\n            offset += len;\n        }\n        Log.v(this.tag, 'Parsed AVCDecoderConfigurationRecord');\n\n        track.sampleDuration = Math.floor(track.timescale / (track.fps || 25));\n    }\n\n    /**\n     * 解析视频tag\n     * @param tag flv tag\n     * @param dataOffset dataOffset\n     */\n    private _parseAVCVideoData(tag: FlvTag, dataOffset: number, fromNonMonotonousCache: boolean = false) {\n        if (!tag.body) {\n            return;\n        }\n        let info;\n        const arrayBuffer = tag.body.buffer;\n        const dataSize = tag.body.byteLength - dataOffset;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const units = [];\n        let length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        let dts = tag.timestamp;\n        let keyframe = tag.frameType === 1; // from FLV Frame Type constants\n        // 处理Non-monotonous DTS及丢帧时间修正后可能出现的时间重叠\n        if (!fromNonMonotonousCache && dts <= this._videoLastDTS && this._videoLastDTS > 0) {\n            Log.w(this.tag, `debug Non-monotonous DTS dts:${dts} last:${this._videoLastDTS}`);\n            this._onNonMonotonous({ tag, dataOffset }, TrackType.video);\n            return;\n        }\n        if (!fromNonMonotonousCache && this._nonMonotonousTagCache) {\n            this._flushNonMonotonousCache();\n        }\n\n        if (fromNonMonotonousCache && dts <= this._videoLastDTS) {\n            dts = this._videoLastDTS + 1;\n        }\n        const pts = dts + tag.cts;\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                Log.v(this.tag, `ignore nalu. timestamp = ${tag.timestamp}, offset = ${offset}, dataSize = ${dataSize}`);\n                break;\n            }\n            let naluSize = v.getUint32(offset);\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                Log.v(this.tag, `ignore nalu. naluSize > dataSize timestamp ${dts}`);\n                return;\n            }\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset + 4, lengthSize + naluSize - 4);\n            let unitType;\n            if (tag.codecId === 7) {\n                unitType = v.getUint8(offset + lengthSize) & 0x1f;\n                if (unitType === 5) {\n                    keyframe = true;\n                }\n            }\n\n            units.push(data);\n            length += data.byteLength;\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            const track = this._videoTrack;\n            const avcSample = {\n                units,\n                length,\n                dts: dts,\n                cts: tag.cts,\n                pts: pts,\n                streamDTS: tag.timestamp,\n                key: keyframe\n            };\n            track.samples.push(avcSample);\n        }\n        this._videoLastDTS = dts;\n        return info;\n    }\n\n    /**\n     * 解析音频tag\n     * @param tag flv tag\n     */\n    private _parseAudioData(tag: FlvTag, fromNonMonotonousCache: boolean = false) {\n        if (!tag.body) {\n            return;\n        }\n        const dataSize = tag.body.byteLength;\n        let aacFrameLen;\n        if (dataSize <= 1) {\n            Log.v(this.tag, 'audio packet no payload!');\n            return;\n        }\n        const track = this._audioTrack;\n        const packetType = tag.body[1];\n        if (packetType === 0) {\n            if (tag.body.byteLength < 4) {\n                return;\n            }\n            let info = parseAudioSpecificConfig(tag.body, 0, this._audioCodec);\n            if (info) {\n                track.config = info.config;\n                track.timescale = track.samplerate = info.samplerate;\n                track.channelCount = info.channelCount;\n                track.codec = info.codec;\n                track.defaultCodec = info.defaultCodec;\n                track.sampleDuration = 1024 * 1000 / track.samplerate;\n            } else {\n                this._onError(ErrorDetails.DEMUX_ERROR, 'AudioSpecificConfig parse error');\n            }\n\n            return;\n        } else if (packetType === 1) {\n            const aacData = tag.body.subarray(2);\n            // AAC raw frame data\n            let dts = tag.timestamp;\n            // 通过时间计算的dts与通过帧长度计算的dts比对，判断是否发生了跳帧\n            // aac帧长度\n            aacFrameLen = 1024 * 1000 / track.samplerate;\n            if (this._audioLastDTS > 0) {\n                // 默认使用时间戳累加方式\n                dts = this._audioLastDTS + aacFrameLen;\n                const dtsDiff = tag.timestamp - dts;\n                let threshold = aacFrameLen * AUDIO_TIME_ORIGIN_THRESHOLD;\n                if (dtsDiff > threshold) {\n                    // 超出阈值使用tag.timestamp\n                    dts = tag.timestamp;\n                } else if (!fromNonMonotonousCache && dtsDiff < -threshold) {\n                    this._onNonMonotonous({ tag }, TrackType.audio);\n                    return;\n                }\n            }\n\n            if (!fromNonMonotonousCache && this._nonMonotonousTagCache) {\n                this._flushNonMonotonousCache();\n            }\n\n            const aacSample = {\n                unit: aacData,\n                length: aacData.byteLength,\n                dts: dts,\n                pts: dts,\n                streamDTS: tag.timestamp\n            };\n            this._audioLastDTS = dts;\n            track.samples.push(aacSample);\n        } else {\n            Log.v(this.tag, `Unsupported AAC data type ${packetType}`);\n        }\n    }\n\n    /**\n     * 检测到Non-monotonous\n     * 少量出现Non-monotonous尝试修正时间戳\n     * 连续出现Non-monotonous按照中断重推处理\n     * @param data tag相关数据\n     * @param type audio|video\n     */\n    private _onNonMonotonous(data: TagCacheItem, type: TrackType) {\n        if (!this._nonMonotonousTagCache) {\n            this._nonMonotonousTagCache = {\n                video: [],\n                audio: []\n            };;\n        }\n        const cache = this._nonMonotonousTagCache[type];\n        if (cache.length > DISCONTINUITY_ON_NON_MONOTONOUS) {\n            this._remuxer.flush();\n            const lastPTS = this._remuxer.getLastPTS();\n            let ptsSync: number = lastPTS.audio;\n            if (ptsSync === 0 || (lastPTS.video > 0 && lastPTS.video < ptsSync)) {\n                ptsSync = lastPTS.video;\n            }\n            this._videoTrack.samples = [];\n            this._audioTrack.samples = [];\n            this._audioLastDTS = this._videoLastDTS = 0;\n            this._remuxStat = { isContinuous: false, timeOffset: ptsSync };\n            this._remuxer.resetMoov();\n            this._remuxer.resetTimeStamp();\n            Log.i(this.tag, 'NON_MONOTONOUS reset time');\n            this._flushNonMonotonousCache();\n        } else {\n            cache.push(data);\n        }\n    }\n\n    /**\n     * 清空Non-monotonous数据，remux\n     */\n    private _flushNonMonotonousCache() {\n        if (this._nonMonotonousTagCache) {\n            const nonMonotonousCache = this._nonMonotonousTagCache;\n            for (const key in nonMonotonousCache) {\n                const cache = nonMonotonousCache[key];\n                while (cache.length) {\n                    const data = cache.shift();\n                    if (data) {\n                        if (key === 'video') {\n                            this._parseAVCVideoData(data.tag, data.dataOffset || 0, true);\n                        } else if (key === 'audio') {\n                            this._parseAudioData(data.tag, true);\n                        }\n                    }\n                }\n            }\n            this._nonMonotonousTagCache = undefined;\n        }\n    }\n\n    private _remux(end = false) {\n        const audiotrack = this._audioTrack;\n        const videotrack = this._videoTrack;\n        let isContinuous = true,\n            timeOffset = 0;\n        if (this._remuxStat) {\n            isContinuous = this._remuxStat.isContinuous;\n            timeOffset = this._remuxStat.timeOffset;\n        }\n\n        if (audiotrack.samples.length === 0 && videotrack.samples.length === 0) {\n            if (end) {\n                this._remuxer.flush();\n            }\n            return;\n        }\n\n        if (!end && (this._hasAudio && audiotrack.samples.length === 0 || this._hasVideo && videotrack.samples.length < 2)) {\n            return;\n        }\n        try {\n            this._remuxer.remux(audiotrack, videotrack, timeOffset, isContinuous, end);\n            this._remuxStat = undefined;\n        } catch (error) {\n            Log.e(this.tag, error);\n            this._onError(ErrorDetails.REMUX_ERROR, error.message)\n        }\n    }\n\n    /**\n     * 错误处理，抛出错误事件\n     * @param details ErrorDetails\n     * @param reason 错误原因\n     */\n    private _onError(details: ErrorDetails, reason: string) {\n        this._eventEmitter.emit(LasEvents.ERROR, {\n            type: ErrorTypes.MUX_ERROR,\n            details: details,\n            fatal: true,\n            info: {\n                reason\n            }\n        });\n    }\n}\n\nexport default FlvDemux;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:14 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:52:14 \n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../../core/events';\nimport MP4Remuxer from '../../remux/mp4-remuxer';\nimport { LasMainConfig } from '../../types/core';\nimport { FlvTag } from '../../types/flv-object';\nimport FlvDemuxer from './flv-demuxer';\n\nclass FlvDemuxerInline {\n    private tag: string = 'Flv';\n    private _eventEmitter: EventEmitter;\n    private _config: LasMainConfig;\n    private _extraData: any;\n\n    private _demuxer!: FlvDemuxer;\n    private _remuxer!: MP4Remuxer;\n\n    constructor(eventEmitter: EventEmitter, config: LasMainConfig, extraData: any) {\n        this._eventEmitter = eventEmitter;\n        this._config = config;\n\n        this._extraData = extraData;\n    }\n\n    public init(): void {\n        const config = this._config,\n            eventEmitter = this._eventEmitter;\n\n        const remuxer = (this._remuxer = new MP4Remuxer(eventEmitter, config));\n        this._demuxer = new FlvDemuxer(eventEmitter, remuxer, config);\n        remuxer.setExtra(this._extraData);\n    }\n\n    public setCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        this._demuxer.setCodecs(audioCodec, videoCodec);\n    }\n\n    public flvHead(hasAudio: boolean, hasVideo: boolean): void {\n        this._demuxer.flvHead(hasAudio, hasVideo);\n    }\n\n    public append(tags: FlvTag[], timeOffset: number, isContinuous: boolean) {\n        if (!isContinuous) {\n            this._demuxer.reset();\n            this._remuxer.resetMoov();\n            this._remuxer.resetTimeStamp();\n        }\n        this._demuxer.append(tags, timeOffset, isContinuous);\n    }\n\n    public end(): void {\n        this._demuxer.flush();\n        this._remuxer.flush();\n        this._eventEmitter.emit(LasEvents.LOAD_END);\n    }\n\n    public flush(): void {\n        if (this._demuxer) {\n            this._demuxer.flush();\n        }\n    }\n\n    public setExtra(data: any): void {\n        this._extraData = data;\n        if (this._remuxer) {\n            this._remuxer.setExtra(this._extraData);\n        }\n    }\n\n    public destroy(): void { }\n\n}\n\nexport default FlvDemuxerInline;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:51:57 \n * worker\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../../core/events';\nimport { WorkerCmd } from '../../core/worker-cmd';\nimport { LasMainConfig } from '../../types/core';\nimport { MP4RemuxResult } from '../../types/remux';\nimport { Log } from '../../utils/log';\nimport FlvDemuxerInline from './flv-demuxer-inline';\n\nexport default function (self: any) {\n    let flv: FlvDemuxerInline;\n\n    const eventEmitter = new EventEmitter();\n    eventEmitter.on(LasEvents.MEDIA_INFO, data => { self.postMessage({ event: LasEvents.MEDIA_INFO, data: data }); });\n    eventEmitter.on(LasEvents.ERROR, data => { self.postMessage({ event: LasEvents.ERROR, data: data }); });\n    eventEmitter.on(LasEvents.SCRIPT_PARSED, data => { self.postMessage({ event: LasEvents.SCRIPT_PARSED, data: data }); });\n    eventEmitter.on(LasEvents.LOAD_END, data => { self.postMessage({ event: LasEvents.LOAD_END, data: data }); });\n    eventEmitter.on(LasEvents.MP4_SEGMENT, (data: MP4RemuxResult) => {\n        const message = { event: LasEvents.MP4_SEGMENT, data };\n        let payloads: ArrayBuffer[] = [];\n        data.segments.forEach(element => {\n            payloads.push(element.payload.buffer);\n        });\n        self.postMessage(message, payloads);\n    });\n\n    function init(eventEmitter: EventEmitter, config: LasMainConfig, data: any) {\n        flv = new FlvDemuxerInline(eventEmitter, config, data);\n        flv.init();\n    }\n\n    function destroy() {\n        if (flv) {\n            flv.destroy();\n        }\n        if (eventEmitter) {\n            eventEmitter.removeAllListeners();\n        }\n    }\n\n    self.addEventListener('message', function (e: { data: any }) {\n        const d = e.data;\n        switch (d.cmd) {\n            case WorkerCmd.INIT:\n                Log.level(d.config.debug);\n                init(eventEmitter, d.config, d.data);\n                break;\n            case WorkerCmd.DESTROY:\n                destroy();\n                break;\n            case WorkerCmd.APPEND_DATA:\n                flv.append(d.tags, d.timeOffset, d.isContinuous);\n                break;\n            case WorkerCmd.SET_CODECS:\n                flv.setCodecs(d.audioCodec, d.videoCodec);\n                break;\n            case WorkerCmd.FLV_HEAD:\n                flv.flvHead(d.hasAudio, d.hasVideo);\n                break;\n            case WorkerCmd.FLUSH:\n                flv.flush();\n                break;\n            case WorkerCmd.SET_EXTRA:\n                flv.setExtra(d.data);\n                break;\n            case WorkerCmd.LOAD_END:\n                flv.end();\n                break;\n        }\n    });\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:37:56 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-30 17:34:44\n * 配置解析处理\n */\nimport { AutoPlaybackRateConfig, LasConfig } from './types/core';\nimport BrowserHelper from './utils/browser-helper';\nimport { Log, LOG_LEVEL } from './utils/log';\n\nconst DEFAULT_CONFIG: LasConfig = {\n    webWorker: true, // 是否开启webworker\n    appendErrorMaxRetry: 3, // mse append出错后重试次数\n    credentials: false, // 请求是否带cookie\n    defaultLiveDelay: -2000,\n    debug: LOG_LEVEL.LEVEL_ERROR,\n    connectionTimeout: 10000, // 流连接超时\n    transmissionTimeout: 30000, // 流传输超时\n    autoRecoverMedia: false, // 尝试自动恢复video.error\n    autoPlaybackRate: true,\n};\n\nclass ConfigHelper {\n    /**\n     * 处理传入的config\n     * @param userConfig 传入config\n     * @returns config\n     */\n    static processConfig(userConfig: any): LasConfig {\n        const config: LasConfig = Object.assign({}, DEFAULT_CONFIG);\n        Object.assign(config, userConfig);\n\n        if (!(window as any).Worker) {\n            config.webWorker = false;\n        }\n        if (config.debug) {\n            Log.level(config.debug);\n        }\n        this._initPlayBackRateRule(config);\n        return config;\n    }\n\n    /**\n     * 初始化自动倍速配置\n     * @param config config\n     */\n    static _initPlayBackRateRule(config: LasConfig) {\n        const conf = config.autoPlaybackRateConf;\n        if (conf) {\n            let rule = conf.rule;\n            if (rule && Array.isArray(rule)) {\n                rule = rule.filter(item => {\n                    return item.upper > item.lower && item.rate > 0;\n                });\n                // 速度控制规则，按playbackRate倒序\n                rule.sort((a: any, b: any) => {\n                    return b.rate - a.rate;\n                });\n                if (rule.length > 1) {\n                    conf.rule = rule;\n                    config.autoPlaybackRateConf = conf;\n                    return;\n                }\n            }\n        } else {\n            let delay = -config.defaultLiveDelay / 1000;\n            let abrPlabackRateConf: AutoPlaybackRateConfig = {\n                startDelay: delay,\n                interval: 0.2,\n                rule: [\n                    { rate: 1.1, lower: delay + 1, upper: Number.MAX_SAFE_INTEGER },\n                    { rate: 1, lower: 0, upper: delay }\n                ]\n            };\n            config.autoPlaybackRateConf = abrPlabackRateConf;\n        }\n    }\n}\n\nexport { DEFAULT_CONFIG, ConfigHelper };\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:54:16 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 17:11:02\n * las请求地址生成\n */\n/**\n * 生成切换flv的请求地址\n * @param url 流地址\n * @param spts 切换时间戳，单位毫秒。大于0：关键帧pts；小于0：直播延迟\n */\nexport function abrGetUrl(url: string, spts?: number): string {\n    if (typeof spts === 'undefined') {\n        return url;\n    }\n    let arr = url.split('?');\n    arr.splice(1, 0, `?startPts=${spts}${arr.length > 1 ? '&' : ''}`);\n    return arr.join('');\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:39 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:44:39 \n * 处理codec字符串，拆分音视频codec\n */\nimport { TrackType } from \"../types/remux\";\n\ntype Codecs = Partial<Record<TrackType, string>>;\n\n/**\n * 拆解codec串\n * @param value codec串\n */\nexport function parseCodecStr(value: string): Codecs {\n    let result: Codecs = {};\n    (value || '').split(/[ ,]+/).forEach(codec => {\n        if (codec.indexOf('avc1') === 0) {\n            result.video = codec;\n        }\n        if (codec.indexOf('mp4a') === 0) {\n            result.audio = codec;\n        }\n    });\n    return result;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:57 \n * 单个清晰度流定义\n */\nexport default class AbrLevel {\n    public url: string;\n    public bitrate: number = 0;\n    public maxBitrate: number = 0;\n    public avgBitrate: number = 0;\n    public qualityType: string = '';\n    public qualityTypeName: string = '';\n    public id: number = 0;\n    public codec: string = '';\n    public audioCodec?: string = '';\n    public videoCodec?: string = '';\n    public hidden: boolean = false;\n    public disabledFromAdaptive: boolean = false;\n    public defaultSelected: boolean = false;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:40 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:40 \n * manfest定义及解析\n */\nimport { parseCodecStr } from \"../utils/codec-helper\";\nimport AbrLevel from \"./abr-level\";\nexport type Representation = {\n    // 每个媒体表示的唯一标识号\n    id: number,\n    // 媒体表示的URL地址\n    url: string,\n    // 媒体表示的备用URL地址\n    backupUrl: string[],\n    // 媒体表示的域名\n    host: string,\n    // 媒体表示的编码码率\n    maxBitrate: number,\n    // 媒体表示的平均码率\n    avgBitrate: number,\n    // 音视频流的编码方式\n    codec: string,\n    // 媒体表示的宽度\n    width: number,\n    // 媒体表示的高度\n    height: number,\n    // 媒体表示的帧率\n    frameRate: number,\n    // 媒体表示的质量类型\n    qualityType: string,\n    // 媒体表示的质量类型展示字段\n    qualityTypeName: string,\n    // 媒体表示隐藏选项。设定为true，则对应的媒体表示不外显，用户无法选择，只能通过自适应功能选中；设定为false，则对应的媒体表示外显，用户可手动选择\n    hidden: boolean,\n    // 媒体表示自适应选项。设定为false，则对应的媒体表示对于自适应功能可见，能被自适应功能选中；\n    disabledFromAdaptive: boolean,\n    // 默认档功能选项。@defaultSelect为true的媒体表示启播默认播放。所有@representation中，最多只能出现一个媒体表示的@defaultSelect为true；没有@representation设置defaultSelect为true时，自动选择媒体表示启播播放\n    defaultSelected: boolean\n}\n\ntype AdaptationSet = {\n    // adaptationSet的唯一标识号\n    id: number;\n    // 媒体流GOP的长度，单位为毫秒\n    duration: number;\n    // 媒体表示的集合，媒体表示的集合包含一个或多个媒体表示\n    representation: Representation[];\n};\n\nexport type AbrManifestData = {\n    // 版本号\n    version: string,\n    // 自适应集合，每个MPD由一个或多个自适应集合组成\n    adaptationSet: AdaptationSet[];\n};\n\n/**\n * las manifest\n */\nexport class AbrManifest {\n    private _levels: AbrLevel[] = [];\n    private _abrLevels: number[] = [];\n    private _default?: number;\n\n    /**\n     * 验证las manifest数据\n     * @param data 输入数据\n     */\n    public static verify(data: any) {\n        if (\n            data &&\n            data.hasOwnProperty('version') &&\n            data.hasOwnProperty('adaptationSet') &&\n            Array.isArray(data.adaptationSet) &&\n            data.adaptationSet.length > 0\n        ) {\n            return data.adaptationSet.reduce((prev: boolean, item: any) => {\n                return !!(prev && item.representation && item.representation.length)\n            }, true);\n        }\n        return false;\n    }\n\n    /**\n     * 构造函数，解析传入的manifest\n     * @param manifest las manifest\n     */\n    constructor(manifest: AbrManifestData) {\n        if (AbrManifest.verify(manifest)) {\n            manifest.adaptationSet[0].representation.forEach((item, index) => {\n                let level = new AbrLevel(item.url);\n                level.id = item.id || 0;\n                level.maxBitrate = item.maxBitrate || 0;\n                level.avgBitrate = item.avgBitrate || 0;\n                level.bitrate = item.avgBitrate || level.maxBitrate;\n                level.qualityType = item.qualityType || '';\n                level.qualityTypeName = item.qualityTypeName || '';\n                level.codec = item.codec || '';\n                if (level.codec) {\n                    const codecs = parseCodecStr(level.codec);\n                    level.audioCodec = codecs.audio;\n                    level.videoCodec = codecs.video;\n                }\n                level.hidden = item.hidden || false;\n                level.disabledFromAdaptive = item.disabledFromAdaptive || item.disabledFromAdaptive;\n                level.defaultSelected = item.defaultSelected || false;\n                this._levels.push(level);\n\n                if (!level.disabledFromAdaptive) {\n                    this._abrLevels.push(index);\n                }\n                if (level.defaultSelected && typeof this._default === 'undefined') {\n                    this._default = index;\n                }\n            });\n            this._levels.sort((a, b) => {\n                return a.bitrate - b.bitrate;\n            });\n        } else {\n            return;\n        }\n    }\n\n    /**\n     * 码率列表\n     */\n    public get levels(): AbrLevel[] {\n        return this._levels;\n    }\n\n    /**\n     * 可用于自适应切换的码率index列表\n     */\n    public get abrLevels(): number[] {\n        return this._abrLevels;\n    }\n\n    /**\n     * 默认起播清晰度\n     */\n    public get default(): number {\n        return this._default || 0;\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:16 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:16 \n * 封装的fetch\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoaderContext } from '../types/io';\n\nexport default class FetchLoader implements IInternalLoader<ILoaderContext> {\n    public tag: string = 'fetch';\n    private _context!: ILoaderContext;\n    private _callbacks: IInternalLoaderCallback<ILoaderContext> | null = null;\n    private _controller: AbortController | null = null;\n    private _reader: ReadableStreamReader | null = null;\n    private _abort: boolean = false;\n\n    /**\n     * broswer is support moz-chunk\n     * @returns 是否支持\n     */\n    static isSupport(): boolean {\n        if (self.fetch && self.ReadableStream) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * 开始加载\n     * @param context context\n     * @param callbacks 回调\n     */\n    load(context: ILoaderContext, callbacks: IInternalLoaderCallback<ILoaderContext>) {\n        this._context = context;\n        this._callbacks = callbacks;\n\n        const reqHeaders = new Headers();\n        if (context.headers) {\n            context.headers.forEach(element => {\n                reqHeaders.append(element.header, element.value);\n            });\n        }\n        const params: RequestInit = {\n            method: 'GET',\n            headers: reqHeaders,\n            mode: 'cors',\n            cache: 'default',\n            referrerPolicy: 'no-referrer-when-downgrade',\n            signal: this._getAbortSignal()\n        };\n        if (context.credentials) {\n            params.credentials = 'include';\n        }\n        fetch(context.url, params)\n            .then(res => {\n                context.responseUrl = res.url;\n                context.responseHeader = res.headers;\n                if (this._callbacks && this._callbacks.onConnect) {\n                    this._callbacks.onConnect(res.status);\n                }\n                if (res.ok) {\n                    // 兼容AbortController不可用\n                    if (this._abort) {\n                        if (res.body) {\n                            res.body.getReader().cancel();\n                        }\n                        return;\n                    }\n                    if (context.responseType === 'arraybuffer') {\n                        if (context.progress) {\n                            if (res.body) {\n                                this._reader = res.body.getReader();\n                                this._pump(this._reader);\n                            }\n                            return;\n                        }\n                        res.arrayBuffer().then(responseData => {\n                            this._onEnd(context, responseData);\n                        });\n                        return;\n                    }\n                    res.text().then(responseData => {\n                        this._onEnd(context, responseData);\n                    });\n                    return;\n                }\n                const error = new Error(res.status + ' ' + res.statusText);\n                this._onError(error);\n                return;\n            })\n            .catch(e => {\n                // 忽略AbortError，避免与timeout手动abort冲突\n                if (e.name !== 'AbortError') {\n                    this._onError(e);\n                }\n            });\n    }\n\n    abort() {\n        if (this._controller) {\n            this._controller.abort();\n        } else if (this._reader) {\n            this._reader.cancel();\n            this._reader = null;\n        }\n        this._abort = true;\n    }\n\n    destroy() {\n        this._callbacks = null;\n        this.abort();\n    }\n\n    _onProgress(context: ILoaderContext, chunk: ArrayBuffer) {\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(chunk);\n        }\n    }\n\n    _onEnd(context: ILoaderContext, responseData: ArrayBuffer | string | null) {\n        if (this._callbacks && this._callbacks.onEnd) {\n            this._reader = null;\n            this._controller = null;\n            this._callbacks.onEnd(responseData);\n        }\n    }\n\n    _onError(e: Error) {\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(e);\n        }\n    }\n\n    /**\n     * pump data\n     * @param reader 读取数据\n     * @private\n     */\n    _pump(reader: ReadableStreamReader) {\n        reader\n            .read()\n            .then(result => {\n                if (this._abort) {\n                    reader.cancel();\n                    return null;\n                }\n                if (result.done) {\n                    this._onEnd(this._context, null);\n                    return null;\n                }\n                const chunk = result.value.buffer;\n                this._onProgress(this._context, chunk);\n                return this._pump(reader);\n            })\n            .catch((e: Error) => {\n                if (e.name !== 'AbortError') {\n                    this._onError(e);\n                }\n            });\n    }\n\n    _getAbortSignal(): AbortSignal | null {\n        try {\n            if (AbortController) {\n                this._controller = new AbortController();\n                return this._controller.signal;\n            }\n        } catch (e) {\n            return null;\n        }\n        return null;\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:38 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:38 \n * 封装的xhr\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoaderContext } from '../types/io';\nexport enum XHR_TYPE {\n    MOZ_CHUNK = 'moz-chunked-arraybuffer',\n    MS_STREAM = 'ms-stream',\n    UNKNOW = 'unknow',\n    UNSUPPORT = ''\n}\n\n/**\n * XhrLoader\n * @class XhrLoader\n */\nexport class XHR implements IInternalLoader<ILoaderContext> {\n    private static supportChunk: XHR_TYPE = XHR_TYPE.UNKNOW;\n\n    public tag: string = 'xhr';\n    private _xhr: XMLHttpRequest | null = null;\n    private _context!: ILoaderContext;\n    private _callbacks: IInternalLoaderCallback<ILoaderContext> | null = null;\n    private _reader: MSStreamReader | null = null;\n    private _msBufferOffset: number = 0;\n    private _msBufferUpper: number = 16 * 1024 * 1024; // 16MB\n    private _progress: XHR_TYPE = XHR_TYPE.UNKNOW;\n\n    static isSupportChunk() {\n        if (XHR.supportChunk !== XHR_TYPE.UNKNOW) {\n            return XHR.supportChunk;\n        }\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            (xhr.responseType as any) = XHR_TYPE.MOZ_CHUNK;\n            if ((xhr.responseType as any) === XHR_TYPE.MOZ_CHUNK) {\n                XHR.supportChunk = XHR_TYPE.MOZ_CHUNK;\n                return XHR.supportChunk;\n            }\n        } catch (e) {\n            XHR.supportChunk = XHR_TYPE.UNSUPPORT;\n        }\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            (xhr.responseType as any) = XHR_TYPE.MS_STREAM;\n            if ((xhr.responseType as any) === XHR_TYPE.MS_STREAM) {\n                XHR.supportChunk = XHR_TYPE.MS_STREAM;\n                return XHR.supportChunk;\n            }\n        } catch (e) {\n            XHR.supportChunk = XHR_TYPE.UNSUPPORT;\n        }\n        return XHR_TYPE.UNSUPPORT;\n    }\n\n    constructor() {\n        this._xhr = null;\n        this._msBufferOffset = 0;\n    }\n\n    /**\n     * 开始加载\n     * @param context\n     * @param callbacks\n     */\n    load(context: ILoaderContext, callbacks: IInternalLoaderCallback<ILoaderContext>) {\n        this._callbacks = callbacks;\n        this._context = context;\n        this._progress = XHR_TYPE.UNSUPPORT;\n        if (context.progress && context.responseType === 'arraybuffer') {\n            this._progress = XHR.isSupportChunk();\n            if (this._progress === XHR_TYPE.MS_STREAM) {\n                const reader = this._reader = new (self as any).MSStreamReader();\n                reader.onprogress = this._msrOnProgress.bind(this);\n                reader.onload = this._onLoadEnd.bind(this);\n                reader.onerror = this._onError.bind(this);\n            }\n        }\n\n        const xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', this._context.url, true);\n        // arraybuffer类型尝试使用chunk\n        if (this._progress === XHR_TYPE.MOZ_CHUNK) {\n            (xhr.responseType as any) = XHR_TYPE.MOZ_CHUNK;\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onload = this._onLoadEnd.bind(this);\n        } else if (this._progress === XHR_TYPE.MS_STREAM) {\n            (xhr.responseType as any) = XHR_TYPE.MS_STREAM;\n        } else {\n            (xhr.responseType as any) = context.responseType || 'arraybuffer';\n            xhr.onload = this._onLoadEnd.bind(this);\n        }\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onerror = this._onError.bind(this);\n        xhr.withCredentials = !!context.credentials;\n\n        xhr.send();\n    }\n\n    /**\n     * abort request\n     */\n    abort() {\n        if (this._reader) {\n            // 0 EMPTY 1 LOADING 2 DONE\n            if (this._reader.readyState === 1) {\n                this._reader.abort();\n            }\n            this._reader.onprogress = null;\n            this._reader.onload = null;\n            this._reader.onerror = null;\n            this._reader = null;\n        }\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr.abort();\n            this._xhr = null;\n        }\n    }\n\n    /**\n     * destroy xhr Object clean cache\n     */\n    destroy() {\n        this._callbacks = null;\n        this.abort();\n    }\n\n    _onReadyStateChange(e: Event) {\n        if (!this._xhr) {\n            return;\n        }\n        const xhr = this._xhr;\n        if (xhr.readyState === 2) {\n            this._context.responseUrl = xhr.responseURL;\n            this._context.responseHeader = xhr.getAllResponseHeaders();\n            if (this._callbacks && this._callbacks.onConnect) {\n                this._callbacks.onConnect(xhr.status);\n            }\n            if (xhr.status < 200 || xhr.status > 299) {\n                this._onError(new Error('xhr error'));\n            }\n        } else if (xhr.readyState === 3) {\n            if (this._reader && this._reader.readyState === 0 && xhr.status >= 200 && xhr.status <= 299) {\n                this._reader.readAsArrayBuffer(xhr.response);\n            }\n        }\n    }\n\n    /**\n     * xhr onProgress\n     * @param {*} e xhr回调数据\n     */\n    _onProgress(e: Event) {\n        if (!this._xhr) {\n            return;\n        }\n        const chunk = this._xhr.response;\n        if (this._callbacks && this._callbacks.onProgress && chunk) {\n            this._callbacks.onProgress(chunk);\n        }\n    }\n\n    /**\n     * ms-stream progress\n     * @param {*} e MSStreamReader回调\n     */\n    _msrOnProgress(e: any) {\n        const reader = e.target;\n        const buffer = reader.result;\n        if (!buffer) {\n            // result may be null, workaround for buggy M$\n            this._onError(new Error('ms buffer null'));\n            return;\n        }\n\n        const chunk = buffer.slice(this._msBufferOffset);\n        this._msBufferOffset = buffer.byteLength;\n\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(chunk);\n        }\n\n        if (buffer.byteLength >= this._msBufferUpper) {\n            this._onError(new Error('ms buffer too large'));\n        }\n    }\n\n    /**\n     * xhr onLoadEnd\n     * @param {*} e xhr回调数据\n     */\n    _onLoadEnd(e: ProgressEvent) {\n        let data = null;\n        const target = this._xhr;\n        if (!this._progress && target) {\n            data = target.response;\n        }\n        if (this._callbacks) {\n            this._callbacks.onEnd(data);\n        }\n    }\n\n    /**\n     * xhr onXhrError\n     * @param {*} e xhr回调数据\n     * @private\n     */\n    _onError(e: any) {\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(e);\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:30 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:30 \n * 下载器\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext, ILoaderStats } from '../types/io';\nimport { Log } from '../utils/log';\nimport FetchLoader from './fetch';\nimport { XHR } from './xhr';\n\nlet ChunkLoader: any;\n\n/**\n * 加载器\n */\nexport default class Loader<T extends ILoaderContext> implements ILoader<T> {\n    public tag: string = 'loader';\n    private _context!: T;\n    private _loader?: IInternalLoader<T>;\n    private _callbacks?: ILoaderCallback<T>;\n    private _config: ILoaderConfig;\n    private _loaderCallback!: IInternalLoaderCallback<T>;\n    private _stats!: ILoaderStats;\n    private _retryDelay: number = 0;\n    private _loading: boolean = false;\n    private _aborted: boolean = false;\n    private _requestTimeout: any;\n    private _transTimer: any;\n    private _retryTimeout: any;\n    private _progressTime: number = 0;\n\n    constructor() {\n        this._config = {\n            useFetch: false,\n            connectionTimeout: 0,\n            transmissionTimeout: 0,\n            maxRetry: 0,\n            retryDelay: 0\n        };\n        this._loaderCallback = {\n            onConnect: this._onConnect,\n            onProgress: this._onProgress,\n            onEnd: this._onEnd,\n            onError: this._onError\n        };\n    }\n\n    /**\n     * 开始下载\n     * @param context 下载上下文信息\n     * @param callbacks 下载回调\n     * @param config 下载配置\n     */\n    public load(context: T, callbacks: ILoaderCallback<T>, config: ILoaderConfig): void {\n        this._context = context;\n        this._callbacks = callbacks;\n        this._config = config || this._config;\n\n        this._stats = {\n            requestStartTime: performance.now(),\n            retryCount: 0,\n            loadedSize: 0,\n            httpStatusCode: 0,\n            firstDataTime: 0,\n            loadedTime: 0,\n            totalSize: 0,\n            errorMessage: '',\n            fatalError: false\n        };\n        if (this._config.retryDelay) {\n            this._retryDelay = this._config.retryDelay;\n        }\n\n        this._loadInternal();\n    }\n\n    /**\n     * 取消当前下载\n     */\n    public abort(): void {\n        this._stopTimer();\n        this._abortInternal();\n    }\n\n    /**\n     * 销毁loader\n     */\n    public destroy(): void {\n        this._stopTimer();\n        this._abortInternal();\n        this._destroyInternalLoader();\n        this._callbacks = undefined;\n    }\n\n    /**\n     * 下载状态信息\n     */\n    public get stats(): ILoaderStats {\n        return this._stats;\n    }\n\n    /**\n     * 下载上下文\n     */\n    public get context(): T {\n        return this._context;\n    }\n\n    /**\n     * 获取流式加载Loader类\n     * @param useFetch 是否使用fetch\n     * @returns class\n     */\n    private _getInternalLoader(useFetch: boolean) {\n        if (typeof ChunkLoader !== 'undefined') {\n            return ChunkLoader;\n        }\n        ChunkLoader = null;\n        if (FetchLoader.isSupport()) {\n            ChunkLoader = FetchLoader;\n        } else if (XHR.isSupportChunk()) {\n            ChunkLoader = XHR;\n        }\n        return ChunkLoader;\n    }\n\n    /**\n     * 销毁内部loader\n     */\n    private _destroyInternalLoader(): void {\n        if (this._loader) {\n            this._loader.destroy();\n            this._loader = undefined;\n        }\n    }\n\n    /**\n     * 开始加载，非流式处理优先使用xhr\n     */\n    private _loadInternal(): void {\n        this._loading = true;\n        this._aborted = false;\n        const stats = this._stats;\n        stats.httpStatusCode = 0;\n        stats.firstDataTime = 0;\n        stats.loadedSize = 0;\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = null;\n        }\n        if (this._context.progress) {\n            this._loader = new (this._getInternalLoader(!!this._config.useFetch))();\n        } else {\n            this._loader = new XHR();\n        }\n        if (!this._loader) {\n            return;\n        }\n        // 连接超时\n        if (this._config.connectionTimeout) {\n            this._requestTimeout = setTimeout(this._onTimeout, this._config.connectionTimeout);\n        }\n        this._loader.load(this._context, this._loaderCallback);\n    }\n\n    private _abortInternal(): void {\n        if (this._callbacks && this._callbacks.onAbort && !this._aborted && this._loading) {\n            this._callbacks.onAbort(this);\n        }\n        this._aborted = true;\n        if (this._loader) {\n            this._loader.abort();\n        }\n    }\n\n    /**\n     * 停止所有计时器\n     * 连接超时、重试延迟、传输超时\n     */\n    private _stopTimer(): void {\n        if (this._requestTimeout) {\n            clearTimeout(this._requestTimeout);\n            this._requestTimeout = null;\n        }\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = null;\n        }\n        this._stopTransmissionTimer();\n    }\n\n    private _onConnect = (status: number): void => {\n        if (this._requestTimeout) {\n            clearTimeout(this._requestTimeout);\n            this._requestTimeout = null;\n        }\n        this._startTransmissionTimer();\n        this._stats.httpStatusCode = status;\n        this._stats.firstDataTime = Math.max(this._stats.requestStartTime, performance.now());\n    }\n    private _onProgress = (chunk: ArrayBuffer): void => {\n        const stats = this._stats;\n        this._progressTime = performance.now();\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(this, chunk);\n        }\n        stats.loadedSize += chunk.byteLength;\n    }\n\n    private _onEnd = (responseData: string | ArrayBuffer | null): void => {\n        this._stopTimer();\n        const stats = this._stats;\n        if (responseData) {\n            if (typeof responseData === 'string') {\n                stats.totalSize = stats.loadedSize = responseData.length || 0;\n            } else {\n                stats.totalSize = stats.loadedSize = responseData.byteLength || 0;\n            }\n        } else {\n            stats.totalSize = stats.loadedSize;\n        }\n        stats.loadedTime = Math.max(stats.firstDataTime, performance.now());\n        this._loading = false;\n        if (this._callbacks) {\n            this._callbacks.onEnd(this, responseData);\n        }\n    }\n\n    private _onError = (e: Error): void => {\n        Log.i(this.tag, e);\n        this._stopTimer();\n        this._destroyInternalLoader();\n        const stats = this._stats;\n        const config = this._config;\n        this._loading = false;\n\n        stats.fatalError = !config.maxRetry || (stats.retryCount >= config.maxRetry || !config.maxRetry);\n        stats.errorMessage = e.message || 'load error';\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(this);\n        }\n        if (stats.fatalError) {\n            return;\n        }\n        stats.retryCount++;\n        if (this._callbacks) {\n            if (this._retryDelay) {\n                this._retryTimeout = setTimeout(this._loadInternal.bind(this), this._retryDelay);\n                this._retryDelay = 2 * this._retryDelay;\n            } else {\n                this._loadInternal();\n            }\n        }\n    }\n\n    /**\n     * 处理超时\n     */\n    private _onTimeout = (): void => {\n        this._loading = false;\n        this._abortInternal();\n        const e = new Error('timeout');\n        this._onError(e);\n    }\n\n    /**\n     * 开始传输超时计时器\n     */\n    private _startTransmissionTimer(): void {\n        this._stopTransmissionTimer();\n        this._progressTime = performance.now();\n        let timeout = this._config.transmissionTimeout || 0;\n        if (timeout) {\n            this._transTimer = setInterval(() => {\n                if (performance.now() - this._progressTime > timeout) {\n                    this._onTimeout();\n                }\n            }, 1000);\n        }\n    }\n\n    /**\n     * 停止传输超时计时器\n     */\n    private _stopTransmissionTimer(): void {\n        if (this._transTimer) {\n            clearInterval(this._transTimer);\n            this._transTimer = null;\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:57 \n * 测速工具\n */\nimport Loader from \"../io/loader\";\nimport { ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext } from \"../types/io\";\n\nexport type SpeedTestContext = {\n    url: string,\n    timeout: number,\n};\n\n/**\n * 测速结果\n */\nexport type SpeedTestResult = {\n    // 下载数据大小\n    loaded: number,\n    // 测试总耗时\n    duration: number,\n    // 首包时间点\n    firstPackageDuration: number,\n    // 测试成功\n    succeeded: boolean,\n};\n\nexport type SpeedTestEnded = (context: SpeedTestContext, result: SpeedTestResult) => void;\n\nexport interface ISpeedTestCallback {\n    onEnd: SpeedTestEnded;\n}\n\n// 单次测速用时上限\nconst MAX_TIMEOUT = 10000;\n\n/**\n * 测速工具\n * 测速时间上线10s\n */\nexport class SpeedTest {\n    private _context?: SpeedTestContext;\n    private _result?: SpeedTestResult;\n    private _callback?: ISpeedTestCallback;\n\n    private _loader?: ILoader<ILoaderContext>;\n    private _loaderConf: ILoaderConfig;\n    private _loaderCallbacks: ILoaderCallback<ILoaderContext>;\n\n    private _timer: any;\n    private _startTime: number = 0;\n\n    constructor() {\n        this._loaderConf = {\n            connectionTimeout: 0,\n            transmissionTimeout: 0,\n            maxRetry: 0,\n            retryDelay: 0,\n            useFetch: true\n        };\n\n        this._loaderCallbacks = {\n            onProgress: this._onProgress,\n            onError: this._onLoaderError,\n            onEnd: this._onLoaderEnd,\n            onAbort: this._onAbort,\n        };\n\n    }\n\n    /**\n     * 开始测速\n     * @param context 测速上下文\n     * @param callback 测速回调\n     */\n    public start(context: SpeedTestContext, callback: ISpeedTestCallback): void {\n        this._context = context;\n        this._callback = callback;\n        this._result = {\n            loaded: 0,\n            duration: 0,\n            firstPackageDuration: 0,\n            succeeded: true,\n        }\n        this._startTime = performance.now();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n        const timeout = Math.min(MAX_TIMEOUT, context.timeout);\n        this._loaderConf.connectionTimeout = timeout;\n        const loaderContext = {\n            url: context.url,\n            progress: true,\n            responseType: 'arraybuffer'\n        };\n        this._loader = new Loader();\n        this._startTimer(timeout);\n        this._loader.load(loaderContext, this._loaderCallbacks, this._loaderConf);\n    }\n\n    /**\n     * 取消测速\n     */\n    public cancel() {\n        this._stopTimer();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy() {\n        this.cancel();\n    }\n\n    /**\n     * 开始测速计时\n     * @param timeout 时长\n     */\n    private _startTimer(timeout: number) {\n        this._timer = setTimeout(() => this._testEnd(), timeout);\n    }\n\n    /**\n     * 停止测速计时器\n     */\n    private _stopTimer(): void {\n        clearTimeout(this._timer);\n    }\n\n    /**\n     * 测试结束，停止加载并回调\n     */\n    private _testEnd = (): void => {\n        this._stopTimer();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n        if (this._context && this._result && this._callback) {\n            this._result.firstPackageDuration = Math.round(this._result.firstPackageDuration);\n            this._result.duration = Math.round(performance.now() - this._startTime);\n            this._callback.onEnd(this._context, this._result);\n        }\n    }\n\n    private _onProgress = (target: ILoader<ILoaderContext>, data: string | ArrayBuffer): void => {\n        if (this._result) {\n            this._result.firstPackageDuration = target.stats.firstDataTime ? target.stats.firstDataTime - target.stats.requestStartTime : 0;\n            this._result.loaded = target.stats.loadedSize;\n        }\n    }\n\n    private _onLoaderError = (): void => {\n        if (this._result) {\n            this._result.succeeded = false;\n        }\n        this._testEnd();\n    }\n\n    private _onLoaderEnd = (): void => {\n        this._testEnd();\n    }\n    private _onAbort = (): void => { }\n}\n","/*\n * @Author: wuwenjun \n * @Date: 2020-06-09 11:54:34 \n * @Last Modified by:   wuwenjun \n * @Last Modified time: 2020-06-09 11:54:34 \n * 自适应算法\n */\nimport { EventEmitter } from 'events';\nimport { Log } from '../utils/log';\nimport AbrLevel from './abr-level';\nimport { AbrManifest } from './abr-manifest';\nimport { IAbrAlgorithm, RealtimeStatus } from '../types/abr';\nimport { SpeedTest, SpeedTestContext, SpeedTestResult } from \"../utils/speed-test\";\n\ntype AdaptiveConfig = {\n    stableBufferDiffThresholdSecond: number;\n    stableBufferIntervalMs: number;\n    speedTestTimeoutMs: number;\n    generateSpeedGapMs: number;\n    bufferCheckIntervalMs: number,\n    smoothedSpeedUtilizationRatio: number;\n    smallSpeedToBitrateRatio: number;\n    enoughSpeedToBitrateRatio: number;\n    bufferLowerLimitSecond: number;\n    recentBufferedSize: number;\n    smoothedSpeedRatio: number;\n    isSpeedFullyUsed: boolean;\n};\n\nconst tag = 'algorithm-simple';\n\nconst CONFIG: AdaptiveConfig = {\n    stableBufferDiffThresholdSecond: 0.15,\n    stableBufferIntervalMs: 2000,\n    speedTestTimeoutMs: 500,\n    generateSpeedGapMs: 3000,\n    bufferCheckIntervalMs: 500,\n    smoothedSpeedUtilizationRatio: 0.8,\n    smallSpeedToBitrateRatio: 0.4,\n    enoughSpeedToBitrateRatio: 0.9,\n    bufferLowerLimitSecond: 0.6,\n    recentBufferedSize: 16,\n    smoothedSpeedRatio: 0.9,\n    isSpeedFullyUsed: true,\n};\n\n/**\n * HLS自适应码率算法入口\n */\nclass AbrAlgorithmSimple extends EventEmitter implements IAbrAlgorithm {\n    private _conf!: AdaptiveConfig;\n    private _pastBuffer!: number[];\n    private _levels!: AbrLevel[];\n    private _current: number = 0; // 当前正在加载的流index\n    private _next: number = 0; // 下一个切换的流index\n    private _stableBufferStartTime: number = performance.now();\n    private _speedTester: SpeedTest = new SpeedTest();\n    private _generatedSpeed: number = 0;\n    private _lastCheckBuffer: number = 0;\n    private _lastSpeed: number = 0;\n    private _timer: any;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 初始化，并写入初始码率\n     * @param manifest 流信息\n     * @param config 算法配置\n     */\n    public init(manifest: AbrManifest, status?: RealtimeStatus, config?: any): void {\n        this._conf = Object.assign({}, CONFIG);\n        Object.assign(this._conf, config);\n        Log.i(tag, 'init', manifest, config, this._conf);\n\n        this._levels = manifest.levels.slice(0);\n        this._next = manifest.default;\n        this._pastBuffer = [0.1];\n        if (status) {\n            this._timer = setInterval(() => { this._checkBuffer(status); }, this._conf.bufferCheckIntervalMs);\n        }\n    }\n\n    private _updateStableBuffer(buffered: number) {\n        const diff = buffered - this._lastCheckBuffer;\n        const diffRatio = diff / buffered;\n        const now = performance.now();\n        if (diff < -this._conf.stableBufferDiffThresholdSecond || diffRatio < -0.2) {\n            Log.v(tag, `bufferDiffDown: ${diff.toFixed(2)}s, diffRatio: ${diffRatio.toFixed(2)}`);\n            this._stableBufferStartTime = Math.max(now, this._stableBufferStartTime);\n        }\n        if (diff > this._conf.stableBufferDiffThresholdSecond\n            && now - this._stableBufferStartTime + this._conf.bufferCheckIntervalMs > this._conf.stableBufferIntervalMs) {\n            this._stableBufferStartTime = Math.max(\n                now - this._conf.bufferCheckIntervalMs * 2,\n                this._stableBufferStartTime + this._conf.bufferCheckIntervalMs * 2\n            );\n            Log.v(tag, `bufferDiffUp: ${diff.toFixed(2)}s`);\n        }\n        this._lastCheckBuffer = buffered;\n        return now - this._stableBufferStartTime > this._conf.stableBufferIntervalMs;\n    }\n\n    private _isSpeedFullyUsed() {\n        return this._conf.isSpeedFullyUsed;\n    }\n\n    /**\n     * 周期检查buffer水平和瞬时带宽，判断是否开启测速\n     * @param status 获取buffer和下载信息\n     */\n    private _checkBuffer(status: RealtimeStatus) {\n        const buffered = status.bufferedSec();\n        const isBufferStable = this._updateStableBuffer(buffered);\n        if (this._isSpeedFullyUsed()) {\n            if (isBufferStable && this._current + 1 < this._levels.length) {\n                this._generatedSpeed = this._levels[this._current + 1].bitrate;\n            } else {\n                this._generatedSpeed = 0;\n            }\n        } else if (isBufferStable && this._current + 1 < this._levels.length) {\n            this._startTesting(status);\n            this._stableBufferStartTime = performance.now() + this._conf.generateSpeedGapMs;\n        }\n        this._pastBuffer.push(buffered);\n        if (this._pastBuffer.length > this._conf.recentBufferedSize) {\n            this._pastBuffer.shift();\n        }\n\n    }\n\n    /**\n     * 基于下一档码率，开启测速，并更新_speedTestResult\n     * @param status 获取buffer和下载信息\n     */\n    private _startTesting(status: RealtimeStatus) {\n        Log.v(tag, `start speed testing on index: ${this._current + 1}`);\n        const lastDownloadSize = status.downloadSize();\n        const testedBitrate = this._levels[this._current + 1].bitrate;\n        this._speedTester.start(\n            { url: this._levels[this._current + 1].url, timeout: this._conf.speedTestTimeoutMs },\n            {\n                onEnd: (context: SpeedTestContext, result: SpeedTestResult) => {\n                    const originalDownloadSize = status.downloadSize() - lastDownloadSize;\n                    if (result.succeeded && result.duration > 0 && result.firstPackageDuration > 0) {\n                        const testedSpeed = (originalDownloadSize + result.loaded) * 8 / result.duration;\n                        Log.v(tag, `testSpeed: ${testedSpeed.toFixed(0)}`);\n                        if (testedSpeed >= testedBitrate) {\n                            this._generatedSpeed = testedBitrate;\n                        }\n                    }\n                    Log.v(tag, `succeeded: ${result.succeeded}, firstPackageDuration: ${result.firstPackageDuration}, originalDownloadSize: ${originalDownloadSize}, downloadSize: ${result.loaded}, downloadTime: ${result.duration}`)\n                }\n            }\n        );\n    }\n\n    /**\n     * 设置码率列表中的清晰度是否可用\n     * @param list 码率index列表\n     */\n    public setAvailableBitrates(list: number[]): void { }\n\n    /**\n     * 获取下一个清晰度\n     * @returns {number} 下个清晰度index\n     */\n    public get nextLevel(): number {\n        Log.v(tag, `nextLevel: ${this._next}`);\n        return this._next;\n    }\n\n    /**\n     * 收到关键帧\n     * @param buffered buffer长度（秒）\n     * @param size 下载长度\n     * @param time 下载耗时（秒）\n     */\n    public onGOP(buffered: number, size: number, time: number): void {\n        // Byte/s -> kbps: {x} * 1000 * 8 / 1024;\n        let speed = (size / Math.max(time, 0.05)) * 8 / 1024;\n        Log.v(tag, `buffered: ${buffered.toFixed(2)}, size: ${size}, time: ${time.toFixed(2)}`)\n        this._next = this._nextRateIndex(speed, buffered);\n    }\n\n    /**\n     * 当开始加载新流\n     * @param index 清晰度index\n     */\n    public onLevelLoad(index: number): void {\n        this._current = Math.max(0, index);\n    }\n\n    public destroy(): void {\n        this._speedTester.destroy();\n        clearInterval(this._timer);\n    }\n\n    private _quantization(speed: number): number {\n        let index = 0;\n        for (let i = this._levels.length - 1; i >= 0; i--) {\n            if (speed >= this._levels[i].bitrate) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    /**\n     * 计算下一个使用的码率\n     * @param speed 下载速度 kbps\n     * @param buffered 当前buffer ms\n     */\n    private _nextRateIndex(speed: number, buffered: number): number {\n        let index = this._nextRateBySpeedAndBuffered(speed, buffered);\n        if (index != this._current) {\n            this._stableBufferStartTime = performance.now() + this._conf.generateSpeedGapMs;\n        }\n        if (index < this._current) {\n            this._speedTester.cancel();\n            this._generatedSpeed = 0;\n            this._lastSpeed = speed;\n            this._pastBuffer = [buffered];\n        } else {\n            this._lastSpeed = this._getSmoothedSpeed(speed);\n        }\n        return index;\n    }\n\n    /**\n     * 获取平滑带宽\n     * @param speed 下载速度 kbps\n     */\n    private _getSmoothedSpeed(speed: number) {\n        if (this._lastSpeed > 0) {\n            return speed * (1 - this._conf.smoothedSpeedRatio) + this._lastSpeed * this._conf.smoothedSpeedRatio;\n        }\n        return speed;\n    }\n\n    private _getPredictedBuffer(buffered: number) {\n        const pastBuffer = Math.max(...this._pastBuffer);\n        return buffered + (buffered - pastBuffer);\n    }\n\n    private _getBufferSpeed(buffered: number) {\n        const pastBuffer = Math.max(...this._pastBuffer);\n        const bufferSpeedRatio = 1 + (buffered - pastBuffer) / pastBuffer;\n        return bufferSpeedRatio * this._levels[this._current].bitrate;\n    }\n\n    private _isSpeedTooSmall(speed: number) {\n        return speed / this._levels[this._current].bitrate < this._conf.smallSpeedToBitrateRatio;\n    }\n\n    private _isSpeedEnough(speed: number) {\n        return speed / this._levels[this._current].bitrate > this._conf.enoughSpeedToBitrateRatio;\n    }\n\n    /**\n     * 根据下载速度和buffer长度计算下一个码率\n     * @param speed 下载速度 kbps\n     * @param buffered 当前buffer ms\n     */\n    private _nextRateBySpeedAndBuffered(\n        speed: number,\n        buffered: number\n    ): number {\n        const bufferSpeed = this._getBufferSpeed(buffered);\n        const smoothedSpeed = this._getSmoothedSpeed(speed);\n        Log.v(tag, `gopSpeed: ${speed.toFixed(0)}, smoothedSpeed: ${smoothedSpeed.toFixed(0)}`);\n\n        const predictedBuffered = this._getPredictedBuffer(buffered);\n        Log.v(tag, `bufferSpeed: ${bufferSpeed.toFixed(0)}, predictedBuffered: ${predictedBuffered.toFixed(1)}`);\n\n        let nextIndex = this._current;\n        if (predictedBuffered < this._conf.bufferLowerLimitSecond || this._isSpeedTooSmall(bufferSpeed)) {\n            nextIndex = Math.min(this._current, this._quantization(bufferSpeed));\n        } else if (this._isSpeedEnough(bufferSpeed)) {\n            if (this._generatedSpeed > 0) {\n                Log.i(tag, `generatedSpeed used`);\n                nextIndex = this._quantization(this._generatedSpeed);\n                this._generatedSpeed = 0;\n            } else {\n                nextIndex = this._quantization(smoothedSpeed * this._conf.smoothedSpeedUtilizationRatio);\n            }\n            nextIndex = Math.min(this._current + 1, Math.max(nextIndex, this._current));\n        }\n        return nextIndex;\n    }\n}\n\nexport default AbrAlgorithmSimple;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:31 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:31 \n * flv多码率处理\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../core/events';\nimport Media from '../core/media';\nimport { IAbrAlgorithm, RealtimeStatus } from '../types/abr';\nimport { AbrConfig, SmoothLevelSwitchInfo } from '../types/core';\nimport AbrAlgorithmSimple from './abr-algorithm-simple';\nimport { abrGetUrl } from './abr-get-url';\nimport AbrLevel from './abr-level';\nimport { AbrManifest } from './abr-manifest';\n\n/**\n * 多码率流处理\n * 自动+多清晰度切换\n */\nclass Multirate {\n    private _eventEmitter: EventEmitter;\n    private _config: AbrConfig;\n    private _media: Media;\n    private _next: number = 0;\n    private _downloadSizeTotal: number = 0;\n    private _downloadSize: number = 0;\n    private _downloadStartTime: number = 0;\n    private _keyCount: number = 0;\n    private _index: number = 0;\n    private _alg: IAbrAlgorithm;\n    private _manifest: AbrManifest;\n    private _autoLevelEnabled: boolean = false;\n\n    /**\n     * 构造函数\n     * @param eventEmitter 事件抛出\n     * @param config 配置\n     * @param media media\n     * @param src manifest/url\n     */\n    constructor(eventEmitter: EventEmitter, config: AbrConfig, media: Media, src: any) {\n        this._eventEmitter = eventEmitter;\n        this._config = config;\n        this._media = media;\n        this._manifest = new AbrManifest(src);\n        let status: RealtimeStatus = {\n            bufferedSec: () => { return this._media.bufferedSec(); },\n            downloadSize: () => { return this._downloadSizeTotal; }\n        }\n        this._alg = new AbrAlgorithmSimple();\n        this._alg.init(this._manifest, status);\n        this._autoLevelEnabled = this._manifest.abrLevels.length > 0\n    }\n\n    /**\n     * 初始化flv多码率\n     */\n    public init(): void {\n        this._downloadSizeTotal = 0;\n        this._downloadSize = 0;\n        this._downloadStartTime = performance.now();\n\n        // 当前流收到I帧计数\n        this._keyCount = 0;\n        this._index = this._next = 0;\n\n        if (this.current) {\n            if (this._autoLevelEnabled) {\n                this._index = this._next = this._alg.nextLevel;\n            }\n            this._eventEmitter.emit(LasEvents.MANIFEST_PARSED, {\n                levels: this._manifest.levels,\n                currentLevel: this._index\n            });\n        }\n    }\n\n    /**\n     * 回收\n     */\n    public destory(): void {\n        if (this._alg) {\n            this._alg.destroy();\n            this._alg.removeAllListeners();\n        }\n    }\n\n    /**\n     * 有数据下载\n     * @param size 数据大小\n     */\n    public onLoaderChunk(size: number): void {\n        this._downloadSize += size;\n        this._downloadSizeTotal += size;\n    }\n\n    /**\n     * 有清晰度切换\n     * @param index 清晰度index\n     */\n    public onLevelLoad(index: number) {\n        if (this._manifest.levels.length && index >= 0 && index < this._manifest.levels.length) {\n            this._keyCount = 0;\n            this._index = index;\n            this._downloadStartTime = performance.now();\n            this._downloadSize = 0;\n            this._alg.onLevelLoad(index);\n        }\n    }\n\n    /**\n     * 处理关键帧，是否切换码率\n     * @param time flv tag timestamp\n     */\n    public onKeyFrame(time: number): SmoothLevelSwitchInfo | undefined {\n        let levels = this._manifest.levels;\n        this._keyCount++;\n\n        if ((this._alg || this._next !== this._index) && this._keyCount > 1 && levels) {\n            let next = this._index;\n            if (this._next !== this._index) {\n                // 平滑切换\n                next = this._next;\n            } else if (this._autoLevelEnabled) {\n                // 自动\n                let now = performance.now();\n                this._alg.onGOP(this._media.bufferedSec(), this._downloadSize, (now - this._downloadStartTime) / 1000);\n                this._downloadSize = 0;\n                this._downloadStartTime = now;\n                this._next = next = this._alg.nextLevel;\n            } else {\n                return;\n            }\n            // TEST:\n            // next = (this._index + 1) % levels.length;\n            if (next !== this._index) {\n                return {\n                    url: this._getRequestUrl(next, time),\n                    level: next,\n                    timestamp: time\n                }\n            }\n        }\n        return;\n    }\n\n    /**\n     * 自动码率是否为开启状态\n     */\n    public get autoLevelEnabled(): boolean {\n        return this._autoLevelEnabled;\n    }\n\n    /**\n     * 清晰度列表\n     */\n    public get levels(): AbrLevel[] {\n        return this._manifest.levels;\n    }\n\n    /**\n     * 下一个下载的流index\n     */\n    public get nextLevel(): number {\n        if (typeof this._next === 'number') {\n            return this._next;\n        } else {\n            return this._index;\n        }\n    }\n\n    /**\n     * 在下一个关键帧位置切换流\n     * 设置-1会启用自动码率\n     */\n    public set nextLevel(value: number) {\n        if (value >= 0 && this._manifest.levels.length > value) {\n            this._autoLevelEnabled = false;\n            this._next = value;\n        } else if (value === -1) {\n            this._autoLevelEnabled = true;\n        }\n    }\n\n    /**\n     * get: 当前正在下载的流index\n     */\n    public get currentLevel(): number {\n        return this._index;\n    }\n\n    /**\n     * 立即切换码率，会清空buffer并从当前播放位置所在切片开始下载新的流\n     * 设置-1会启用自动码率\n     */\n    public set currentLevel(value: number) {\n        if (value >= 0 && this._manifest.levels.length > value) {\n            this._autoLevelEnabled = false;\n            this._index = this._next = value;\n        } else if (value === -1) {\n            this._autoLevelEnabled = true;\n        }\n    }\n\n    /**\n     * 当前level\n     */\n    private get current(): AbrLevel | undefined {\n        return this._manifest.levels[this._index];\n    }\n\n    /**\n     * 获取切换flv的请求地址\n     * @param index 码率index\n     * @param spts 切换时间戳，单位毫秒。大于0：关键帧pts；小于0：直播延迟\n     */\n    private _getRequestUrl(index: number, spts?: number): string {\n        let url = '';\n        let level = this._manifest.levels[index];\n        if (level) {\n            url = level.url;\n        }\n        return abrGetUrl(url, spts || this._config.defaultLiveDelay);\n    }\n}\n\nexport default Multirate;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:54 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:54 \n * Uint8Array数据缓存\n */\nclass Cache {\n    // 100m = 104857600 = 100 * 1024 * 1024\n    public static MAX_CACHE_SIZE = 104857600;\n    public static DEFAULT_CACHE_SIZE = 3145728;\n    // 初始cache大小\n    private _size: number;\n    private _readOffset: number = 0;\n    private _writeOffset: number = 0;\n    // cache\n    private _storage: ArrayBuffer;\n    private _cache: Uint8Array;\n\n    constructor(size: number = 0) {\n        if (size > 0) {\n            this._size = size;\n        } else {\n            this._size = Cache.DEFAULT_CACHE_SIZE;\n        }\n        this._storage = new ArrayBuffer(this._size);\n        this._cache = new Uint8Array(this._storage);\n    }\n\n    /**\n     * 添加至cache\n     * @param chunk 数据\n     */\n    public put(chunk: Uint8Array): void {\n        if (this._readOffset === this._writeOffset) {\n            this._readOffset = this._writeOffset = 0;\n        }\n        if (this._writeOffset + chunk.byteLength > this._size) {\n            const expected = this._writeOffset + chunk.byteLength - this._readOffset;\n            if (expected > this._size) {\n                // 扩展\n                this._collateCache();\n                this.expandCache(expected);\n            } else {\n                // 整理buffer\n                this._collateCache();\n            }\n        }\n        this._cache.set(chunk, this._writeOffset);\n        this._writeOffset += chunk.byteLength;\n    }\n\n    /**\n     * 获取数据拷贝\n     * @param len 数据长度\n     * @returns 数据\n     */\n    public get(len: number): Uint8Array | null {\n        if (len + this._readOffset > this._writeOffset) {\n            return null;\n        }\n        let data = null;\n        if (this._cache.slice) {\n            data = this._cache.slice(this._readOffset, this._readOffset + len);\n        } else {\n            const offset = this._cache.byteOffset + this._readOffset;\n            data = new Uint8Array(this._storage.slice(offset, offset + len));\n        }\n        this._readOffset += len;\n        return data;\n    }\n\n    /**\n     * 获取数据读取Uint8Array，从cache中直接读取，异步使用可能出现故障\n     * @param len 长度\n     * @returns 数据\n     */\n    public read(len: number): Uint8Array | null {\n        if (len + this._readOffset > this._writeOffset) {\n            return null;\n        }\n        return new Uint8Array(this._storage, this._readOffset, len);\n    }\n\n    /**\n     * 后移读指针\n     * @param len 数据长度\n     */\n    public skip(len: number): void {\n        if (len + this._readOffset > this._writeOffset) {\n            return;\n        }\n        this._readOffset += len;\n    }\n\n    /**\n     * 清理\n     */\n    public clear(): void {\n        this._readOffset = this._writeOffset = 0;\n    }\n\n    /**\n     * 扩展cache，cache不足时，cache容量max(翻倍,预期)\n     * @param expected 预期最小值\n     */\n    public expandCache(expected: number = 0): void {\n        this._size = Math.max(this._size * 2, expected);\n        if (this._size >= Cache.MAX_CACHE_SIZE) {\n            throw new Error('max cache size');\n        }\n        if (this._readOffset === 0 && this._writeOffset === 0) {\n            this._storage = new ArrayBuffer(this._size);\n        } else {\n            this._storage = this._transfer(this._storage, this._size);\n        }\n        this._cache = new Uint8Array(this._storage);\n    }\n\n    /**\n     * 未读取数据长度\n     */\n    public get unreadLen(): number {\n        return this._writeOffset - this._readOffset;\n    }\n\n    /**\n     * 整理cache中的数据，抛弃已读取的数据\n     */\n    private _collateCache(): void {\n        const remain = new Uint8Array(this._storage, this._readOffset, this._writeOffset - this._readOffset);\n        this._cache.set(remain);\n        this._writeOffset -= this._readOffset;\n        this._readOffset = 0;\n    }\n\n    private _transfer(source: ArrayBuffer, length: number): ArrayBuffer {\n        if (!(source instanceof ArrayBuffer)) {\n            throw new TypeError('Source must be an instance of ArrayBuffer');\n        }\n        if (length <= source.byteLength) {\n            return source.slice(0, length);\n        }\n        const sourceView = new Uint8Array(source),\n            destView = new Uint8Array(new ArrayBuffer(length));\n        destView.set(sourceView);\n        return destView.buffer;\n    }\n}\n\nexport default Cache;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:22 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:52:22 \n * flv预处理器\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../../core/errors';\nimport LasEvents from '../../core/events';\nimport Cache from '../../io/cache';\nimport { FlvSize, FlvTag, FlvTagType } from '../../types/flv-object';\n\n/**\n * 关键帧回调方法定义\n */\nexport type FlvKeyframeCallback<T> = (time: number) => T | undefined;\n\n/**\n * 处理结果定义\n */\ntype Result<T> = {\n    list: FlvTag[];\n    callbackResult?: T;\n}\n\n/**\n * flv预处理，拆解tag，关键帧位置回调\n */\nclass FlvPreprocessor<T> {\n    private _eventEmitter: EventEmitter;\n    private _cache: Cache;\n    private _tag?: FlvTag;\n    private _result: Result<T>;\n\n    private _parseLen: number = 0;\n    private _parseFunc: Function;\n    private _onFlvKeyframe: FlvKeyframeCallback<T>;\n\n    /**\n     * 构造函数\n     * @param eventEmitter 事件派发器\n     * @param onFlvKeyframe 关键帧位置回调\n     */\n    constructor(eventEmitter: EventEmitter, onFlvKeyframe: FlvKeyframeCallback<T>) {\n        this._eventEmitter = eventEmitter;\n        this._onFlvKeyframe = onFlvKeyframe;\n        this._cache = new Cache();\n        this._parseLen = FlvSize.FLV_HEAD_LEN;\n        this._parseFunc = this._parseFlvHead;\n        this._result = { list: [] };\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset(): void {\n        this._parseLen = FlvSize.FLV_HEAD_LEN;\n        this._parseFunc = this._parseFlvHead;\n        this._cache.clear();\n        this._tag = undefined;\n        this._result.list = [];\n        this._result.callbackResult = undefined;\n    }\n\n    /**\n     * 处理数据\n     * @param input flv数据\n     */\n    public processing(input: ArrayBuffer): Result<T> {\n        this._cache.put(new Uint8Array(input));\n        while (this._cache.unreadLen > this._parseLen) {\n            this._parseFunc();\n        }\n        let data = { list: this._result.list.splice(0), callbackResult: this._result.callbackResult }\n        this._result.callbackResult = undefined;\n        return data;\n    }\n\n    /**\n     * 解析tag头\n     */\n    private _parseFlvHead(): void {\n        const data = this._cache.read(FlvSize.FLV_HEAD_LEN);\n        if (data) {\n            if (data[0] !== 0x46 || data[1] !== 0x4c || data[2] !== 0x56 || data[3] !== 0x01) {\n                this._eventEmitter.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.MUX_ERROR,\n                    details: ErrorDetails.DEMUX_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'flv wrong head'\n                    }\n                });\n            }\n            this._eventEmitter.emit(LasEvents.FLV_HEAD, {\n                hasAudio: (data[4] & 4) >>> 2,\n                hasVideo: (data[4] & 1)\n            });\n            // TEST:\n            // this._eventEmitter.emit(KEvents.FLV_HEAD, {\n            //     hasAudio: true,\n            //     hasVideo: true\n            // });\n\n            this._cache.skip(FlvSize.FLV_HEAD_LEN);\n            this._parseLen = FlvSize.FLV_TAG_HEAD_LEN;\n            this._parseFunc = this._parseFlvTagHead;\n        }\n    }\n\n    /**\n     * 解析flv tag head\n     */\n    private _parseFlvTagHead(): void {\n        this._tag = new FlvTag();\n        const data = this._cache.read(FlvSize.FLV_TAG_HEAD_LEN);\n        if (data) {\n            // 取出tag类型\n            this._tag.tagType = data[0];\n            // 取出包体大小\n            this._tag.dataSize = ((data[1] & 0xff) << 16) + ((data[2] & 0xff) << 8) + (data[3] & 0xff);\n            // 取出解码时间\n            this._tag.timestamp =\n                ((data[7] & 0xff) << 24) + ((data[4] & 0xff) << 16) + ((data[5] & 0xff) << 8) + (data[6] & 0xff);\n            this._cache.skip(FlvSize.FLV_TAG_HEAD_LEN);\n            // 尝试在处理完整个tag之前判断是否为关键帧，用于自适应码率\n            if (this._tag.tagType === FlvTagType.VIDEO) {\n                this._parseFunc = this._detectKeyFrame;\n                this._parseLen = FlvSize.AVC_KEY_FRAME_CHECK_LEN;\n            } else {\n                this._parseFunc = this._parseFlvTag;\n                this._parseLen = this._tag.dataSize + FlvSize.FLV_TAG_SIZE_LEN;\n            }\n        }\n    }\n\n    /**\n     * 检测关键帧\n     */\n    private _detectKeyFrame(): void {\n        const data = this._cache.read(2);\n        if (data && this._tag) {\n            const frameType = (data[0] & 240) >>> 4;\n            const packetType = data[1];\n            this._parseFunc = this._parseFlvTag;\n            this._parseLen = this._tag.dataSize + FlvSize.FLV_TAG_SIZE_LEN;\n            // 获取是否是关键帧\n            if (frameType === 1 && packetType === 1 && this._onFlvKeyframe) {\n                this._result.callbackResult = this._onFlvKeyframe(this._tag.timestamp);\n                if (this._result.callbackResult) {\n                    this._parseLen = FlvSize.FLV_HEAD_LEN;\n                    this._parseFunc = this._parseFlvHead;\n                    this._cache.clear();\n                    this._tag = undefined;\n                }\n            }\n        }\n    }\n\n    /**\n     * 解析flv tag\n     */\n    private _parseFlvTag(): void {\n        const tag = this._tag;\n        if (!tag) {\n            return;\n        }\n        if (tag.tagType === FlvTagType.SCRIPT || tag.tagType === FlvTagType.AUDIO || tag.tagType === FlvTagType.VIDEO) {\n            tag.body = this._cache.get(tag.dataSize);\n            this._cache.skip(4); // skip size\n            if (tag)\n                this._result.list.push(tag);\n            this._tag = undefined;\n        }\n        this._parseFunc = this._parseFlvTagHead;\n        this._parseLen = FlvSize.FLV_TAG_HEAD_LEN;\n    }\n}\n\nexport default FlvPreprocessor;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:42:27 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:42:27 \n * las.js的report事件类型定义\n */\nexport const REPORT_TYPES = {\n    // 开始加载流\n    START_LOAD_STREAM: 'startLoadStream',\n    // 有数据被下载\n    LOADER_CHUNK_ARRIVAL: 'loader-chunk-arrival',\n    // 关键帧\n    KEY_FRAME: 'keyFrame',\n};\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:39:26 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:40:09\n * 处理las.js协议及flv流\n */\nimport { EventEmitter } from 'events';\nimport work from 'webworkify-webpack';\nimport { abrGetUrl } from '../abr/abr-get-url';\nimport { AbrManifest } from '../abr/abr-manifest';\nimport Multirate from '../abr/multirate';\nimport FlvDemuxerInline from '../demux/flv/flv-demuxer-inline';\nimport FlvPreprocessor from '../demux/flv/flv-preprocessor';\nimport Loader from '../io/loader';\nimport { LasMainConfig, SmoothLevelSwitchInfo } from '../types/core';\nimport { FlvTag } from '../types/flv-object';\nimport { ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext } from '../types/io';\nimport { MP4RemuxResult } from '../types/remux';\nimport { Log } from '../utils/log';\nimport { ErrorData, ErrorDetails, ErrorTypes } from './errors';\nimport LasEvents from './events';\nimport Media from './media';\nimport { REPORT_TYPES } from './report-types';\nimport { WorkerCmd } from './worker-cmd';\n\nconst URL_REG = new RegExp('^(http|https)://');\n\n/**\n * flv视频流处理\n */\nconst tag = 'LasMain';\nexport default class LasMain extends EventEmitter {\n    private _config: LasMainConfig;\n    private _media: Media;\n    private _w?: Worker;\n    private _flv?: FlvDemuxerInline;\n    private _eventEmitter: EventEmitter;\n\n    private _loader?: Loader<ILoaderContext>;\n    private _loaderConf: ILoaderConfig;\n    private _loaderCallbacks: ILoaderCallback<ILoaderContext>;\n    private _multirate?: Multirate;\n    private _isContinuous: boolean;\n    private _remuxId: number;\n    private _baseTimeSec: number = 0;\n    private _tagDump: FlvPreprocessor<SmoothLevelSwitchInfo>;\n    private _currentUrl?: any;\n    private _isAbr: boolean = false;\n    private _progressTime: number = 0;\n    private _src: any;\n    private _audioCodec: string = '';\n\n    /**\n     * 传入配置并初始化\n     * @param config 配置信息\n     * @param media Media\n     */\n    constructor(config: LasMainConfig, media: Media) {\n        super();\n        this._config = config;\n        this._media = media;\n\n        this._loaderConf = {\n            connectionTimeout: this._config.connectionTimeout,\n            transmissionTimeout: this._config.transmissionTimeout,\n            maxRetry: 0,\n            retryDelay: 0,\n            useFetch: true\n        };\n        this._loaderCallbacks = {\n            onProgress: this._onLoaderProgress,\n            onError: this._onLoaderError,\n            onEnd: this._onLoaderEnd,\n            onAbort: this._onLoaderAbort\n        };\n        this._isContinuous = false;\n        this._remuxId = 1;\n\n        const eventEmitter = (this._eventEmitter = new EventEmitter());\n        eventEmitter.on(LasEvents.MEDIA_INFO, data => { this._onEvent(LasEvents.MEDIA_INFO, data) });\n        eventEmitter.on(LasEvents.SCRIPT_PARSED, data => { this._onEvent(LasEvents.SCRIPT_PARSED, data) });\n        eventEmitter.on(LasEvents.MANIFEST_PARSED, data => { this._onEvent(LasEvents.MANIFEST_PARSED, data) });\n        eventEmitter.on(LasEvents.MP4_SEGMENT, data => { this._onEvent(LasEvents.MP4_SEGMENT, data) });\n        eventEmitter.on(LasEvents.ERROR, data => { this._onEvent(LasEvents.ERROR, data) });\n        eventEmitter.on(LasEvents.FLV_HEAD, data => { this._onEvent(LasEvents.FLV_HEAD, data) });\n\n        this._tagDump = new FlvPreprocessor(this._eventEmitter, this._flvKeyframeCallback);\n        if (this._config.webWorker) {\n            Log.i(tag, 'webWorker');\n            this._w = work(require.resolve('../demux/flv/flv-demuxer-worker'));\n            if (this._w) {\n                this._w.addEventListener('message', this._onWorkerEvent);\n                this._w.postMessage({\n                    cmd: WorkerCmd.INIT,\n                    config: this._config,\n                    data: { remuxId: this._remuxId }\n                });\n                return;\n            }\n        }\n        this._flv = new FlvDemuxerInline(eventEmitter, this._config, { remuxId: this._remuxId });\n        this._flv.init();\n    }\n\n    /**\n     * 初始化\n     * @param src manifest/播放url\n     */\n    public init(src: any, audioCodec: string = ''): void {\n        this._src = src;\n        this._audioCodec = audioCodec;\n        if (typeof src === 'string' && !URL_REG.test(src)) {\n            try {\n                this._src = JSON.parse(src);\n            } catch (e) {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.MANIFEST_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'manifest parse error'\n                    }\n                });\n                return;\n            }\n        }\n        if (this._src) {\n            if (AbrManifest.verify(this._src)) {\n                this._isAbr = true;\n            }\n        } else {\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.OTHER_ERROR,\n                details: ErrorDetails.MANIFEST_ERROR,\n                fatal: true,\n                info: {\n                    reason: 'src empty'\n                }\n            });\n            return;\n        }\n        if (this._isAbr && !this._multirate) {\n            this._multirate = new Multirate(this._eventEmitter, this._config, this._media, this._src);\n            this._multirate.init();\n        }\n    }\n\n    /**\n     * 开始加载\n     */\n    public load(): void {\n        let mr = this._multirate;\n        if (mr) {\n            let data = mr.levels[mr.currentLevel];\n            if (data) {\n                this._load(abrGetUrl(data.url, this._config.defaultLiveDelay), mr.currentLevel);\n            } else {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.MANIFEST_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'manifest parse error'\n                    }\n                });\n            }\n        } else {\n            this._load(this._src);\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        this._destroyLoader();\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.DESTROY });\n            this._w.removeEventListener('message', this._onWorkerEvent);\n            this._w.terminate();\n        }\n        if (this._flv) {\n            this._flv.destroy();\n            this._flv = undefined;\n        }\n\n        if (this._multirate) {\n            this._multirate.destory();\n        }\n\n        const eventEmitter = this._eventEmitter;\n        if (eventEmitter) {\n            eventEmitter.removeAllListeners();\n        }\n    }\n\n    /**\n     * 自动码率是否是开启状态\n     */\n    public get autoLevelEnabled(): boolean {\n        if (this._multirate) {\n            return this._multirate.autoLevelEnabled;\n        }\n        return false;\n    }\n\n    /**\n     * 返回多路流列表\n     */\n    public get levels() {\n        if (this._multirate) {\n            return this._multirate.levels;\n        }\n        return [];\n    }\n\n    /**\n     * 即将切换的level index\n     */\n    public get nextLevel(): number {\n        if (this._multirate) {\n            return this._multirate.nextLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 平滑切换清晰度，在关键帧位置切换\n     */\n    public set nextLevel(value: number) {\n        const mr = this._multirate;\n        if (mr) {\n            mr.nextLevel = value;\n        }\n    }\n\n    /**\n     * 当前正在加载的level index\n     */\n    public get currentLevel(): number {\n        if (this._multirate) {\n            return this._multirate.currentLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 立即切换清晰度，丢弃现有数据，重新拉指定index的流\n     */\n    public set currentLevel(value: number) {\n        const mr = this._multirate;\n        if (mr) {\n            let load = value >= 0 || value !== mr.currentLevel;\n            mr.currentLevel = value;\n            const data = mr.levels[mr.currentLevel];\n            if (load && data) {\n                this._currentUrl = abrGetUrl(data.url, this._config.defaultLiveDelay);\n                this._refreshRemuxId();\n                this._isContinuous = false;\n                if (this._tagDump) {\n                    this._tagDump.reset();\n                }\n                this._baseTimeSec = this._media.currentTime;\n                this.emit(LasEvents.LEVEL_SWITCHING, { level: mr.currentLevel, startSec: this._baseTimeSec, smooth: false });\n                this._load(this._currentUrl, mr.currentLevel);\n            }\n        }\n    }\n\n    /**\n     * worker通信\n     * @param ev worker返回数据\n     */\n    private _onWorkerEvent = (ev: any) => {\n        const data = ev.data;\n        this._onEvent(data.event, data.data);\n    }\n\n    /**\n     * 关键帧位置处理\n     * 自动码率需要在关键帧位置进行切换，返回算法判断结果\n     */\n    private _flvKeyframeCallback = (timestamp: number): SmoothLevelSwitchInfo | undefined => {\n        if (!this._media.hasStreamTime) {\n            this._media.updateStreamTime(timestamp / 1000, 0);\n        }\n        return this._multirate ? this._multirate.onKeyFrame(timestamp) : undefined;\n    }\n\n    /**\n     * 处理message事件\n     */\n    private _onEvent = (ev: string, data: any): void => {\n        switch (ev) {\n            case LasEvents.FLV_HEAD:\n                if (this._w) {\n                    this._w.postMessage({ cmd: WorkerCmd.FLV_HEAD, hasAudio: data.hasAudio, hasVideo: data.hasVideo });\n                } else if (this._flv) {\n                    this._flv.flvHead(data.hasAudio, data.hasVideo);\n                }\n                break;\n            case LasEvents.MEDIA_INFO:\n                this.emit(LasEvents.MEDIA_INFO, data);\n                break;\n            case LasEvents.MP4_SEGMENT:\n                {\n                    let mp4Data = data as MP4RemuxResult;\n                    if (mp4Data.extra && mp4Data.extra.remuxId !== this._remuxId) {\n                        // 过期，丢弃\n                        break;\n                    }\n                    mp4Data.segments.forEach(segment => {\n                        if (segment.type === 'audio' && segment.startDTS > this._baseTimeSec) {\n                            this._media.updateStreamTime(segment.streamDTS, segment.startDTS);\n                        }\n                    });\n                    this.emit(LasEvents.MP4_SEGMENT, mp4Data);\n                }\n                break;\n            default:\n                // SCRIPT_PARSED ERROR END\n                this.emit(ev, data);\n                break;\n        }\n    }\n\n    private _destroyLoader() {\n        if (this._loader) {\n            this._loader.destroy();\n            this._loader = undefined;\n        }\n    }\n\n    /**\n     * 开始下载流\n     * @param url flv地址\n     * @param index level index\n     */\n    private _load(url: string, index: number = 0): void {\n        this._destroyLoader();\n        if (this._multirate) {\n            this._multirate.onLevelLoad(index);\n        }\n        this._currentUrl = url;\n        let level = this.levels[index];\n        if (level) {\n            this._updateCodecs(this._audioCodec || level.audioCodec, level.videoCodec);\n        }\n\n        this.emit(LasEvents.REPORT, {\n            type: REPORT_TYPES.START_LOAD_STREAM,\n            url,\n            sync: this._baseTimeSec,\n            index: index,\n            bitrate: level ? level.bitrate : 0\n        });\n        if (!this._loader) {\n            this._loader = new Loader();\n        }\n        const context = {\n            url,\n            progress: true,\n            responseType: 'arraybuffer',\n            credentials: this._config.credentials\n        };\n        if (this._loader instanceof Loader) {\n            this._loader.load(context, this._loaderCallbacks, this._loaderConf);\n        }\n    }\n\n    /**\n     * 读取的flv tag数据传入worker进行解封装、封装操作\n     * @param tags 读取的flv tag数据\n     * @param timeOffset 时间偏移\n     * @param isContinuous 继续remux的时间戳进行处理\n     */\n    private _append(\n        tags: FlvTag[],\n        timeOffset: number,\n        isContinuous: boolean,\n    ): void {\n        if (this._w) {\n            this._w.postMessage({\n                cmd: WorkerCmd.APPEND_DATA,\n                tags,\n                timeOffset: timeOffset || 0,\n                isContinuous\n            });\n        } else if (this._flv) {\n            this._flv.append(tags, timeOffset || 0, isContinuous);\n        }\n    }\n\n    private _updateCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        if (this._w) {\n            this._w.postMessage({\n                cmd: WorkerCmd.SET_CODECS,\n                audioCodec, videoCodec\n            });\n        } else if (this._flv) {\n            this._flv.setCodecs(audioCodec, videoCodec);\n        }\n    }\n\n    /**\n     * 下载数据progress处理\n     * @param context 下载器上下文\n     * @param data 下载数据\n     * @param stats 下载器状态数据\n     */\n    private _onLoaderProgress = (target: ILoader<ILoaderContext>, data: string | ArrayBuffer): void => {\n        if (!(data instanceof ArrayBuffer)) {\n            return;\n        }\n        if (this._multirate) {\n            this._multirate.onLoaderChunk(data.byteLength);\n        }\n        this.emit(LasEvents.REPORT, {\n            type: REPORT_TYPES.LOADER_CHUNK_ARRIVAL,\n            byteLength: data.byteLength,\n            timeCost: performance.now() - this._progressTime || target.stats.requestStartTime,\n            header: target.context.responseHeader\n        });\n        this._progressTime = performance.now();\n        const result = this._tagDump.processing(data);\n        this._append(result.list, this._baseTimeSec, this._isContinuous);\n        this._isContinuous = true;\n\n        // 是否需要切换\n        if (result.callbackResult) {\n            if (this._tagDump) {\n                this._tagDump.reset();\n            }\n            this._baseTimeSec = result.callbackResult.timestamp ? this._media.getLocalTime(result.callbackResult.timestamp / 1000) || 0 : 0;\n            // 平滑切换\n            this.emit(LasEvents.LEVEL_SWITCHING, { level: result.callbackResult.level, startSec: this._baseTimeSec, smooth: true });\n            this._load(result.callbackResult.url, result.callbackResult.level);\n        }\n    }\n\n    private _onLoaderAbort = (): void => { }\n\n    /**\n     * 下载器错误处理\n     * @param context 下载器上下文\n     * @param status 下载器状态\n     */\n    private _onLoaderError = (target: ILoader<ILoaderContext>): void => {\n        if (!target.stats.fatalError) {\n            return;\n        }\n        const errInfo: ErrorData = {\n            type: ErrorTypes.NETWORK_ERROR,\n            details: target.stats.errorMessage === 'timeout' ? ErrorDetails.LOAD_ERROR_TIMEOUT : ErrorDetails.LOAD_ERROR,\n            fatal: true,\n            info: {\n                url: target.context.url,\n                httpStatusCode: target.stats.httpStatusCode,\n                reason: target.stats.errorMessage\n            }\n        };\n        this.emit(LasEvents.ERROR, errInfo);\n    }\n\n    /**\n     * 下载完成处理\n     */\n    private _onLoaderEnd = (): void => {\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.LOAD_END });\n        } else if (this._flv) {\n            this._flv.end();\n        }\n    }\n\n    /**\n     * 处理worker中的过期数据\n     */\n    private _refreshRemuxId(): void {\n        this._remuxId++;\n        const data = { remuxId: this._remuxId };\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.SET_EXTRA, data: data });\n        } else if (this._flv) {\n            this._flv.setExtra(data);\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:41:45 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:42:08\n * video及MSE工具类，封装video和MSE的部分接口，并用于计算处理视频的缓冲相关信息\n */\nimport { TimeRange } from '../types/core';\nimport MSE from './mse';\n\nclass Media {\n    private _video?: HTMLVideoElement;\n    private _mse?: MSE;\n\n    private _streamTime: number = 0;\n    private _localTime: number = 0;\n\n    constructor() { }\n\n    public reset(): void {\n        this._streamTime = 0;\n        this._localTime = 0;\n    }\n\n    public attachVideo(video: HTMLVideoElement): void {\n        this._video = video;\n    }\n    public attachMSE(mse: MSE): void {\n        this._mse = mse;\n    }\n\n    /**\n     * 指定时间是否在video缓冲区内\n     * @param sec time\n     * @returns isTimeinBuffered\n     */\n    public isTimeinBuffered(sec: number): boolean {\n        if (this._video) {\n            const buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                if (sec >= buffered.start(i) && sec < buffered.end(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /*\n     * 计算video buffer量\n     */\n    public bufferedSec(): number {\n        if (this._video && this._video.buffered.length > 0) {\n            return Math.max(0, this._video.buffered.end(this._video.buffered.length - 1) - this._video.currentTime);\n        }\n        return 0;\n    }\n\n    /**\n     * 音频、视频的buffer长度\n     * @param type video|audio\n     */\n    public bufferedSecByType(type: string): number {\n        if (this._mse && this._video) {\n            let end = this._mse.bufferedEndByType(type);\n            if (end > 0) {\n                return this._mse.bufferedEndByType(type) - this._video.currentTime;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * 音频、视频的buffer长度\n     * @param type video|audio\n     */\n    public mseBufferedSecByType(type: string): TimeRange {\n        if (this._mse) {\n            return this._mse.bufferedByType(type);\n        }\n        return { start: 0, end: 0 };\n    }\n\n    /**\n     * 音频、视频buffer的段数\n     * @param type video|audio\n     */\n    public bufferSliceNumByType(type: string): number {\n        if (this._mse) {\n            return this._mse.bufferSliceNumByType(type);\n        }\n        return 0;\n    }\n\n    public pendingNum(): number {\n        if (this._mse) {\n            return this._mse.pendingNum();\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充的buffer数据长度\n     * @param type video|audio\n     */\n    public pendingSecByType(type: string): number {\n        if (this._mse) {\n            return this._mse.pendingSecByType(type);\n        }\n        return 0;\n    }\n\n    /**\n     * 指定时间所在的buffer区域结束时间，不在任何buffer区域时返回空\n     * @param time 时间\n     */\n    public currentBuffer(time: number): TimeRange | undefined {\n        if (this._video) {\n            let buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                const start = buffered.start(i);\n                const end = buffered.end(i);\n                if (start <= time && time < end) {\n                    return { start, end };\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * 指定时间所在的buffer区域结束时间，不在任何buffer区域时返回空\n     * @param time 时间\n     */\n    public nextBuffer(time: number): TimeRange | undefined {\n        if (this._video) {\n            let buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                const start = buffered.start(i);\n                const end = buffered.end(i);\n                if (start > time) {\n                    return { start, end };\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * 更新转封装后的时间对应关系\n     * @param streamTime 流中的时间戳，秒\n     * @param localTime 本地时间，秒\n     */\n    public updateStreamTime(streamTime: number, localTime: number): void {\n        this._streamTime = streamTime;\n        this._localTime = localTime;\n    }\n\n    /**\n     * 根据流时间推算对应的本地时间戳\n     * @param streamTime 流时间\n     */\n    public getLocalTime(streamTime: number): number | undefined {\n        if (this._streamTime) {\n            return (streamTime - this._streamTime) + this._localTime;\n        }\n        return;\n    }\n\n    /**\n    * 当前是否有流时间\n    */\n    public get hasStreamTime(): boolean {\n        return !!this._streamTime;\n    }\n\n    public get video(): HTMLVideoElement | undefined {\n        return this._video;\n    }\n\n    public get mse(): MSE | undefined {\n        return this._mse;\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get mseReadyState(): ReadyState {\n        if (this._mse) {\n            return this._mse.readyState;\n        }\n        return 'closed';\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get videoReadyState(): number {\n        if (this._video) {\n            return this._video.readyState;\n        }\n        return 0;\n    }\n\n\n    /**\n     * video当前播放时间\n     */\n    public get currentTime(): number {\n        if (this._video) {\n            return this._video.currentTime;\n        }\n        return 0;\n    }\n}\n\nexport default Media;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:40:17 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:41:13\n * MSE控制器，MSE的buffer管理\n */\nimport { EventEmitter } from 'events';\nimport { LasConfig, TimeRange } from '../types/core';\nimport { MP4Segment } from '../types/remux';\nimport { Log } from '../utils/log';\nimport { ErrorDetails, ErrorTypes } from './errors';\nimport LasEvents from './events';\n\n// append关闭时queue允许缓存的长度上限\nconst QUEUE_SIZE_LIMIT = 200 * 1024 * 1024;\nconst MAX_CLEANUP_DURATION = 10;\nconst MIN_CLEANUP_DURATION = 5;\n\nconst MAX_BUFFERED = 30;\n\n/**\n * 处理MediaSource\n * https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource\n */\nexport default class MSE extends EventEmitter {\n    private tag: string = 'MSE';\n    private _config: LasConfig;\n\n    public video?: HTMLVideoElement;\n    public _sourceBuffer: { [index: string]: SourceBuffer };\n    private _mediaSource: MediaSource | null = null;\n    private _mimeCodec: { [index: string]: string };\n    private _cleanUpTask: { [index: string]: TimeRange[] };\n    private _appendQueue: { [index: string]: MP4Segment[] };\n    private _hasVideo: boolean;\n    private _hasAudio: boolean;\n    private _endOfData: boolean = false;\n    private _appendEnabled: boolean;\n    private _duration: number | null = null;\n    private _appendError: number = 0;\n    private _appendBufferError: boolean = false;\n    private _sbHandler: { [index: string]: { updateend: (e: Event) => any; error: (e: Event) => any } } = {};\n\n    /**\n     * 传入配置参数，初始化MSE\n     * @param config LasConfig\n     */\n    constructor(config: LasConfig) {\n        super();\n        this._config = config;\n        this._hasVideo = false;\n        this._hasAudio = false;\n        this._appendQueue = {\n            video: [],\n            audio: [],\n            audiovideo: []\n        };\n        this._sourceBuffer = {};\n        this._cleanUpTask = { video: [], audio: [], audiovideo: [] };\n        this._mimeCodec = {};\n        this._appendEnabled = true;\n    }\n\n    /**\n     * 绑定HTMLVideoElement\n     * @param video HTMLVideoElement\n     */\n    public attach(video: HTMLVideoElement): void {\n        this.video = video;\n        const MediaSourceDef = (window as any).MediaSource || (window as any).WebKitMediaSource;\n        if (MediaSourceDef) {\n            const ms = (this._mediaSource = new MediaSourceDef());\n            this.video.src = URL.createObjectURL(ms);\n            this.video.load();\n            ms.addEventListener('sourceopen', this._onSourceOpen);\n            ms.addEventListener('sourceended', this._onSourceEnded);\n            ms.addEventListener('sourceclose', this._onSourceClose);\n        } else {\n            setTimeout(() => {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.MSE_ERROR,\n                    details: ErrorDetails.MEDIASOURCE_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'MediaSource is not support'\n                    }\n                });\n            }, 0);\n        }\n    }\n\n    /**\n     * 传入视频头信息\n     * @param mediaInfo \n     */\n    public mediaInit(mediaInfo: any): void {\n        if ((this._hasAudio !== mediaInfo.hasAudio || this._hasVideo !== mediaInfo.hasVideo || !!mediaInfo.audiovideo !== !!this._mimeCodec.audiovideo) && this.video && this.hasSourceBuffer()) {\n            // 音视频轨数量发生变化时需要重建mse\n            Log.i(this.tag, 'trackInfo rebuild mse');\n            for (const type in this._sourceBuffer) {\n                if (this._sourceBuffer[type] && this._sbHandler[type]) {\n                    this._sourceBuffer[type].removeEventListener('error', this._sbHandler[type].error);\n                    this._sourceBuffer[type].removeEventListener('updateend', this._sbHandler[type].updateend);\n                }\n            }\n            this._sourceBuffer = {};\n            if (this._mediaSource) {\n                this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n                this._mediaSource.removeEventListener('sourceended', this._onSourceEnded);\n                this._mediaSource.removeEventListener('sourceclose', this._onSourceClose);\n            }\n            this._mimeCodec = {};\n            this.attach(this.video);\n        }\n        if (!mediaInfo.audiovideo) {\n            if (mediaInfo.hasAudio && mediaInfo.audioCodec) {\n                this._mimeCodec.audio = `audio/mp4; codecs=\"${mediaInfo.audioCodec}\"`;\n            }\n            if (mediaInfo.hasVideo && mediaInfo.videoCodec) {\n                this._mimeCodec.video = `video/mp4; codecs=\"${mediaInfo.videoCodec}\"`;\n            }\n        } else {\n            this._mimeCodec.audiovideo = `video/mp4; codecs=\"${mediaInfo.codec}\"`;\n        }\n        this._hasAudio = this._hasAudio || mediaInfo.hasAudio;\n        this._hasVideo = this._hasVideo || mediaInfo.hasVideo;\n\n        this._checkSourceBuffer();\n    }\n\n    /**\n     * 刷新MSE，计算一次清理任务，尝试重启填充buffer任务\n     */\n    public refresh() {\n        for (const type in this._sourceBuffer) {\n            this._update(type);\n        }\n    }\n\n    /**\n     * 转封装后fmp4数据\n     * @param segments segments\n     */\n    public mediaSegment(segments: MP4Segment[]): void {\n        segments.forEach(segment => {\n            let type = segment.type;\n            this._appendQueue[type].push(segment);\n            if (this._sourceBuffer[type]) {\n                this._update(type);\n            }\n        })\n    }\n\n    /**\n     * mse buffer范围，秒\n     * @param type video|audio|audiovideo\n     */\n    public bufferedByType(type: string): { start: number; end: number } {\n        const sb = this._sourceBuffer[type];\n        if (sb && sb.buffered.length > 0) {\n            return { start: sb.buffered.start(0), end: sb.buffered.end(sb.buffered.length - 1) };\n        }\n        return { start: 0, end: 0 };\n    }\n\n    /**\n     * mse buffer结束时间点，秒\n     * @param type video|audio|audiovideo\n     */\n    public bufferedEndByType(type: string): number {\n        const sb = this._sourceBuffer[type];\n        if (sb && sb.buffered.length > 0) {\n            return sb.buffered.end(sb.buffered.length - 1);\n        }\n        return 0;\n    }\n\n    /**\n     * mse buffer的分段数量，正常情况不大于1\n     * @param type video|audio|audiovideo\n     */\n    public bufferSliceNumByType(type: string): number {\n        const sb = this._sourceBuffer[type];\n        if (sb) {\n            return sb.buffered.length;\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充buffer长度\n     * @param type video|audio|audiovideo\n     */\n    public pendingSecByType(type: string): number {\n        const buffer = this._appendQueue[type];\n        if (buffer) {\n            return buffer.reduce((prev, current) => {\n                return prev + current.endDTS - current.startDTS;\n            }, 0);\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充buffer数量\n     */\n    public pendingNum(): number {\n        let num = 0;\n        for (let type in this._appendQueue) {\n            num += this._appendQueue[type].length;\n        }\n        return num;\n    }\n\n    /**\n     * 检查track是否已获取codec\n     */\n    private _checkSourceBuffer(): void {\n        let expected = (this._hasAudio ? 1 : 0) + (this._hasVideo ? 1 : 0);\n        let codecs = (this._mimeCodec.audio ? 1 : 0) + (this._mimeCodec.video ? 1 : 0);\n        if (this._mimeCodec.audiovideo) {\n            expected = 1;\n            codecs = 1;\n        }\n        Log.v(this.tag, 'checkSourceBuffer', expected, codecs, this._mimeCodec);\n        if (this._mediaSource && this._mediaSource.readyState === 'open' && expected > 0 && codecs >= expected) {\n            for (const type in this._mimeCodec) {\n                if (this._mimeCodec[type]) {\n                    this._addSourceBuffer(type);\n                }\n            }\n        }\n    }\n\n    /**\n     * MediaSource的sourceopen事件处理\n     */\n    private _onSourceOpen = () => {\n        Log.i(this.tag, 'MediaSource onSourceOpen');\n        if (this._mediaSource) {\n            this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n            this._checkSourceBuffer();\n            this.refresh();\n            this.emit('source_open');\n        }\n    };\n\n    /**\n     * 向mediaSource添加sourceBuffer\n     * @param type video|audio\n     */\n    private _addSourceBuffer(type: string): void {\n        if (this._sourceBuffer[type]) {\n            return;\n        }\n        try {\n            if (this._mediaSource) {\n                this._sourceBuffer[type] = this._mediaSource.addSourceBuffer(this._mimeCodec[type]);\n            }\n        } catch (e) {\n            Log.e(this.tag, e);\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MSE_ERROR,\n                details: ErrorDetails.ADDSOURCEBUFFER_ERROR,\n                fatal: true,\n                info: {\n                    reason: e.message\n                }\n            });\n            return;\n        }\n        const sb = this._sourceBuffer[type];\n        this._sbHandler[type] = {\n            updateend: () => {\n                this._onSourceBufferUpdateEnd(type);\n            },\n            error: (e: Event) => {\n                this._onSourceBufferError(e);\n            }\n        };\n        sb.addEventListener('error', this._sbHandler[type].error);\n        sb.addEventListener('updateend', this._sbHandler[type].updateend);\n        if (this._duration && this._mediaSource) {\n            this._mediaSource.duration = this._duration;\n        }\n    }\n\n    /**\n     * 是否有待处理的数据\n     */\n    private _hasPendingData(): boolean {\n        return !!(\n            this._appendQueue &&\n            ((this._appendQueue.video && this._appendQueue.video.length) ||\n                (this._appendQueue.audio && this._appendQueue.audio.length))\n        );\n    }\n\n    /**\n     * 向sourcebuffer中填入数据\n     * @param type video|audio\n     */\n    private _doAppend(type: string): void {\n        if (this._hasPendingData()) {\n            if (!this._appendEnabled) {\n                const size = this._getBufferQueueSize();\n                if (size > QUEUE_SIZE_LIMIT && !this._appendBufferError) {\n                    this._appendBufferError = true;\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: 'bufferfull'\n                        }\n                    });\n                }\n                return;\n            }\n            if (\n                this._appendQueue[type].length > 0 &&\n                this._sourceBuffer[type] &&\n                !this._sourceBuffer[type].updating &&\n                !this._appendBufferError\n            ) {\n                const data = this._appendQueue[type].shift();\n                this._appendBuffer(data);\n            }\n        }\n    }\n\n    /**\n     * 根据填充策略计算需要缓存清理的范围\n     * @param type video|audio|audiovideo\n     */\n    private _calculateRemoveRange(type: string): void {\n        const video = this.video;\n        if (!video || video.seeking) {\n            return;\n        }\n        const time = video.currentTime;\n        if (this._sourceBuffer[type]) {\n            const task = this._cleanUpTask[type];\n            const buffered = this._sourceBuffer[type].buffered;\n            if (buffered.length >= 1 && time - buffered.start(0) >= MAX_CLEANUP_DURATION) {\n                const end = time - MIN_CLEANUP_DURATION;\n                if (task.length) {\n                    if (task[task.length - 1].start === 0 && task[task.length - 1].end === end) {\n                        return;\n                    }\n                }\n                task.push({ start: 0, end });\n            }\n        }\n    }\n\n    /**\n     * 尝试清理sourcebufer缓存\n     * @param sb 需要清理的sourceBuffer\n     * @param range 需要清理的范围\n     */\n    private _cleanUpRange(type: string, range: TimeRange): boolean {\n        const sb = this._sourceBuffer[type];\n        if (sb) {\n            if (!sb.updating) {\n                try {\n                    for (let i = 0; i < sb.buffered.length; i++) {\n                        const bufStart = 0;\n                        const bufEnd = sb.buffered.end(i);\n                        const removeStart = Math.max(bufStart, range.start);\n                        const removeEnd = Math.min(bufEnd, range.end);\n                        /**\n                         * remove不一定准确按照指定值进行，remove长度小于500ms，可能无效\n                         */\n                        if (removeEnd > removeStart) {\n                            sb.remove(removeStart, removeEnd);\n                            this.emit('remove');\n                            // 多段buffer时可能需要多次清理\n                            if (i < sb.buffered.length - 1) {\n                                return false;\n                            }\n                        }\n                    }\n                } catch (error) { }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 向sourcebuffer中填充数据\n     * @param data data\n     * @param type type\n     */\n    private _appendBuffer(data?: MP4Segment): void {\n        if (!data || !this._sourceBuffer[data.type] || !this.video || this.video.error) {\n            return;\n        }\n        try {\n            this._sourceBuffer[data.type].appendBuffer(data.payload.buffer);\n        } catch (e) {\n            Log.w(this.tag, e.code, e);\n            if (e.code !== 22) {\n                if (this._appendError) {\n                    this._appendError++;\n                } else {\n                    this._appendError = 1;\n                }\n                if (this._appendError > this._config.appendErrorMaxRetry) {\n                    this._appendBufferError = true;\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: e.message\n                        }\n                    });\n                } else {\n                    this._appendQueue[data.type].unshift(data);\n                }\n            } else {\n                // buffer满无法填充\n                let v = this.video, conf = this._config;\n                this._appendEnabled = false;\n                this._appendQueue[data.type].unshift(data);\n                let buffered = v.buffered.end(v.buffered.length - 1) - v.currentTime;\n                let useless = v.currentTime - v.buffered.start(0);\n                // 未使用buffer小于阈值，尝试清理已使用buffer\n                if (buffered < MAX_BUFFERED) {\n                    this._calculateRemoveRange(data.type);\n                    if (this.hasCleanUpTask(data.type)) {\n                        this._cleanUp(data.type);\n                    }\n                    // 已使用buffer小于清理阈值时，抛错\n                } else if (useless < MAX_CLEANUP_DURATION) {\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: 'buffer full, append error'\n                        }\n                    });\n                }\n                Log.i(this.tag, 'mse bufferfull')\n                this.emit('bufferFull');\n            }\n        }\n    }\n\n    /**\n     * sourcebuffer end\n     */\n    private _onSourceEnded = () => {\n        Log.i(this.tag, 'MediaSource onSourceEnded');\n    };\n\n    /**\n     * sourcebuffer close\n     */\n    private _onSourceClose = () => {\n        Log.i(this.tag, 'MediaSource onSourceClose');\n        if (this._mediaSource) {\n            this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n            this._mediaSource.removeEventListener('sourceended', this._onSourceEnded);\n            this._mediaSource.removeEventListener('sourceclose', this._onSourceClose);\n        }\n    };\n\n    private _onSourceBufferUpdateEnd = (type: string) => {\n        this._update(type);\n        if (this._endOfData) {\n            this._endOfStream();\n        }\n        this.emit('updateend');\n    };\n\n    /**\n     * sourcebuffer error\n     * @param {Object} e 事件\n     */\n    private _onSourceBufferError = (e: Event) => {\n        Log.e(this.tag, `SourceBuffer Error: ${e}`);\n        this.emit(LasEvents.ERROR, {\n            type: ErrorTypes.MSE_ERROR,\n            details: ErrorDetails.SOURCEBUFFER_ERROR,\n            fatal: true,\n            info: {\n                reason: 'source buffer error'\n            }\n        });\n    };\n\n    /**\n     * 清理mse sourcebuffer缓存\n     * @param startSec 开始时间点，未指从0点开始\n     * @param endSec 结束时间点，未指定时结束点为正无穷大\n     * @param flushType 类型，未指定时清理所有sourcebuffe\n     */\n    public flush(startSec?: number, endSec?: number, flushType?: string): void {\n        let start = 0,\n            end = Number.POSITIVE_INFINITY;\n        this._endOfData = false;\n        // 计算清理范围\n        for (const type in this._sourceBuffer) {\n            if (flushType && flushType !== type) {\n                continue;\n            }\n            const sb = this._sourceBuffer[type];\n            if (!sb) {\n                continue;\n            }\n            // 清理未填充数据\n            if (startSec) {\n                start = Math.max(start, startSec);\n                for (let i = this._appendQueue[type].length - 1; i >= 0; i--) {\n                    if (!this._appendQueue[type][i].startPTS || this._appendQueue[type][i].startPTS >= startSec) {\n                        this._appendQueue[type].pop();\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                this._appendQueue[type] = [];\n            }\n            if (endSec) {\n                end = Math.min(end, endSec);\n            }\n            this._cleanUpTask[type].push({ start, end });\n            this._cleanUp(type);\n        }\n        this._appendEnabled = true;\n    }\n\n    /**\n     * 是否开启buffer填充\n     * @param value 开关\n     */\n    public setAppendEnabled(value: boolean): void {\n        if (!this._appendEnabled && value) {\n            this._appendEnabled = value;\n            this.refresh();\n        } else {\n            this._appendEnabled = value;\n        }\n    }\n\n    public getAppendEnabled(): boolean {\n        return this._appendEnabled;\n    }\n\n    /**\n     * 数据结束\n     */\n    public endOfData(): void {\n        this._endOfData = true;\n        if (!this._hasPendingData()) {\n            this._endOfStream();\n        }\n    }\n\n    public ended(): boolean {\n        return this._endOfData;\n    }\n\n    private _endOfStream(): void {\n        const ms = this._mediaSource;\n        if (!ms || ms.readyState !== 'open') {\n            return;\n        }\n        for (const type in this._sourceBuffer) {\n            const sb = this._sourceBuffer[type];\n            if (sb && sb.updating) {\n                return;\n            }\n        }\n        try {\n            ms.endOfStream();\n        } catch (error) {\n            Log.e(this.tag, error);\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MSE_ERROR,\n                details: ErrorDetails.ENDOFSTREAM_ERROR,\n                fatal: true,\n                info: {\n                    reason: error.message\n                }\n            });\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        if (this._mediaSource) {\n            const ms = this._mediaSource;\n            // pending segments should be discard\n\n            // remove all sourcebuffers\n            this._endOfStream();\n            if (ms.readyState !== 'closed') {\n                for (const type in this._sourceBuffer) {\n                    if (this._sourceBuffer[type] && this._sbHandler[type]) {\n                        this._sourceBuffer[type].removeEventListener('error', this._sbHandler[type].error);\n                        this._sourceBuffer[type].removeEventListener('updateend', this._sbHandler[type].updateend);\n                        ms.removeSourceBuffer(this._sourceBuffer[type]);\n                    }\n                }\n            }\n            ms.removeEventListener('sourceopen', this._onSourceOpen);\n            ms.removeEventListener('sourceended', this._onSourceEnded);\n            ms.removeEventListener('sourceclose', this._onSourceClose);\n            this._mediaSource = null;\n        }\n        this.removeAllListeners();\n        this._appendQueue = {};\n        this._mimeCodec = {};\n        this._cleanUpTask = {};\n        this._sourceBuffer = {};\n        this._sbHandler = {};\n    }\n\n    /**\n     * 是否有未完成的清理任务\n     * @param type video|audio|audiovideo\n     */\n    public hasCleanUpTask(type?: string): boolean {\n        let num = 0;\n        if (typeof type === 'undefined') {\n            for (let type in this._cleanUpTask) {\n                num += this._cleanUpTask[type].length;\n            }\n        } else {\n            if (this._cleanUpTask[type]) {\n                num = this._cleanUpTask[type].length;\n            }\n        }\n        return num > 0;\n    }\n\n    /**\n     * 是否已添加了sourceBuffer\n     */\n    public hasSourceBuffer(): boolean {\n        return !!Object.keys(this._sourceBuffer).length;\n    }\n\n    /**\n     * 计算待填充数据队列中数据总大小\n     */\n    private _getBufferQueueSize(): number {\n        let num = 0;\n        for (const type in this._appendQueue) {\n            num += this._appendQueue[type].reduce((prev, current) => {\n                if (current.payload && current.payload.byteLength) {\n                    return prev + current.payload.byteLength;\n                }\n                return prev;\n            }, 0);\n        }\n        return num;\n    }\n\n    /**\n     * 待填充队列中的数据时长\n     * @param type video|audio|audiovideo，为空时返回video|audio最大值\n     * @returns 时长（秒）\n     */\n    public getBufferQueueSec(type?: string): number {\n        if (!this._appendQueue) {\n            return 0;\n        }\n        let keys;\n        if (type) {\n            keys = [type];\n        } else {\n            keys = Object.keys(this._appendQueue);\n        }\n        return keys.reduce((prev, current) => {\n            if (this._appendQueue[current] && this._appendQueue[current].length > 0 && (Object.keys(this._sourceBuffer).length === 0 || this._sourceBuffer[current])) {\n                return Math.max(\n                    prev,\n                    this._appendQueue[current].reduce((prevDuration, currentSegment) => {\n                        let duration = currentSegment.endDTS - currentSegment.startDTS;\n                        if (duration) {\n                            return prevDuration + duration;\n                        }\n                        return prevDuration;\n                    }, 0)\n                );\n            }\n            return prev;\n        }, 0);\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get readyState(): ReadyState {\n        if (this._mediaSource) {\n            return this._mediaSource.readyState;\n        }\n        return 'closed';\n    }\n\n    /**\n     * 更新souceBuffer，清理或填充\n     */\n    private _update(type: string): void {\n        if (this.hasCleanUpTask(type)) {\n            this._cleanUp(type);\n        }\n        this._doAppend(type);\n    }\n\n    /**\n     * 执行清理任务\n     * @param type video|audio|audiovideo\n     */\n    private _cleanUp(type: string): void {\n        let range = this._cleanUpTask[type];\n        while (range && range.length) {\n            const item = range[0];\n            if (this._cleanUpRange(type, item)) {\n                range.shift();\n            } else {\n                return;\n            }\n        }\n        this.refresh();\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:25 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:47:25 \n * 性能监控相关类型定义\n */\nexport type MonitorData = {\n    decodedFPS: number,\n    droppedFPS: number,\n    decodedFrames: number,\n    droppedFrames: number,\n    loadStartTime: number,\n    firstFrameTime: number,\n    blockDuration: number,\n    blockCount: number,\n    downloadedBytes: number,\n} & Record<string, any>\n\nexport function getNewMonitorData(): MonitorData {\n    return {\n        decodedFPS: 0,\n        droppedFPS: 0,\n        decodedFrames: 0,\n        droppedFrames: 0,\n        loadStartTime: 0,\n        firstFrameTime: 0,\n        blockDuration: 0,\n        blockCount: 0,\n        downloadedBytes: 0,\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:48:59 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:48:59 \n * 播放质量信息\n */\nconst { performance } = window;\n\ntype PlaybackQualityInfo = {\n    decoded: number,\n    dropped: number,\n    decodedFPS: number,\n    droppedFPS: number\n}\n/**\n * 播放质量信息\n * 计算视频播放的解码总数、丢帧总数，解码FPS，丢帧FPS\n */\nclass PlaybackQuality {\n    private tag: string = 'fps';\n    private _lastDroppedFrames: number = 0;\n    private _lastDecodedFrames: number = 0;\n    private _video: HTMLVideoElement | null = null;\n    private _isVideoPlaybackQualityAvailable: boolean = false;\n    private _lastTime: number = 0;\n    private _decoded: number = 0;\n    private _dropped: number = 0\n\n    constructor() {\n    }\n\n    /**\n     * 绑定HTMLVideoElement元素\n     * @param media HTMLVideoElement\n     */\n    public attachMedia(media: HTMLVideoElement): void {\n        const video = this._video = media instanceof (window as any).HTMLVideoElement ? media : null;\n        if (video) {\n            // 部分浏览器seek后帧数信息归零的问题\n            this._isVideoPlaybackQualityAvailable = typeof video.getVideoPlaybackQuality === 'function';\n        }\n    }\n\n    public destory() {\n    }\n\n    /**\n     * 重置\n     */\n    public reset() {\n        this._lastTime = performance.now();\n        this._lastDroppedFrames = this._lastDecodedFrames = this._decoded = this._dropped = 0;\n        const video = this._video;\n        if (video) {\n            try {\n                if (this._isVideoPlaybackQualityAvailable) {\n                    const videoPlaybackQuality = video.getVideoPlaybackQuality();\n                    this._lastDecodedFrames = videoPlaybackQuality.totalVideoFrames;\n                    this._lastDroppedFrames = videoPlaybackQuality.droppedVideoFrames;\n                } else {\n                    this._lastDecodedFrames = (video as any).webkitDecodedFrameCount;\n                    this._lastDroppedFrames = (video as any).webkitDroppedFrameCount;\n                }\n            } catch (e) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * 获取播放质量信息\n     */\n    public getInfo(): PlaybackQualityInfo | undefined {\n        const video = this._video;\n        const currentTime = performance.now();\n        let decoded = 0, dropped = 0;\n\n        if (video) {\n            if (this._isVideoPlaybackQualityAvailable) {\n                const videoPlaybackQuality = video.getVideoPlaybackQuality();\n                decoded = videoPlaybackQuality.totalVideoFrames;\n                dropped = videoPlaybackQuality.droppedVideoFrames;\n            } else {\n                decoded = (video as any).webkitDecodedFrameCount || 0;\n                dropped = (video as any).webkitDroppedFrameCount || 0;\n            }\n        }\n\n        if (decoded) {\n            if (decoded < this._lastDecodedFrames) {\n                this._lastDecodedFrames = 0;\n                this._lastDroppedFrames = 0;\n            }\n            let currentPeriod = currentTime - this._lastTime,\n                currentDropped = dropped - this._lastDroppedFrames,\n                currentDecoded = decoded - this._lastDecodedFrames,\n                droppedFPS = 0,\n                decodedFPS = 0;\n            if (this._lastTime) {\n                droppedFPS = parseFloat((1000 * currentDropped / currentPeriod).toFixed(2)),\n                    decodedFPS = parseFloat((1000 * currentDecoded / currentPeriod).toFixed(2));\n            }\n            this._decoded = this._decoded += currentDecoded;\n            this._dropped = this._dropped += currentDropped;\n            this._lastTime = currentTime;\n            this._lastDroppedFrames = dropped;\n            this._lastDecodedFrames = decoded;\n\n            return {\n                decoded: this._decoded,\n                dropped: this._dropped,\n                decodedFPS,\n                droppedFPS\n            };\n        }\n        this._lastTime = currentTime;\n        return;\n    }\n}\n\nexport default PlaybackQuality;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:17 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:17 \n * 流下载相关信息处理\n */\nimport { MP4Segment } from \"../types/remux\";\n\nconst RECORD_NUM_LIMIT = 10;\nconst RECORD_DOWNLOAD_NUM_LIMIT = 200;\nconst RECORD_SEGMRNT_NUM_LIMIT = 100;\n\ntype StreamQOS = {\n    index: number;\n    startPos: number;\n    url: string;\n    bitrate: number;\n    mediaInfo?: any;\n    traffic: number;\n    loadTimeCost: number;\n    keyFrame: number;\n    videoDataRate: number;\n    audioDataRate: number;\n    segments: Partial<Record<string, { duration: number; dts: number; len: number }[]>>;\n};\ntype DownloadLog = {\n    byteLength: number;\n    timeCost: number;\n    ts: number;\n};\ntype QOS = {\n    traffic: number;\n    streams: StreamQOS[];\n    download: DownloadLog[];\n};\n\n/**\n * 监测流下载、remux质量信息\n */\nclass StreamMonitor {\n    private _qos!: QOS;\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset() {\n        this._qos = {\n            traffic: 0,\n            streams: [],\n            download: []\n        };\n    }\n\n    /**\n     * 收到关键帧\n     */\n    public onKeyFrame() {\n        this._qos.streams[this._qos.streams.length - 1].keyFrame++;\n    }\n\n    /**\n     * 开始加载新流，增加一调流记录\n     * @param index 流id\n     * @param startPos 流开始位置\n     * @param url 流地址\n     * @param bitrate 流码率\n     */\n    public onStreamOpen(index: number, startPos: number, url: string, bitrate: number): void {\n        if (this._qos.streams.length > RECORD_NUM_LIMIT) {\n            this._qos.streams.shift();\n        }\n        this._qos.streams.push({\n            index,\n            startPos,\n            url,\n            bitrate,\n            traffic: 0,\n            loadTimeCost: 0,\n            keyFrame: 0,\n            videoDataRate: 0,\n            audioDataRate: 0,\n            segments: {}\n        });\n    }\n\n    /**\n     * 收到媒体信息，解完音视频头之后\n     * @param data 媒体信息\n     */\n    public onMediaInfo(data: any) {\n        const info = this.loadingInfo;\n        if (info) {\n            info.mediaInfo = Object.assign({}, data);\n        }\n    }\n\n    /**\n     * 数据下载相关信息\n     * @param data 下载信息\n     */\n    public onDataReceive(data: { byteLength: number; timeCost: number; ts: number }): void {\n        this._qos.traffic += data.byteLength;\n        const log = this._qos.download;\n        if (log.length > RECORD_DOWNLOAD_NUM_LIMIT) {\n            log.pop();\n        }\n        log.unshift(data);\n        const info = this._qos.streams[this._qos.streams.length - 1];\n        info.traffic += data.byteLength;\n        info.loadTimeCost += data.timeCost;\n    }\n\n    public onMediaSegment(data: MP4Segment): void {\n        const qos = this._qos;\n        const stream = qos.streams[qos.streams.length - 1];\n        const log = stream.segments[data.type] || [];\n        stream.segments[data.type] = log;\n        log.push({ duration: (data.endDTS - data.startDTS) * 1000, dts: data.startDTS * 1000, len: data.payload.byteLength });\n\n        // datarate\n        if (log.length > RECORD_SEGMRNT_NUM_LIMIT) {\n            log.shift();\n        }\n        let duration = 0;\n        let totalLen = 0;\n        for (let i = 0; i < log.length; i++) {\n            totalLen += log[i].len;\n            duration += log[i].duration;\n        }\n        if (duration > 0) {\n            if (data.type === 'video') {\n                stream.videoDataRate = Math.round(totalLen * 8 / duration);\n            } else if (data.type === 'audio') {\n                stream.audioDataRate = Math.round(totalLen * 8 / duration);\n            }\n        }\n    }\n\n    /**\n     * 获取指定位置的流质量信息\n     * @param sec 视频时间轴时间（毫秒）\n     */\n    public getInfoByTime(sec: number): StreamQOS | null {\n        for (let i = this._qos.streams.length - 1; i >= 0; i--) {\n            if (this._qos.streams[i].startPos < sec) {\n                return this._qos.streams[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 更新当前下载流的开始时间\n     * @param sec 时间（毫秒）\n     */\n    public updateStartPos(sec: number): void {\n        if (this._qos.streams.length) {\n            this._qos.streams[this._qos.streams.length - 1].startPos = sec;\n        }\n    }\n\n    /**\n     * 获取当前正在加载的流质量信息\n     */\n    public get loadingInfo(): StreamQOS | null {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1];\n        }\n        return null;\n    }\n\n    /**\n     * 当前下载速度\n     */\n    public get downloadSpeed() {\n        const qos = this._qos;\n        const tsEnd = performance.now();\n        let len = 0,\n            timeCost = 0;\n        for (let i = 0; i < qos.download.length; i++) {\n            if (qos.download[i].ts > tsEnd - 1000) {\n                len += qos.download[i].byteLength;\n                timeCost += qos.download[i].timeCost;\n            } else {\n                break;\n            }\n        }\n        return Math.round(len / timeCost * 1000) || 0;\n    }\n\n    /**\n     * 当前加载流信息\n     */\n    public get mediaInfo(): any {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].mediaInfo;\n        }\n        return null;\n    }\n\n    /**\n     * 当前加载流视频视频码率\n     */\n    public get videoDataRate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].videoDataRate;\n        }\n        return 0;\n    }\n\n    /**\n     * 当前加载流视频音频码率\n     */\n    public get audioDataRate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].audioDataRate;\n        }\n        return 0;\n    }\n\n    /**\n     * 当前加载流视频码率\n     */\n    public get bitrate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].bitrate;\n        }\n        return 0;\n    }\n    /**\n     * 下载数据量（字节）\n     */\n    public get traffic(): number {\n        return this._qos.traffic;\n    }\n    /**\n     * 下载，remux质量数据\n     */\n    public get data(): QOS {\n        return this._qos;\n    }\n}\n\nexport { StreamMonitor };\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:38 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:38 \n * 播放信息监控\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../core/events';\nimport Media from '../core/media';\nimport { REPORT_TYPES } from '../core/report-types';\nimport { getNewMonitorData, MonitorData } from '../types/monitor-data';\nimport { MP4RemuxResult } from '../types/remux';\nimport PlaybackQuality from './playback-quality';\nimport { StreamMonitor } from './stream-monitor';\n\nconst HEARTBEAT_INTERVAL = 1000;\n\n/**\n * 播放信息监控。收集播放器事件，集中处理\n */\nclass Monitor extends EventEmitter {\n    private _media: Media;\n    private _playbackQuality?: PlaybackQuality;\n    private _data!: MonitorData;\n    private _playing: boolean = false;\n    private _sm: StreamMonitor;\n    private _hbTimer: any;\n\n    /**\n     * 初始化\n     * @param media Media\n     */\n    constructor(media: Media) {\n        super();\n        this._sm = new StreamMonitor();\n        this._media = media;\n        this.reset();\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset(): void {\n        this._data = getNewMonitorData();\n        this._sm.reset();\n        if (this._playbackQuality) {\n            this._playbackQuality.reset();\n        }\n        this._refresh();\n    }\n\n    /**\n     * report事件处理\n     * @param event Report事件数据\n     */\n    public onReport(event: any): void {\n        event.ts = event.ts || performance.now();\n        const data = this._data;\n        switch (event.type) {\n            case REPORT_TYPES.LOADER_CHUNK_ARRIVAL:\n                data.downloadedBytes += event.byteLength;\n                this._sm.onDataReceive(event);\n                break;\n            case REPORT_TYPES.START_LOAD_STREAM:\n                this._sm.onStreamOpen(event.index || 0, event.sync, event.url, event.bitrate);\n                break;\n            case REPORT_TYPES.KEY_FRAME:\n                this._sm.onKeyFrame();\n                break;\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        if (this._playbackQuality) {\n            this._playbackQuality.destory();\n            this._playbackQuality = undefined;\n        }\n        this._stopHeartbeat();\n    }\n\n    public onLoad(): void {\n        this._startHeartbeat();\n        if (this._media.video) {\n            this._playbackQuality = new PlaybackQuality();\n            this._playbackQuality.attachMedia(this._media.video);\n        }\n    }\n\n    public onSegmentInit(data: any): void {\n        this._sm.onMediaInfo(data);\n    }\n\n    public onLoadeddata(): void {\n        this._onFirstFrame();\n        this._waitingEnd();\n    }\n\n    public onCanplay(): void {\n        this._onFirstFrame();\n        this._waitingEnd();\n    }\n\n    public onPlaying(): void {\n        this._playing = true;\n        this._waitingEnd();\n    }\n\n    public onEnd(): void {\n        this._waitingEnd();\n    }\n\n    public onWaiting(block: boolean): void {\n        if (this._playing && this._data.firstFrameTime && block) {\n            this._waitingStart();\n        }\n    }\n\n    public onStopLoad(): void {\n        this._stopHeartbeat();\n    }\n\n    public onSegment(data: MP4RemuxResult) {\n        data.segments.forEach(segment => {\n            this._sm.onMediaSegment(segment);\n        });\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    private _refresh(): void {\n        let playbackQualityInfo;\n        if (this._playbackQuality) {\n            playbackQualityInfo = this._playbackQuality.getInfo();\n        }\n        const data = this._data;\n        if (playbackQualityInfo) {\n            data.decodedFPS = playbackQualityInfo.decodedFPS;\n            data.droppedFPS = playbackQualityInfo.droppedFPS;\n            data.droppedFrames = playbackQualityInfo.dropped;\n            data.decodedFrames = playbackQualityInfo.decoded;\n        } else {\n            data.decodedFPS = data.droppedFPS = data.droppedFrames = data.decodedFrames = 0;\n        }\n    }\n\n    private _onFirstFrame(): void {\n        if (!this._data.firstFrameTime) {\n            this._data.firstFrameTime = performance.now();\n        }\n    }\n\n    private _waitingStart() {\n        if (!this._data.bufferingStartMS) {\n            this._data.blockCount++;\n            this._data.bufferingStartMS = this._data.bufferingStartMS || performance.now();\n        }\n    }\n\n    private _waitingEnd() {\n        if (this._data.bufferingStartMS) {\n            this._data.blockDuration += performance.now() - this._data.bufferingStartMS;\n        }\n        this._data.bufferingStartMS = null;\n    }\n\n    private _heartbeat = () => {\n        this._refresh();\n\n        const data = this._data;\n        const sm = this._sm;\n        const hb = {\n            totalReceive: sm.traffic,\n            speed: sm.downloadSpeed,\n            videoDataRate: sm.videoDataRate,\n            audioDataRate: sm.audioDataRate,\n            decodedFPS: data.decodedFPS,\n            droppedFPS: data.droppedFPS,\n            decodedFrames: data.decodedFrames,\n            droppedFrames: data.droppedFrames\n        };\n\n        this.emit(LasEvents.HEARTBEAT, hb);\n    }\n\n    private _startHeartbeat(): void {\n        if (!this._hbTimer) {\n            this._hbTimer = setInterval(this._heartbeat, HEARTBEAT_INTERVAL)\n        }\n    }\n\n    private _stopHeartbeat(): void {\n        if (this._hbTimer) {\n            clearInterval(this._hbTimer);\n            this._hbTimer = undefined;\n        }\n    }\n}\n\nexport default Monitor;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:18 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:18 \n * 浏览器能力检测，是否支持flv播放\n */\nimport FetchLoader from '../io/fetch';\nimport { XHR, XHR_TYPE } from '../io/xhr';\n\nexport function isSupported(): boolean {\n    const mediaSource = (window as any).MediaSource || (window as any).WebKitMediaSource;\n    const sourceBuffer = (window as any).SourceBuffer || (window as any).WebKitSourceBuffer;\n    // 解码\n    const isTypeSupported: boolean =\n        mediaSource &&\n        typeof mediaSource.isTypeSupported === 'function' &&\n        mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n\n    // MSE\n    const sourceBufferValidAPI =\n        !sourceBuffer ||\n        (sourceBuffer.prototype &&\n            typeof sourceBuffer.prototype.appendBuffer === 'function' &&\n            typeof sourceBuffer.prototype.remove === 'function');\n\n    // Loader\n    let streaming = FetchLoader.isSupport() || XHR.isSupportChunk() === XHR_TYPE.MOZ_CHUNK;\n    return isTypeSupported && sourceBufferValidAPI && streaming;\n}\n","/*\n * @Author: gengxing\n * @Date: 2020-06-30 16:22:55\n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-30 18:29:35\n */\nimport Media from '../core/media';\nimport { AutoPlaybackRateConfig } from '../types/core';\nimport { Log } from './log';\n\n/**\n * 播放速度控制\n */\nclass PlaybackRateManager {\n    private tag: string = 'PlaybackRateManager';\n    private _media: Media;\n    private _config: AutoPlaybackRateConfig;\n    private _interval: number = 0;\n    private _timer: any;\n\n    constructor(media: Media, config: AutoPlaybackRateConfig) {\n        this._media = media;\n        this._config = config;\n    }\n\n    /**\n     * 启动自动倍速控制\n     */\n    public start(): void {\n        this._interval = this._interval || this._config.startDelay || this._config.interval || 5;\n        this._tick();\n        this._interval = this._config.interval || 1;\n    }\n\n    /**\n     * 停止自动倍速控制\n     */\n    public stop(): void {\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = 0;\n        }\n    }\n\n    public destroy(): void {\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = 0;\n        }\n    }\n\n    private _tick(): void {\n        if (!this._timer) {\n            this._timer = setTimeout(() => {\n                if (this._media.video) {\n                    this._nextPlayBackRate(this._media.bufferedSec(), this._media.video);\n                }\n                this._timer = 0;\n                this._tick();\n            }, this._interval * 1000);\n        }\n    }\n\n    /**\n     * 处理一次播放倍速计算\n     * @param buffered 当前待播放的buffer长度，秒\n     * @param video video\n     */\n    private _nextPlayBackRate(buffered: number, video: HTMLVideoElement): void {\n        let playbackRate = 1;\n        const rule = this._config.rule;\n\n        let i = 0;\n        for (i = 0; i < rule.length; i++) {\n            if (video.playbackRate >= rule[i].rate) {\n                break;\n            }\n        }\n\n        const downRule = i < rule.length - 1 ? rule[i + 1] : null;\n        const upRule = i > 0 ? rule[i - 1] : null;\n\n        playbackRate = rule[i].rate;\n\n        if (upRule && buffered > upRule.lower) {\n            playbackRate = upRule.rate;\n        }\n\n        if (downRule && buffered < downRule.upper) {\n            playbackRate = downRule.rate;\n        }\n        if (video.playbackRate !== playbackRate) {\n            Log.i(this.tag, `auto change playback rate from ${video.playbackRate} to ${playbackRate}`);\n            video.playbackRate = playbackRate;\n        }\n    }\n}\n\nexport default PlaybackRateManager;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:42:49 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-30 16:32:42\n */\nimport { EventEmitter } from 'events';\nimport AbrLevel from './abr/abr-level';\nimport { ConfigHelper } from './config';\nimport { ErrorData, ErrorDetails, ErrorTypes } from './core/errors';\nimport LasEvents from './core/events';\nimport LasMain from './core/las-main';\nimport Media from './core/media';\nimport MSE from './core/mse';\nimport Monitor from './monitor/monitor';\nimport { LasConfig } from './types/core';\nimport { MP4RemuxResult } from './types/remux';\nimport BrowserHelper from './utils/browser-helper';\nimport { isSupported } from './utils/is-supported';\nimport { Log } from './utils/log';\nimport PlaybackRateManager from './utils/playback-rate-manager';\n\n// 循环计时器间隔，毫秒\nconst MAIN_TIMER_INTERVAL = 200;\n\nenum STAT {\n    NONE,\n    WAITING,\n    SEEK,\n    SELECT_BITRATE,\n    INIT\n}\n/**\n * Las controller\n * @export\n * @class Las\n */\nexport default class Las extends EventEmitter {\n    private tag: string = 'las';\n    private _config: LasConfig;\n    private _src: any;\n    private _video?: HTMLVideoElement;\n    private _mse!: MSE;\n    private _lasMain?: LasMain;\n\n    private _stat: STAT = STAT.INIT;\n    private _audioCodecSwap: boolean = false;\n    private _error?: ErrorDetails;\n    private _audioCodec: string = '';\n    private _recoverMediaErrorTime: number = 0;\n    private _mainTimer: any;\n    private _media: Media;\n\n    private _nextLevel: any[] = [];\n    private _mediaInfo: any;\n    private _loadStopped: boolean = false;\n    private _seekOnUpdateEnd: boolean = false;\n    private _playingLevel?: number;\n    private _startLevel?: number;\n    private _monitor!: Monitor;\n\n    private _playbackRateManager?: PlaybackRateManager;\n\n    /**\n     * 浏览器是否支持las.js\n     */\n    static isSupport(): boolean {\n        return isSupported();\n    }\n\n    /**\n     * las.js当前版本\n     */\n    static get version() {\n        return __VERSION__;\n    }\n\n    /**\n     * las.js的事件列表\n     */\n    static get Events() {\n        return LasEvents;\n    }\n\n    /**\n     * las.js的错误类型列表\n     */\n    static get ErrorTypes() {\n        return ErrorTypes;\n    }\n\n    /**\n     * las.js的错误详情列表\n     */\n    static get ErrorDetails() {\n        return ErrorDetails;\n    }\n\n    /**\n     * 构造函数\n     * @param config LasConfig\n     */\n    constructor(config?: Partial<LasConfig>) {\n        super();\n        if (!this.off) {\n            this.off = this.removeListener;\n        }\n        this._config = ConfigHelper.processConfig(config);\n        this._media = new Media();\n        if (!this._config) {\n            setTimeout(() => {\n                this._onError({\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.CONFIG_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'config data error'\n                    }\n                });\n            }, 0);\n            return;\n        }\n        if (!Las.isSupport()) {\n            setTimeout(() => {\n                this._onError({\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.UNSUPPORTED,\n                    fatal: true,\n                    info: {\n                        reason: 'unsupported'\n                    }\n                });\n            }, 0);\n            return;\n        }\n        this._mainTimer = null;\n        this._stat = STAT.INIT;\n        this._startMainTimer();\n        this._initMonitor();\n        if (this._config.autoPlaybackRateConf) {\n            this._playbackRateManager = new PlaybackRateManager(this._media, this._config.autoPlaybackRateConf);\n        }\n        Log.i(this.tag, Las.version, this._config);\n    }\n\n    /**\n     * 绑定HTMLVideoElement\n     * @param video HTMLVideoElement\n     */\n    public attachMedia(video: HTMLVideoElement): void {\n        this._video = video;\n        this._media.attachVideo(this._video);\n        this._initMSE();\n        this._bindVideoEvents();\n    }\n\n    /**\n     * 开始加载视频\n     * @param src src\n     */\n    public load(src: any = undefined): void {\n        if (!this._video) {\n            this._onError({\n                type: ErrorTypes.OTHER_ERROR,\n                details: ErrorDetails.NO_VIDEO,\n                fatal: true,\n                info: {\n                    reason: 'no video attached'\n                }\n            });\n        }\n        this._playingLevel = undefined;\n        this._monitor.reset();\n        if (src) {\n            this._src = src;\n        }\n        this._load();\n    }\n\n    /**\n     * 恢复播放。从暂停、停止状态恢复\n     */\n    public resume() {\n        Log.i(this.tag, 'call resume');\n        if (this._loadStopped) {\n            this._loadStopped = false;\n            this._load();\n        }\n        if (this._video && this._video.paused) {\n            this._video.play();\n        }\n    }\n\n    /**\n     * 回收资源\n     */\n    public destroy(): void {\n        if (this._playbackRateManager) {\n            this._playbackRateManager.destroy();\n        }\n        this._stopMonitor();\n        this._stopMainTimer();\n        this._unbindVideoEvents();\n        this._stopVideo();\n        this.removeAllListeners();\n    }\n\n    /**\n     * 重新拉流\n     */\n    public refresh(reuseMSE: boolean = false): void {\n        Log.i(this.tag, 'call refresh');\n        if (this._config.autoRecoverMedia ||\n            !(this._error === ErrorDetails.VIDEO_ERROR && (this._recoverSwapRemuxType() || this._recoverSwapAudioCodec()))\n        ) {\n            this._reload(reuseMSE);\n        }\n        this._error = undefined;\n    }\n\n    /**\n     * 停止加载，内核停止，用于直播停止\n     */\n    public stopLoad(): void {\n        Log.i(this.tag, 'call stopLoad');\n        if (this._lasMain) {\n            this._destroyLasMain();\n            this._mse.endOfData();\n            this._loadStopped = true;\n            this._monitor.onStopLoad();\n        }\n        if (this._playbackRateManager) {\n            this._playbackRateManager.stop();\n        }\n    }\n\n    /**\n     * 获取视频信息\n     */\n    public getMediaInfo(): any {\n        return Object.assign({}, this._mediaInfo);\n    }\n\n    /**\n     * 自动码率是否开启\n     */\n    public get autoLevelEnabled(): boolean {\n        if (this._lasMain) {\n            return this._lasMain.autoLevelEnabled;\n        }\n        return false;\n    }\n\n    /**\n     * 可用流列表\n     */\n    public get levels(): AbrLevel[] {\n        if (this._lasMain) {\n            this._lasMain.levels.slice(0);\n        }\n        return [];\n    }\n\n    /**\n     * 下一个下载的流index\n     */\n    public get nextLevel(): number {\n        if (this._lasMain) {\n            return this._lasMain.nextLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 在下一个关键帧位置切换流\n     * 设置-1会启用自动码率\n     */\n    public set nextLevel(value: number) {\n        if (!this._verifyLevel(value) || !this._lasMain) {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, { level: value });\n            return;\n        }\n        this._lasMain.nextLevel = value;\n    }\n\n    /**\n     * get: 当前正在下载的流index\n     */\n    public get currentLevel(): number {\n        if (this._lasMain) {\n            return this._lasMain.currentLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 立即切换码率，会清空buffer并从当前播放位置所在切片开始下载新的流\n     * 设置-1会启用自动码率\n     */\n    public set currentLevel(value: number) {\n        if (!this._verifyLevel(value) || !this._lasMain) {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, { level: value });\n            return;\n        }\n\n        if (value === -1) {\n            this._lasMain.nextLevel = value;\n        } else {\n            this._stat = STAT.SELECT_BITRATE;\n            this._seekOnUpdateEnd = true;\n            if (this._mse) {\n                this._mse.flush();\n            }\n            this._lasMain.currentLevel = value;\n        }\n    }\n\n    public get startLevel(): number {\n        return typeof this._startLevel === 'undefined' ? -1 : this._startLevel;\n    }\n\n    public set startLevel(value: number) {\n        this._startLevel = value;\n    }\n\n    public get monitorData() {\n        if (this._monitor) {\n            return this._monitor.data;\n        }\n        return;\n    }\n\n    private _reload(reuseMSE: boolean = false) {\n        if ((this._lasMain && this._mse) || this._error) {\n            if (this._lasMain) {\n                this._startLevel = this._lasMain.currentLevel;\n            }\n            this._nextLevel = [];\n            if (reuseMSE && this._mse) {\n                this._mse.flush();\n                this._internalSeek(0);\n                this._seekOnUpdateEnd = true;\n            } else {\n                this._stopVideo();\n                this._initMSE();\n            }\n            this._destroyLasMain();\n            this._initLasMain();\n            if (this._lasMain) {\n                this._lasMain.load();\n            }\n        } else {\n            Log.v(this.tag, 'transmuxer & mediaSource not ready');\n        }\n    }\n\n    /**\n     * 绑定video事件\n     */\n    private _bindVideoEvents(): void {\n        if (this._video) {\n            this._video.addEventListener('loadeddata', this._onVideoLoadeddata);\n            this._video.addEventListener('canplay', this._onVideoCanplay);\n            this._video.addEventListener('waiting', this._onVideoWaiting);\n            this._video.addEventListener('playing', this._onVideoPlaying);\n            this._video.addEventListener('ended', this._onVideoEnded);\n            this._video.addEventListener('error', this._onVideoError);\n        }\n    }\n\n    /**\n     * 取消video绑定事件\n     */\n    private _unbindVideoEvents(): void {\n        if (this._video) {\n            this._video.removeEventListener('loadeddata', this._onVideoLoadeddata);\n            this._video.removeEventListener('canplay', this._onVideoCanplay);\n            this._video.removeEventListener('waiting', this._onVideoWaiting);\n            this._video.removeEventListener('playing', this._onVideoPlaying);\n            this._video.removeEventListener('ended', this._onVideoEnded);\n            this._video.removeEventListener('error', this._onVideoError);\n        }\n    }\n\n    /**\n     * 处理HTMLVideoElelment事件-loadeddata\n     */\n    private _onVideoLoadeddata = (): void => {\n        Log.i(this.tag, 'loadeddata');\n        this._monitor.onLoadeddata();\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-canplay\n     */\n    private _onVideoCanplay = (): void => {\n        Log.v(this.tag, `canplay ${!!this._stat}`);\n        this._monitor.onCanplay();\n        if (this._video && this._stat !== STAT.NONE) {\n            this._stat = STAT.NONE;\n            this._checkLevelChange();\n            if (!this._video.paused) {\n                // 兼容waiting后不触发playing\n                this._onVideoPlaying();\n            }\n        }\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-waiting\n     */\n    private _onVideoWaiting = (): void => {\n        if (!this._video) {\n            return;\n        }\n        this._stat = this._stat || STAT.WAITING;\n        const block = !this._video.seeking && this._stat === STAT.WAITING;\n        if (block) {\n            Log.i(this.tag, 'waiting currentTime:', this._video.currentTime);\n        }\n        this._monitor.onWaiting(block);\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-playing\n     */\n    private _onVideoPlaying = (): void => {\n        Log.i(this.tag, 'playing');\n        if (!this._error) {\n            this._stat = STAT.NONE;\n            this._monitor.onPlaying();\n        }\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-ended\n     */\n    private _onVideoEnded = (): void => {\n        this._monitor.onEnd();\n        if (this._mse) {\n            this._mse.flush();\n        }\n    };\n\n\n    /**\n     * 处理HTMLVideoElelment事件-error\n     */\n    private _onVideoError = (error: ErrorEvent): void => {\n        Log.e(this.tag, 'video error', error);\n        if (this._error) {\n            return;\n        }\n        if (this._config.autoRecoverMedia) {\n            const now = performance.now();\n            // 尝试切换remux方式\n            if ((!this._recoverMediaErrorTime || now - this._recoverMediaErrorTime > 3000) && this._recoverSwapRemuxType()) {\n                this._recoverMediaErrorTime = now;\n                return;\n            }\n            // 尝试替换audio codec string\n            if (this._recoverSwapAudioCodec()) {\n                return;\n            }\n        }\n\n        let reason = 'video error';\n        if (this._video && this._video.error) {\n            reason += ` code:${this._video.error.code} message:${this._video.error.message}`;\n        }\n        this._onError({\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.VIDEO_ERROR,\n            fatal: true,\n            info: {\n                reason\n            }\n        });\n    };\n\n    /**\n     * 初始化MSE\n     * @param video HTMLVideoElement\n     */\n    private _initMSE() {\n        if (!this._video) {\n            return;\n        }\n        let video = this._video;\n        this._mse = new MSE(this._config);\n        this._mse.attach(video);\n        this._media.attachMSE(this._mse);\n\n        this._mse.on(LasEvents.ERROR, data => {\n            this._onError(data);\n        });\n        this._mse.on('updateend', () => {\n            if (this._seekOnUpdateEnd && video.buffered.length) {\n                Log.i(this.tag, 'seek on updateend');\n                this._internalSeek(video.buffered.start(0));\n                this._seekOnUpdateEnd = false;\n            }\n        });\n        this._mse.on('resetDone', () => {\n            this._seekOnUpdateEnd = true;\n        });\n    }\n\n    /**\n     * 销毁MSE\n     */\n    private _destroyMSE(): void {\n        if (this._mse) {\n            this._mse.removeAllListeners();\n            this._mse.destroy();\n        }\n    }\n\n    /**\n     * 开始加载视频\n     */\n    private _load() {\n        this._loadStopped = false;\n        this._error = undefined;\n        this._stat = STAT.INIT;\n        this._nextLevel = [];\n        this._media.reset();\n\n        this._monitor.onLoad();\n        if (this._lasMain) {\n            this._destroyLasMain();\n        }\n        if (this._mse.hasSourceBuffer() || (this._video && this._video.error)) {\n            this._resetMSE();\n        }\n        this._initLasMain();\n        if (this._lasMain) {\n            this._lasMain.load();\n        }\n        if (this._config.autoPlaybackRate && this._playbackRateManager) {\n            this._playbackRateManager.start();\n        }\n    }\n\n    /**\n     * 重置MSE，清空video.src，重新绑定一个新的MSE\n     */\n    private _resetMSE = () => {\n        this._seekOnUpdateEnd = false;\n        if (this._video) {\n            Log.i(this.tag, 'rebuild mse');\n            URL.revokeObjectURL(this._video.src);\n            this._video.src = '';\n            this._video.removeAttribute('src');\n            this._destroyMSE();\n            this._initMSE();\n        }\n    }\n\n    private _verifyLevel(value: number): boolean {\n        return !!(this._lasMain &&\n            this._lasMain.levels.length > 0 &&\n            value < this._lasMain.levels.length &&\n            value >= -1 &&\n            this._video && !this._video.ended);\n    }\n\n    /**\n     * 初始化LasMain\n     */\n    private _initLasMain(): void {\n        this._lasMain = new LasMain(this._config, this._media);\n        this._bindLasMainEvent(this._lasMain);\n        this._lasMain.init(this._src, this._audioCodec);\n    }\n\n    /**\n     * 销毁LasMain\n     */\n    private _destroyLasMain(): void {\n        if (this._lasMain) {\n            this._lasMain.removeAllListeners();\n            this._lasMain.destroy();\n            this._lasMain = undefined;\n        }\n    }\n\n    /**\n     * 绑定lasMain事件\n     */\n    private _bindLasMainEvent(lasMain: LasMain): void {\n        const mse = this._mse;\n        lasMain.on(LasEvents.MP4_SEGMENT, (data: MP4RemuxResult) => {\n            if (mse) {\n                mse.mediaSegment(data.segments);\n            }\n            if (this._monitor) {\n                this._monitor.onSegment(data);\n            }\n        });\n\n        lasMain.on(LasEvents.MEDIA_INFO, data => {\n            const mediaInfo = Object.assign({}, data);\n            this._monitor.onSegmentInit(mediaInfo);\n            this.emit(LasEvents.MEDIA_INFO, mediaInfo);\n            this._mediaInfo = mediaInfo;\n            this._audioCodec = data.defaultAudioCodec || data.audioCodec;\n            if (mse) {\n                mse.mediaInit(mediaInfo);\n            }\n        });\n\n        lasMain.on(LasEvents.ERROR, data => {\n            this._onError(data);\n        });\n\n        lasMain.on(LasEvents.LOAD_END, () => {\n            if (mse) {\n                mse.endOfData();\n            }\n            this.emit(LasEvents.LOAD_END);\n        });\n        lasMain.on(LasEvents.LEVEL_SWITCH_FAILED, data => {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, data);\n        });\n        lasMain.on(LasEvents.LEVEL_SWITCHING, data => {\n            if (!data.smooth && this._mse) {\n                this._mse.flush();\n            }\n            this.emit(LasEvents.LEVEL_SWITCHING, { level: data.level });\n            this._nextLevel = this._nextLevel\n                .sort((a, b) => {\n                    return a.startSec - b.startSec;\n                })\n                .filter(value => {\n                    return value.startSec < data.startSec;\n                });\n            this._nextLevel.push(data);\n        });\n        lasMain.on(LasEvents.SCRIPT_PARSED, data => {\n            this.emit(LasEvents.SCRIPT_PARSED, data);\n        });\n        lasMain.on(LasEvents.MANIFEST_PARSED, data => {\n            if (typeof this._playingLevel === 'number') {\n                lasMain.currentLevel = this._playingLevel;\n                return;\n            }\n\n            if (typeof this._startLevel === 'number') {\n                lasMain.currentLevel = this._startLevel;\n            }\n            data = Object.assign({ levels: this.levels.slice(0), currentLevel: this.currentLevel }, data);\n            this._playingLevel = lasMain.currentLevel;\n            Log.i(this.tag, LasEvents.MANIFEST_PARSED, data);\n            this.emit(LasEvents.MANIFEST_PARSED, data);\n        });\n        lasMain.on(LasEvents.REPORT, data => {\n            if (this._monitor) {\n                this._monitor.onReport(data);\n            }\n        });\n    }\n\n    /**\n     * 内部seek\n     * @param time 时间\n     */\n    private _internalSeek(time: number): void {\n        if (this._video) {\n            this._video.currentTime = time;\n        }\n    }\n\n    /**\n     * 主循环\n     * 用于处理buffer空隙和清晰度切换轮询检测\n     */\n    private _mainLoop = (): void => {\n        const EPS = 1e-3;\n        const video = this._video;\n\n        if (video &&\n            ((this._stat === STAT.WAITING && !video.seeking) ||\n                this._stat === STAT.INIT ||\n                this._stat === STAT.SEEK ||\n                this._stat === STAT.SELECT_BITRATE) &&\n\n            this._mse &&\n            !this._mse.hasCleanUpTask() &&\n            !video.ended\n        ) {\n            const currentTime = video.currentTime;\n            const currentBuffer = this._media.currentBuffer(currentTime);\n            let jumpTo: number | undefined = undefined;\n            // 卡顿位置无buffer\n            if (!currentBuffer || currentBuffer.end - currentTime < 1) {\n                const nextBuffer = this._media.nextBuffer(currentTime);\n                if (nextBuffer) {\n                    Log.i(this.tag, 'try fix block-A');\n                    jumpTo = nextBuffer.start;\n                }\n            } else if (video.buffered.length > 1 && currentBuffer.end - currentTime > 1) {\n                // 多段buffer播放卡顿\n                Log.i(this.tag, 'try fix block-B');\n                jumpTo = currentBuffer.start;\n            }\n\n            if (jumpTo) {\n                jumpTo = jumpTo + (BrowserHelper.isSafari ? 0.3 : EPS);\n                this._internalSeek(jumpTo);\n                Log.i(this.tag, `jump to ${jumpTo}`);\n            }\n        }\n        if (this._nextLevel.length) {\n            this._checkLevelChange();\n        }\n    };\n\n    /**\n     * 错误处理\n     * @param data 错误数据\n     */\n    private _onError(data: ErrorData): void {\n        Log.i(this.tag, `on error ${JSON.stringify(data)}`);\n        if (!data.info.url && this.levels && this.levels[this.currentLevel]) {\n            data.info.url = this.levels[this.currentLevel].url;\n        }\n        if (data.fatal) {\n            this.stopLoad();\n            this._stopMainTimer();\n            if (data.details === ErrorDetails.VIDEO_ERROR || (this._video && this._video.error)) {\n                this._destroyMSE();\n            }\n            if (!this._error) {\n                this._error = data.details;\n                this.emit(LasEvents.ERROR, data);\n            }\n        }\n    }\n\n    /**\n     * 开始主循环计时器\n     */\n    private _startMainTimer(): void {\n        if (this._mainTimer === null) {\n            this._mainTimer = setInterval(this._mainLoop, MAIN_TIMER_INTERVAL);\n        }\n    }\n\n    /**\n     * 停止主循环计时器\n     */\n    private _stopMainTimer(): void {\n        if (this._mainTimer) {\n            clearInterval(this._mainTimer);\n            this._mainTimer = null;\n        }\n    }\n\n    /**\n     * 处理清晰度切换是否完成\n     */\n    private _checkLevelChange(): void {\n        const d = this._nextLevel[0];\n        if (this._video && d && this._video.currentTime >= d.startSec && this._media.isTimeinBuffered(this._video.currentTime)) {\n            this.emit(LasEvents.LEVEL_SWITCHED, { level: d.level });\n            this._playingLevel = d.level;\n            this._nextLevel.shift();\n        }\n    }\n\n    private _stopVideo(): void {\n        if (this._video) {\n            URL.revokeObjectURL(this._video.src);\n            this._video.src = '';\n            this._video.removeAttribute('src');\n            this._destroyLasMain();\n            this._destroyMSE();\n        }\n    }\n\n    private _initMonitor(): void {\n        if (!this._monitor) {\n            this._monitor = new Monitor(this._media);\n            this._monitor.on(LasEvents.HEARTBEAT, value => {\n                this.emit(LasEvents.HEARTBEAT, value);\n            })\n        }\n    }\n\n    private _stopMonitor(): void {\n        if (this._monitor) {\n            this._monitor.destroy();\n            this._monitor.removeAllListeners();\n        }\n    }\n\n    /**\n     * 解码错误时尝试更换remux方式\n     */\n    private _recoverSwapRemuxType(): boolean {\n        let gopRemux = this._config.gopRemux;\n        this._config.gopRemux = true;\n\n        if (gopRemux === this._config.gopRemux) {\n            return false;\n        } else {\n            Log.i(this.tag, 'recover swap remux type');\n            this._reload();\n            return true;\n        }\n    }\n\n    /**\n     * 解码错误时尝试更换audio codec string\n     */\n    private _recoverSwapAudioCodec(): boolean {\n        if (!this._audioCodecSwap && this._audioCodec) {\n            if (this._audioCodec.indexOf('mp4a.40.5') !== -1) {\n                this._audioCodec = 'mp4a.40.2';\n            } else {\n                this._audioCodec = 'mp4a.40.5';\n            }\n            this._audioCodecSwap = true;\n            Log.i(this.tag, 'recover swap audio codec');\n            this._reload();\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:46:33 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:46:33 \n * flv格式相关定义\n */\n/**\n * flv tag类型\n */\nexport enum FlvTagType {\n    AUDIO = 8,\n    VIDEO = 9,\n    SCRIPT = 18\n}\n\n/**\n * flv主要字段长度定义\n */\nexport const FlvSize = {\n    FLV_HEAD_LEN: 13,\n    FLV_TAG_HEAD_LEN: 11,\n    FLV_TAG_SIZE_LEN: 4,\n    AVC_KEY_FRAME_CHECK_LEN: 2\n}\n\n/**\n * flv tag定义\n */\nexport class FlvTag {\n    public tagType: FlvTagType = FlvTagType.VIDEO;\n    public dataSize: number = 0;\n    public timestamp: number = 0;\n    public size: number = 0;\n    public cts: number = 0;\n    public frameType: number = 0;\n    public codecId: number = 0;\n    public body: Uint8Array | null = null;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:00 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 16:16:15\n * 浏览器ua解析，用于浏览器兼容性处理\n */\ninterface IBrowserHelper {\n    isSafari: boolean,\n    isFirefox: boolean,\n    isAndroid: boolean,\n}\n\n/**\n * 浏览器类型检测，用于处理浏览器兼容性问题\n */\nconst BrowserHelper: IBrowserHelper = ((): IBrowserHelper => {\n    let vendor = navigator.vendor;\n    let userAgent = navigator.userAgent;\n    return {\n        isSafari: !!(vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS')),\n        isFirefox: /firefox/i.test(userAgent),\n        isAndroid: /android/i.test(userAgent),\n    };\n})();\n\nexport default BrowserHelper;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:39 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:39 \n * log工具\n */\nconst GLOBAL_TAG = 'las.js-';\nconst FORCE_GLOBAL_TAG = true;\n\n/**\n * 处理log参数\n * @param tag tag\n * @param msg msg\n */\nfunction formatter(tag: string, msg: any[]): any[] {\n    if (!msg || msg.length === 0) {\n        msg = [tag];\n        tag = '';\n    }\n    tag = FORCE_GLOBAL_TAG ? GLOBAL_TAG + (tag ? '::' + tag : '') : tag || GLOBAL_TAG;\n    msg.unshift('[' + tag + '] > ');\n\n    return msg;\n}\n\nenum LOG_LEVEL {\n    LEVEL_ERROR = 'e', // 日志等级-error，只输出error日志\n    LEVEL_WARN = 'w', // 日志等级-warn，输出error，warn日志\n    LEVEL_INFO = 'i', // 日志等级-info，输出error, warn, info日志\n    LEVEL_DEBUG = 'd', // 日志等级-debug，输出error, warn, info, debug日志\n    LEVEL_VERBOSE = 'v' // 日志等级-verbose，输出error, warn, info, debug, verbose日志\n}\n\n/**\n * log信息输出\n */\nclass Log {\n    public static ENABLE_ERROR: boolean = true;\n    public static ENABLE_WARN: boolean = false;\n    public static ENABLE_INFO: boolean = false;\n    public static ENABLE_DEBUG: boolean = false;\n    public static ENABLE_VERBOSE: boolean = false;\n\n    /**\n     * 设置日志输出等级\n     * @param l 日志等级\n     */\n    static level(l: LOG_LEVEL) {\n        Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = Log.ENABLE_VERBOSE = false;\n        switch (l) {\n            case LOG_LEVEL.LEVEL_WARN:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = true;\n                break;\n            case LOG_LEVEL.LEVEL_INFO:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = true;\n                break;\n            case LOG_LEVEL.LEVEL_DEBUG:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = true;\n                break;\n            case LOG_LEVEL.LEVEL_VERBOSE:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = Log.ENABLE_VERBOSE = true;\n                break;\n            default:\n                Log.ENABLE_ERROR = true;\n                break;\n        }\n    }\n\n    /**\n     * error日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static e(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_ERROR) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.error || console.warn || console.log).apply(console, out);\n    }\n\n    /**\n     * warn日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static w(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_WARN) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.warn || console.log).apply(console, out);\n    }\n\n    /**\n     * info日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static i(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_INFO) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.info || console.log).apply(console, out);\n    }\n\n    /**\n     * debug日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static d(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_DEBUG) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.debug || console.log).apply(console, out);\n    }\n\n    /**\n     * verbose日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static v(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_VERBOSE) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        console.log.apply(console, out);\n    }\n}\n\nexport { Log, LOG_LEVEL };\n"],"sourceRoot":""}